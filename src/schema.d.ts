/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


/** OneOf type helpers */
type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };
type XOR<T, U> = (T | U) extends object ? (Without<T, U> & U) | (Without<U, T> & T) : T | U;
type OneOf<T extends any[]> = T extends [infer Only] ? Only : T extends [infer A, infer B, ...infer Rest] ? OneOf<[XOR<A, B>, ...Rest]> : never;

export interface paths {
  "/activity-map-place-public/{itemId}": {
    /** @description Public endpoint for getting the place info. */
    get: operations["READ_ActivityMapPlacePublic"];
  };
  "/user/{userID}/additional-transaction-information-category": {
    /** @description Get the available categories. */
    get: operations["List_all_AdditionalTransactionInformationCategory_for_User"];
  };
  "/user/{userID}/additional-transaction-information-category-user-defined": {
    /** @description Manage user-defined categories. */
    post: operations["CREATE_AdditionalTransactionInformationCategoryUserDefined_for_User"];
  };
  "/user/{userID}/monetary-account/{monetary-accountID}/attachment": {
    /** @description Create a new monetary account attachment. Create a POST request with a payload that contains the binary representation of the file, without any JSON wrapping. Make sure you define the MIME type (i.e. image/jpeg) in the Content-Type header. You are required to provide a description of the attachment using the X-Bunq-Attachment-Description header. */
    post: operations["CREATE_Attachment_for_User_MonetaryAccount"];
  };
  "/user/{userID}/attachment/{itemId}": {
    /** @description Get a specific attachment. The header of the response contains the content-type of the attachment. */
    get: operations["READ_Attachment_for_User"];
  };
  "/attachment-public": {
    /** @description Create a new public attachment. Create a POST request with a payload that contains a binary representation of the file, without any JSON wrapping. Make sure you define the MIME type (i.e. image/jpeg, or image/png) in the Content-Type header. You are required to provide a description of the attachment using the X-Bunq-Attachment-Description header. */
    post: operations["CREATE_AttachmentPublic"];
  };
  "/attachment-public/{itemId}": {
    /** @description Get a specific attachment's metadata through its UUID. The Content-Type header of the response will describe the MIME type of the attachment file. */
    get: operations["READ_AttachmentPublic"];
  };
  "/avatar": {
    /** @description Avatars are public images used to represent you or your company. Avatars are used to represent users, monetary accounts and cash registers. Avatars cannot be deleted, only replaced. Avatars can be updated after uploading the image you would like to use through AttachmentPublic. Using the attachment_public_uuid which is returned you can update your Avatar. Avatars used for cash registers and company accounts will be reviewed by bunq. */
    post: operations["CREATE_Avatar"];
  };
  "/avatar/{itemId}": {
    /** @description Avatars are public images used to represent you or your company. Avatars are used to represent users, monetary accounts and cash registers. Avatars cannot be deleted, only replaced. Avatars can be updated after uploading the image you would like to use through AttachmentPublic. Using the attachment_public_uuid which is returned you can update your Avatar. Avatars used for cash registers and company accounts will be reviewed by bunq. */
    get: operations["READ_Avatar"];
  };
  "/user/{userID}/billing-contract-subscription": {
    /** @description Get all subscription billing contract for the authenticated user. */
    get: operations["List_all_BillingContractSubscription_for_User"];
  };
  "/user/{userID}/bunqme-fundraiser-profile/{itemId}": {
    /** @description bunq.me public profile of the user. */
    get: operations["READ_BunqmeFundraiserProfile_for_User"];
  };
  "/user/{userID}/bunqme-fundraiser-profile": {
    /** @description bunq.me public profile of the user. */
    get: operations["List_all_BunqmeFundraiserProfile_for_User"];
  };
  "/user/{userID}/monetary-account/{monetary-accountID}/bunqme-fundraiser-result/{itemId}": {
    /** @description bunq.me fundraiser result containing all payments. */
    get: operations["READ_BunqmeFundraiserResult_for_User_MonetaryAccount"];
  };
  "/user/{userID}/monetary-account/{monetary-accountID}/bunqme-tab": {
    /** @description bunq.me tabs allows you to create a payment request and share the link through e-mail, chat, etc. Multiple persons are able to respond to the payment request and pay through bunq, iDeal or SOFORT. */
    get: operations["List_all_BunqmeTab_for_User_MonetaryAccount"];
    /** @description bunq.me tabs allows you to create a payment request and share the link through e-mail, chat, etc. Multiple persons are able to respond to the payment request and pay through bunq, iDeal or SOFORT. */
    post: operations["CREATE_BunqmeTab_for_User_MonetaryAccount"];
  };
  "/user/{userID}/monetary-account/{monetary-accountID}/bunqme-tab/{itemId}": {
    /** @description bunq.me tabs allows you to create a payment request and share the link through e-mail, chat, etc. Multiple persons are able to respond to the payment request and pay through bunq, iDeal or SOFORT. */
    get: operations["READ_BunqmeTab_for_User_MonetaryAccount"];
    /** @description bunq.me tabs allows you to create a payment request and share the link through e-mail, chat, etc. Multiple persons are able to respond to the payment request and pay through bunq, iDeal or SOFORT. */
    put: operations["UPDATE_BunqmeTab_for_User_MonetaryAccount"];
  };
  "/user/{userID}/monetary-account/{monetary-accountID}/bunqme-tab-result-response/{itemId}": {
    /** @description Used to view bunq.me TabResultResponse objects belonging to a tab. A TabResultResponse is an object that holds details on a tab which has been paid from the provided monetary account. */
    get: operations["READ_BunqmeTabResultResponse_for_User_MonetaryAccount"];
  };
  "/user/{userID}/oauth-client/{oauth-clientID}/callback-url/{itemId}": {
    /** @description Used for managing OAuth Client Callback URLs. */
    get: operations["READ_CallbackUrl_for_User_OauthClient"];
    /** @description Used for managing OAuth Client Callback URLs. */
    put: operations["UPDATE_CallbackUrl_for_User_OauthClient"];
    /** @description Used for managing OAuth Client Callback URLs. */
    delete: operations["DELETE_CallbackUrl_for_User_OauthClient"];
  };
  "/user/{userID}/oauth-client/{oauth-clientID}/callback-url": {
    /** @description Used for managing OAuth Client Callback URLs. */
    get: operations["List_all_CallbackUrl_for_User_OauthClient"];
    /** @description Used for managing OAuth Client Callback URLs. */
    post: operations["CREATE_CallbackUrl_for_User_OauthClient"];
  };
  "/user/{userID}/card/{itemId}": {
    /** @description Return the details of a specific card. */
    get: operations["READ_Card_for_User"];
    /** @description Update the card details. Allow to change pin code, status, limits, country permissions and the monetary account connected to the card. When the card has been received, it can be also activated through this endpoint. */
    put: operations["UPDATE_Card_for_User"];
  };
  "/user/{userID}/card": {
    /** @description Return all the cards available to the user. */
    get: operations["List_all_Card_for_User"];
  };
  "/user/{userID}/card-batch": {
    /** @description Used to update multiple cards in a batch. */
    post: operations["CREATE_CardBatch_for_User"];
  };
  "/user/{userID}/card-batch-replace": {
    /** @description Used to replace multiple cards in a batch. */
    post: operations["CREATE_CardBatchReplace_for_User"];
  };
  "/user/{userID}/card-credit": {
    /** @description Create a new credit card request. */
    post: operations["CREATE_CardCredit_for_User"];
  };
  "/user/{userID}/card-debit": {
    /** @description Create a new debit card request. */
    post: operations["CREATE_CardDebit_for_User"];
  };
  "/user/{userID}/card-name": {
    /** @description Return all the accepted card names for a specific user. */
    get: operations["List_all_CardName_for_User"];
  };
  "/user/{userID}/certificate-pinned": {
    /** @description List all the pinned certificate chain for the given user. */
    get: operations["List_all_CertificatePinned_for_User"];
    /** @description Pin the certificate chain. */
    post: operations["CREATE_CertificatePinned_for_User"];
  };
  "/user/{userID}/certificate-pinned/{itemId}": {
    /** @description Get the pinned certificate chain with the specified ID. */
    get: operations["READ_CertificatePinned_for_User"];
    /** @description Remove the pinned certificate chain with the specific ID. */
    delete: operations["DELETE_CertificatePinned_for_User"];
  };
  "/user/{userID}/challenge-request/{itemId}": {
    /** @description Endpoint for apps to fetch a challenge request. */
    get: operations["READ_ChallengeRequest_for_User"];
    /** @description Endpoint for apps to fetch a challenge request. */
    put: operations["UPDATE_ChallengeRequest_for_User"];
  };
  "/user/{userID}/company": {
    /** @description Create and manage companies. */
    get: operations["List_all_Company_for_User"];
    /** @description Create and manage companies. */
    post: operations["CREATE_Company_for_User"];
  };
  "/user/{userID}/company/{itemId}": {
    /** @description Create and manage companies. */
    get: operations["READ_Company_for_User"];
    /** @description Create and manage companies. */
    put: operations["UPDATE_Company_for_User"];
  };
  "/user/{userID}/confirmation-of-funds": {
    /** @description Used to confirm availability of funds on an account. */
    post: operations["CREATE_ConfirmationOfFunds_for_User"];
  };
  "/user/{userID}/chat-conversation/{chat-conversationID}/attachment/{attachmentID}/content": {
    /** @description Get the raw content of a specific attachment. */
    get: operations["List_all_Content_for_User_ChatConversation_Attachment"];
  };
  "/user/{userID}/monetary-account/{monetary-accountID}/attachment/{attachmentID}/content": {
    /** @description Get the raw content of a specific attachment. */
    get: operations["List_all_Content_for_User_MonetaryAccount_Attachment"];
  };
  "/attachment-public/{attachment-publicUUID}/content": {
    /** @description Get the raw content of a specific attachment. */
    get: operations["List_all_Content_for_AttachmentPublic"];
  };
  "/user/{userID}/attachment/{attachmentID}/content": {
    /** @description Get the raw content of a specific attachment. */
    get: operations["List_all_Content_for_User_Attachment"];
  };
  "/user/{userID}/export-annual-overview/{export-annual-overviewID}/content": {
    /** @description Used to retrieve the raw content of an annual overview. */
    get: operations["List_all_Content_for_User_ExportAnnualOverview"];
  };
  "/user/{userID}/monetary-account/{monetary-accountID}/export-rib/{export-ribID}/content": {
    /** @description Used to retrieve the raw content of an RIB. */
    get: operations["List_all_Content_for_User_MonetaryAccount_ExportRib"];
  };
  "/user/{userID}/card/{cardID}/export-statement-card/{export-statement-cardID}/content": {
    /** @description Fetch the raw content of a card statement export. The returned file format could be CSV or PDF depending on the statement format specified during the statement creation. The doc won't display the response of a request to get the content of a statement export. */
    get: operations["List_all_Content_for_User_Card_ExportStatementCard"];
  };
  "/user/{userID}/monetary-account/{monetary-accountID}/customer-statement/{customer-statementID}/content": {
    /** @description Fetch the raw content of a statement export. The returned file format could be MT940, CSV or PDF depending on the statement format specified during the statement creation. The doc won't display the response of a request to get the content of a statement export. */
    get: operations["List_all_Content_for_User_MonetaryAccount_CustomerStatement"];
  };
  "/user/{userID}/monetary-account/{monetary-accountID}/event/{eventID}/statement/{statementID}/content": {
    /** @description Fetch the raw content of a payment statement export. */
    get: operations["List_all_Content_for_User_MonetaryAccount_Event_Statement"];
  };
  "/user/{userID}/credential-password-ip/{itemId}": {
    /** @description Create a credential of a user for server authentication, or delete the credential of a user for server authentication. */
    get: operations["READ_CredentialPasswordIp_for_User"];
  };
  "/user/{userID}/credential-password-ip": {
    /** @description Create a credential of a user for server authentication, or delete the credential of a user for server authentication. */
    get: operations["List_all_CredentialPasswordIp_for_User"];
  };
  "/user/{userID}/currency-cloud-beneficiary": {
    /** @description Endpoint to manage CurrencyCloud beneficiaries. */
    get: operations["List_all_CurrencyCloudBeneficiary_for_User"];
    /** @description Endpoint to manage CurrencyCloud beneficiaries. */
    post: operations["CREATE_CurrencyCloudBeneficiary_for_User"];
  };
  "/user/{userID}/currency-cloud-beneficiary/{itemId}": {
    /** @description Endpoint to manage CurrencyCloud beneficiaries. */
    get: operations["READ_CurrencyCloudBeneficiary_for_User"];
  };
  "/user/{userID}/currency-cloud-beneficiary-requirement": {
    /** @description Endpoint to list requirements for CurrencyCloud beneficiaries. */
    get: operations["List_all_CurrencyCloudBeneficiaryRequirement_for_User"];
  };
  "/user/{userID}/monetary-account/{monetary-accountID}/currency-cloud-payment-quote": {
    /** @description Endpoint for managing currency conversions. */
    post: operations["CREATE_CurrencyCloudPaymentQuote_for_User_MonetaryAccount"];
  };
  "/user/{userID}/monetary-account/{monetary-accountID}/currency-conversion": {
    /** @description Endpoint for managing currency conversions. */
    get: operations["List_all_CurrencyConversion_for_User_MonetaryAccount"];
  };
  "/user/{userID}/monetary-account/{monetary-accountID}/currency-conversion/{itemId}": {
    /** @description Endpoint for managing currency conversions. */
    get: operations["READ_CurrencyConversion_for_User_MonetaryAccount"];
  };
  "/user/{userID}/monetary-account/{monetary-accountID}/currency-conversion-quote": {
    /** @description Endpoint to create a quote for currency conversions. */
    post: operations["CREATE_CurrencyConversionQuote_for_User_MonetaryAccount"];
  };
  "/user/{userID}/monetary-account/{monetary-accountID}/currency-conversion-quote/{itemId}": {
    /** @description Endpoint to create a quote for currency conversions. */
    get: operations["READ_CurrencyConversionQuote_for_User_MonetaryAccount"];
    /** @description Endpoint to create a quote for currency conversions. */
    put: operations["UPDATE_CurrencyConversionQuote_for_User_MonetaryAccount"];
  };
  "/user/{userID}/monetary-account/{monetary-accountID}/customer-statement": {
    /** @description Used to create new and read existing statement exports. Statement exports can be created in either CSV, MT940 or PDF file format. */
    get: operations["List_all_CustomerStatement_for_User_MonetaryAccount"];
    /** @description Used to create new and read existing statement exports. Statement exports can be created in either CSV, MT940 or PDF file format. */
    post: operations["CREATE_CustomerStatement_for_User_MonetaryAccount"];
  };
  "/user/{userID}/monetary-account/{monetary-accountID}/customer-statement/{itemId}": {
    /** @description Used to create new and read existing statement exports. Statement exports can be created in either CSV, MT940 or PDF file format. */
    get: operations["READ_CustomerStatement_for_User_MonetaryAccount"];
    /** @description Used to create new and read existing statement exports. Statement exports can be created in either CSV, MT940 or PDF file format. */
    delete: operations["DELETE_CustomerStatement_for_User_MonetaryAccount"];
  };
  "/user/{userID}/monetary-account/{monetary-accountID}/payment-auto-allocate/{payment-auto-allocateID}/definition": {
    /** @description List all the definitions in a payment auto allocate. */
    get: operations["List_all_Definition_for_User_MonetaryAccount_PaymentAutoAllocate"];
  };
  "/device/{itemId}": {
    /** @description Get a single Device. A Device is either a DevicePhone or a DeviceServer. */
    get: operations["READ_Device"];
  };
  "/device": {
    /** @description Get a collection of Devices. A Device is either a DevicePhone or a DeviceServer. */
    get: operations["List_all_Device"];
  };
  "/device-server": {
    /** @description Get a collection of all the DeviceServers you have created. */
    get: operations["List_all_DeviceServer"];
    /** @description Create a new DeviceServer providing the installation token in the header and signing the request with the private part of the key you used to create the installation. The API Key that you are using will be bound to the IP address of the DeviceServer which you have created.<br/><br/>Using a Wildcard API Key gives you the freedom to make API calls even if the IP address has changed after the POST device-server.<br/><br/>Find out more at this link <a href="https:/bunq.com/en/apikey-dynamic-ip" target="_blank">https:/bunq.com/en/apikey-dynamic-ip</a>. */
    post: operations["CREATE_DeviceServer"];
  };
  "/device-server/{itemId}": {
    /** @description Get one of your DeviceServers. */
    get: operations["READ_DeviceServer"];
  };
  "/user/{userID}/monetary-account/{monetary-accountID}/draft-payment": {
    /** @description Get a listing of all DraftPayments from a given MonetaryAccount. */
    get: operations["List_all_DraftPayment_for_User_MonetaryAccount"];
    /** @description Create a new DraftPayment. */
    post: operations["CREATE_DraftPayment_for_User_MonetaryAccount"];
  };
  "/user/{userID}/monetary-account/{monetary-accountID}/draft-payment/{itemId}": {
    /** @description Get a specific DraftPayment. */
    get: operations["READ_DraftPayment_for_User_MonetaryAccount"];
    /** @description Update a DraftPayment. */
    put: operations["UPDATE_DraftPayment_for_User_MonetaryAccount"];
  };
  "/user/{userID}/event/{itemId}": {
    /** @description Get a specific event for a given user. */
    get: operations["READ_Event_for_User"];
  };
  "/user/{userID}/event": {
    /** @description Get a collection of events for a given user. You can add query the parameters monetary_account_id, status and/or display_user_event to filter the response. When monetary_account_id={id,id} is provided only events that relate to these monetary account ids are returned. When status={AWAITING_REPLY/FINALIZED} is provided the response only contains events with the status AWAITING_REPLY or FINALIZED. When display_user_event={true/false} is set to false user events are excluded from the response, when not provided user events are displayed. User events are events that are not related to a monetary account (for example: connect invites). */
    get: operations["List_all_Event_for_User"];
  };
  "/user/{userID}/export-annual-overview": {
    /** @description List all the annual overviews for a user. */
    get: operations["List_all_ExportAnnualOverview_for_User"];
    /** @description Create a new annual overview for a specific year. An overview can be generated only for a past year. */
    post: operations["CREATE_ExportAnnualOverview_for_User"];
  };
  "/user/{userID}/export-annual-overview/{itemId}": {
    /** @description Get an annual overview for a user by its id. */
    get: operations["READ_ExportAnnualOverview_for_User"];
    /** @description Used to create new and read existing annual overviews of all the user's monetary accounts. Once created, annual overviews can be downloaded in PDF format via the 'export-annual-overview/{id}/content' endpoint. */
    delete: operations["DELETE_ExportAnnualOverview_for_User"];
  };
  "/user/{userID}/monetary-account/{monetary-accountID}/export-rib": {
    /** @description List all the RIBs for a monetary account. */
    get: operations["List_all_ExportRib_for_User_MonetaryAccount"];
    /** @description Create a new RIB. */
    post: operations["CREATE_ExportRib_for_User_MonetaryAccount"];
  };
  "/user/{userID}/monetary-account/{monetary-accountID}/export-rib/{itemId}": {
    /** @description Get a RIB for a monetary account by its id. */
    get: operations["READ_ExportRib_for_User_MonetaryAccount"];
    /** @description Used to create new and read existing RIBs of a monetary account */
    delete: operations["DELETE_ExportRib_for_User_MonetaryAccount"];
  };
  "/user/{userID}/card/{cardID}/export-statement-card/{itemId}": {
    /** @description Used to create new and read existing card statement exports. Statement exports can be created in either CSV or PDF file format. */
    get: operations["READ_ExportStatementCard_for_User_Card"];
  };
  "/user/{userID}/card/{cardID}/export-statement-card": {
    /** @description Used to create new and read existing card statement exports. Statement exports can be created in either CSV or PDF file format. */
    get: operations["List_all_ExportStatementCard_for_User_Card"];
  };
  "/user/{userID}/card/{cardID}/export-statement-card-csv": {
    /** @description Used to serialize ExportStatementCardCsv */
    get: operations["List_all_ExportStatementCardCsv_for_User_Card"];
    /** @description Used to serialize ExportStatementCardCsv */
    post: operations["CREATE_ExportStatementCardCsv_for_User_Card"];
  };
  "/user/{userID}/card/{cardID}/export-statement-card-csv/{itemId}": {
    /** @description Used to serialize ExportStatementCardCsv */
    get: operations["READ_ExportStatementCardCsv_for_User_Card"];
    /** @description Used to serialize ExportStatementCardCsv */
    delete: operations["DELETE_ExportStatementCardCsv_for_User_Card"];
  };
  "/user/{userID}/card/{cardID}/export-statement-card-pdf": {
    /** @description Used to serialize ExportStatementCardPdf */
    get: operations["List_all_ExportStatementCardPdf_for_User_Card"];
    /** @description Used to serialize ExportStatementCardPdf */
    post: operations["CREATE_ExportStatementCardPdf_for_User_Card"];
  };
  "/user/{userID}/card/{cardID}/export-statement-card-pdf/{itemId}": {
    /** @description Used to serialize ExportStatementCardPdf */
    get: operations["READ_ExportStatementCardPdf_for_User_Card"];
    /** @description Used to serialize ExportStatementCardPdf */
    delete: operations["DELETE_ExportStatementCardPdf_for_User_Card"];
  };
  "/user/{userID}/feature-announcement/{itemId}": {
    /** @description view for updating the feature display. */
    get: operations["READ_FeatureAnnouncement_for_User"];
  };
  "/user/{userID}/card/{cardID}/generated-cvc2": {
    /** @description Get all generated CVC2 codes for a card. */
    get: operations["List_all_GeneratedCvc2_for_User_Card"];
    /** @description Generate a new CVC2 code for a card. */
    post: operations["CREATE_GeneratedCvc2_for_User_Card"];
  };
  "/user/{userID}/card/{cardID}/generated-cvc2/{itemId}": {
    /** @description Get the details for a specific generated CVC2 code. */
    get: operations["READ_GeneratedCvc2_for_User_Card"];
    /** @description Endpoint for generating and retrieving a new CVC2 code. */
    put: operations["UPDATE_GeneratedCvc2_for_User_Card"];
  };
  "/user/{userID}/monetary-account/{monetary-accountID}/ideal-merchant-transaction": {
    /** @description View for requesting iDEAL transactions and polling their status. */
    get: operations["List_all_IdealMerchantTransaction_for_User_MonetaryAccount"];
    /** @description View for requesting iDEAL transactions and polling their status. */
    post: operations["CREATE_IdealMerchantTransaction_for_User_MonetaryAccount"];
  };
  "/user/{userID}/monetary-account/{monetary-accountID}/ideal-merchant-transaction/{itemId}": {
    /** @description View for requesting iDEAL transactions and polling their status. */
    get: operations["READ_IdealMerchantTransaction_for_User_MonetaryAccount"];
  };
  "/user/{userID}/insight-preference-date": {
    /** @description Used to allow users to set insight/budget preferences. */
    get: operations["List_all_InsightPreferenceDate_for_User"];
  };
  "/user/{userID}/insights": {
    /** @description Used to get insights about transactions between given time range. */
    get: operations["List_all_Insights_for_User"];
  };
  "/user/{userID}/insights-search": {
    /** @description Used to get events based on time and insight category. */
    get: operations["List_all_InsightsSearch_for_User"];
  };
  "/installation": {
    /** @description You must have an active session to make this call. This call returns the Id of the the Installation you are using in your session. */
    get: operations["List_all_Installation"];
    /**
     * @description This is the only API call that does not require you to use the "X-Bunq-Client-Authentication" and "X-Bunq-Client-Signature" headers.
     *  You provide the server with the public part of the key pair that you are going to use to create the value of the signature header for all future API calls. The server creates an installation for you. Store the Installation Token and ServerPublicKey from the response. This token is used in the "X-Bunq-Client-Authentication" header for the creation of a DeviceServer and SessionServer.
     */
    post: operations["CREATE_Installation"];
  };
  "/installation/{itemId}": {
    /** @description You must have an active session to make this call. This call is used to check whether the Id you provide is the Id of your current installation or not. */
    get: operations["READ_Installation"];
  };
  "/user/{userID}/monetary-account/{monetary-accountID}/payment-auto-allocate/{payment-auto-allocateID}/instance": {
    /** @description List all the times a users payment was automatically allocated. */
    get: operations["List_all_Instance_for_User_MonetaryAccount_PaymentAutoAllocate"];
  };
  "/user/{userID}/monetary-account/{monetary-accountID}/payment-auto-allocate/{payment-auto-allocateID}/instance/{itemId}": {
    /** @description List all the times a users payment was automatically allocated. */
    get: operations["READ_Instance_for_User_MonetaryAccount_PaymentAutoAllocate"];
  };
  "/user/{userID}/monetary-account/{monetary-accountID}/invoice": {
    /** @description Used to view a bunq invoice. */
    get: operations["List_all_Invoice_for_User_MonetaryAccount"];
  };
  "/user/{userID}/monetary-account/{monetary-accountID}/invoice/{itemId}": {
    /** @description Used to view a bunq invoice. */
    get: operations["READ_Invoice_for_User_MonetaryAccount"];
  };
  "/user/{userID}/invoice": {
    /** @description Used to list bunq invoices by user. */
    get: operations["List_all_Invoice_for_User"];
  };
  "/user/{userID}/invoice/{itemId}": {
    /** @description Used to list bunq invoices by user. */
    get: operations["READ_Invoice_for_User"];
  };
  "/user/{userID}/credential-password-ip/{credential-password-ipID}/ip/{itemId}": {
    /** @description Manage the IPs which may be used for a credential of a user for server authentication. */
    get: operations["READ_Ip_for_User_CredentialPasswordIp"];
    /** @description Manage the IPs which may be used for a credential of a user for server authentication. */
    put: operations["UPDATE_Ip_for_User_CredentialPasswordIp"];
  };
  "/user/{userID}/credential-password-ip/{credential-password-ipID}/ip": {
    /** @description Manage the IPs which may be used for a credential of a user for server authentication. */
    get: operations["List_all_Ip_for_User_CredentialPasswordIp"];
    /** @description Manage the IPs which may be used for a credential of a user for server authentication. */
    post: operations["CREATE_Ip_for_User_CredentialPasswordIp"];
  };
  "/user/{userID}/legal-name": {
    /** @description Endpoint for getting available legal names that can be used by the user. */
    get: operations["List_all_LegalName_for_User"];
  };
  "/user/{userID}/limit": {
    /** @description Get all limits for the authenticated user. */
    get: operations["List_all_Limit_for_User"];
  };
  "/user/{userID}/monetary-account/{monetary-accountID}/mastercard-action/{itemId}": {
    /** @description MasterCard transaction view. */
    get: operations["READ_MastercardAction_for_User_MonetaryAccount"];
  };
  "/user/{userID}/monetary-account/{monetary-accountID}/mastercard-action": {
    /** @description MasterCard transaction view. */
    get: operations["List_all_MastercardAction_for_User_MonetaryAccount"];
  };
  "/user/{userID}/monetary-account/{itemId}": {
    /** @description Get a specific MonetaryAccount. */
    get: operations["READ_MonetaryAccount_for_User"];
  };
  "/user/{userID}/monetary-account": {
    /** @description Get a collection of all your MonetaryAccounts. */
    get: operations["List_all_MonetaryAccount_for_User"];
  };
  "/user/{userID}/monetary-account-bank": {
    /** @description Gets a listing of all MonetaryAccountBanks of a given user. */
    get: operations["List_all_MonetaryAccountBank_for_User"];
    /** @description Create new MonetaryAccountBank. */
    post: operations["CREATE_MonetaryAccountBank_for_User"];
  };
  "/user/{userID}/monetary-account-bank/{itemId}": {
    /** @description Get a specific MonetaryAccountBank. */
    get: operations["READ_MonetaryAccountBank_for_User"];
    /** @description Update a specific existing MonetaryAccountBank. */
    put: operations["UPDATE_MonetaryAccountBank_for_User"];
  };
  "/user/{userID}/monetary-account-card/{itemId}": {
    /** @description Get a specific MonetaryAccountCard. */
    get: operations["READ_MonetaryAccountCard_for_User"];
    /** @description Update a specific existing MonetaryAccountCard. */
    put: operations["UPDATE_MonetaryAccountCard_for_User"];
  };
  "/user/{userID}/monetary-account-card": {
    /** @description Gets a listing of all MonetaryAccountCard of a given user. */
    get: operations["List_all_MonetaryAccountCard_for_User"];
  };
  "/user/{userID}/monetary-account-external": {
    /** @description Endpoint for managing monetary accounts which are connected to external services. */
    get: operations["List_all_MonetaryAccountExternal_for_User"];
    /** @description Endpoint for managing monetary accounts which are connected to external services. */
    post: operations["CREATE_MonetaryAccountExternal_for_User"];
  };
  "/user/{userID}/monetary-account-external/{itemId}": {
    /** @description Endpoint for managing monetary accounts which are connected to external services. */
    get: operations["READ_MonetaryAccountExternal_for_User"];
    /** @description Endpoint for managing monetary accounts which are connected to external services. */
    put: operations["UPDATE_MonetaryAccountExternal_for_User"];
  };
  "/user/{userID}/monetary-account-external-savings": {
    /** @description Endpoint for managing monetary account savings which are connected to external services. */
    get: operations["List_all_MonetaryAccountExternalSavings_for_User"];
    /** @description Endpoint for managing monetary account savings which are connected to external services. */
    post: operations["CREATE_MonetaryAccountExternalSavings_for_User"];
  };
  "/user/{userID}/monetary-account-external-savings/{itemId}": {
    /** @description Endpoint for managing monetary account savings which are connected to external services. */
    get: operations["READ_MonetaryAccountExternalSavings_for_User"];
    /** @description Endpoint for managing monetary account savings which are connected to external services. */
    put: operations["UPDATE_MonetaryAccountExternalSavings_for_User"];
  };
  "/user/{userID}/monetary-account-joint": {
    /** @description The endpoint for joint monetary accounts. */
    get: operations["List_all_MonetaryAccountJoint_for_User"];
    /** @description The endpoint for joint monetary accounts. */
    post: operations["CREATE_MonetaryAccountJoint_for_User"];
  };
  "/user/{userID}/monetary-account-joint/{itemId}": {
    /** @description The endpoint for joint monetary accounts. */
    get: operations["READ_MonetaryAccountJoint_for_User"];
    /** @description The endpoint for joint monetary accounts. */
    put: operations["UPDATE_MonetaryAccountJoint_for_User"];
  };
  "/user/{userID}/monetary-account-savings": {
    /** @description Gets a listing of all MonetaryAccountSavingss of a given user. */
    get: operations["List_all_MonetaryAccountSavings_for_User"];
    /** @description Create new MonetaryAccountSavings. */
    post: operations["CREATE_MonetaryAccountSavings_for_User"];
  };
  "/user/{userID}/monetary-account-savings/{itemId}": {
    /** @description Get a specific MonetaryAccountSavings. */
    get: operations["READ_MonetaryAccountSavings_for_User"];
    /** @description Update a specific existing MonetaryAccountSavings. */
    put: operations["UPDATE_MonetaryAccountSavings_for_User"];
  };
  "/user-company/{user-companyID}/name": {
    /** @description Return all the known (trade) names for a specific user company. */
    get: operations["List_all_Name_for_UserCompany"];
  };
  "/user/{userID}/monetary-account/{monetary-accountID}/adyen-card-transaction/{adyen-card-transactionID}/note-attachment": {
    /** @description Used to manage attachment notes. */
    get: operations["List_all_NoteAttachment_for_User_MonetaryAccount_AdyenCardTransaction"];
    /** @description Used to manage attachment notes. */
    post: operations["CREATE_NoteAttachment_for_User_MonetaryAccount_AdyenCardTransaction"];
  };
  "/user/{userID}/monetary-account/{monetary-accountID}/adyen-card-transaction/{adyen-card-transactionID}/note-attachment/{itemId}": {
    /** @description Used to manage attachment notes. */
    get: operations["READ_NoteAttachment_for_User_MonetaryAccount_AdyenCardTransaction"];
    /** @description Used to manage attachment notes. */
    put: operations["UPDATE_NoteAttachment_for_User_MonetaryAccount_AdyenCardTransaction"];
    /** @description Used to manage attachment notes. */
    delete: operations["DELETE_NoteAttachment_for_User_MonetaryAccount_AdyenCardTransaction"];
  };
  "/user/{userID}/monetary-account/{monetary-accountID}/switch-service-payment/{switch-service-paymentID}/note-attachment": {
    /** @description Manage the notes for a given user. */
    get: operations["List_all_NoteAttachment_for_User_MonetaryAccount_SwitchServicePayment"];
    /** @description Used to manage attachment notes. */
    post: operations["CREATE_NoteAttachment_for_User_MonetaryAccount_SwitchServicePayment"];
  };
  "/user/{userID}/monetary-account/{monetary-accountID}/switch-service-payment/{switch-service-paymentID}/note-attachment/{itemId}": {
    /** @description Used to manage attachment notes. */
    get: operations["READ_NoteAttachment_for_User_MonetaryAccount_SwitchServicePayment"];
    /** @description Used to manage attachment notes. */
    put: operations["UPDATE_NoteAttachment_for_User_MonetaryAccount_SwitchServicePayment"];
    /** @description Used to manage attachment notes. */
    delete: operations["DELETE_NoteAttachment_for_User_MonetaryAccount_SwitchServicePayment"];
  };
  "/user/{userID}/monetary-account/{monetary-accountID}/bunqme-fundraiser-result/{bunqme-fundraiser-resultID}/note-attachment": {
    /** @description Manage the notes for a given user. */
    get: operations["List_all_NoteAttachment_for_User_MonetaryAccount_BunqmeFundraiserResult"];
    /** @description Used to manage attachment notes. */
    post: operations["CREATE_NoteAttachment_for_User_MonetaryAccount_BunqmeFundraiserResult"];
  };
  "/user/{userID}/monetary-account/{monetary-accountID}/bunqme-fundraiser-result/{bunqme-fundraiser-resultID}/note-attachment/{itemId}": {
    /** @description Used to manage attachment notes. */
    get: operations["READ_NoteAttachment_for_User_MonetaryAccount_BunqmeFundraiserResult"];
    /** @description Used to manage attachment notes. */
    put: operations["UPDATE_NoteAttachment_for_User_MonetaryAccount_BunqmeFundraiserResult"];
    /** @description Used to manage attachment notes. */
    delete: operations["DELETE_NoteAttachment_for_User_MonetaryAccount_BunqmeFundraiserResult"];
  };
  "/user/{userID}/monetary-account/{monetary-accountID}/draft-payment/{draft-paymentID}/note-attachment": {
    /** @description Manage the notes for a given user. */
    get: operations["List_all_NoteAttachment_for_User_MonetaryAccount_DraftPayment"];
    /** @description Used to manage attachment notes. */
    post: operations["CREATE_NoteAttachment_for_User_MonetaryAccount_DraftPayment"];
  };
  "/user/{userID}/monetary-account/{monetary-accountID}/draft-payment/{draft-paymentID}/note-attachment/{itemId}": {
    /** @description Used to manage attachment notes. */
    get: operations["READ_NoteAttachment_for_User_MonetaryAccount_DraftPayment"];
    /** @description Used to manage attachment notes. */
    put: operations["UPDATE_NoteAttachment_for_User_MonetaryAccount_DraftPayment"];
    /** @description Used to manage attachment notes. */
    delete: operations["DELETE_NoteAttachment_for_User_MonetaryAccount_DraftPayment"];
  };
  "/user/{userID}/monetary-account/{monetary-accountID}/ideal-merchant-transaction/{ideal-merchant-transactionID}/note-attachment": {
    /** @description Manage the notes for a given user. */
    get: operations["List_all_NoteAttachment_for_User_MonetaryAccount_IdealMerchantTransaction"];
    /** @description Used to manage attachment notes. */
    post: operations["CREATE_NoteAttachment_for_User_MonetaryAccount_IdealMerchantTransaction"];
  };
  "/user/{userID}/monetary-account/{monetary-accountID}/ideal-merchant-transaction/{ideal-merchant-transactionID}/note-attachment/{itemId}": {
    /** @description Used to manage attachment notes. */
    get: operations["READ_NoteAttachment_for_User_MonetaryAccount_IdealMerchantTransaction"];
    /** @description Used to manage attachment notes. */
    put: operations["UPDATE_NoteAttachment_for_User_MonetaryAccount_IdealMerchantTransaction"];
    /** @description Used to manage attachment notes. */
    delete: operations["DELETE_NoteAttachment_for_User_MonetaryAccount_IdealMerchantTransaction"];
  };
  "/user/{userID}/monetary-account/{monetary-accountID}/mastercard-action/{mastercard-actionID}/note-attachment": {
    /** @description Manage the notes for a given user. */
    get: operations["List_all_NoteAttachment_for_User_MonetaryAccount_MastercardAction"];
    /** @description Used to manage attachment notes. */
    post: operations["CREATE_NoteAttachment_for_User_MonetaryAccount_MastercardAction"];
  };
  "/user/{userID}/monetary-account/{monetary-accountID}/mastercard-action/{mastercard-actionID}/note-attachment/{itemId}": {
    /** @description Used to manage attachment notes. */
    get: operations["READ_NoteAttachment_for_User_MonetaryAccount_MastercardAction"];
    /** @description Used to manage attachment notes. */
    put: operations["UPDATE_NoteAttachment_for_User_MonetaryAccount_MastercardAction"];
    /** @description Used to manage attachment notes. */
    delete: operations["DELETE_NoteAttachment_for_User_MonetaryAccount_MastercardAction"];
  };
  "/user/{userID}/monetary-account/{monetary-accountID}/payment-batch/{payment-batchID}/note-attachment": {
    /** @description Manage the notes for a given user. */
    get: operations["List_all_NoteAttachment_for_User_MonetaryAccount_PaymentBatch"];
    /** @description Used to manage attachment notes. */
    post: operations["CREATE_NoteAttachment_for_User_MonetaryAccount_PaymentBatch"];
  };
  "/user/{userID}/monetary-account/{monetary-accountID}/payment-batch/{payment-batchID}/note-attachment/{itemId}": {
    /** @description Used to manage attachment notes. */
    get: operations["READ_NoteAttachment_for_User_MonetaryAccount_PaymentBatch"];
    /** @description Used to manage attachment notes. */
    put: operations["UPDATE_NoteAttachment_for_User_MonetaryAccount_PaymentBatch"];
    /** @description Used to manage attachment notes. */
    delete: operations["DELETE_NoteAttachment_for_User_MonetaryAccount_PaymentBatch"];
  };
  "/user/{userID}/monetary-account/{monetary-accountID}/payment/{paymentID}/note-attachment": {
    /** @description Manage the notes for a given user. */
    get: operations["List_all_NoteAttachment_for_User_MonetaryAccount_Payment"];
    /** @description Used to manage attachment notes. */
    post: operations["CREATE_NoteAttachment_for_User_MonetaryAccount_Payment"];
  };
  "/user/{userID}/monetary-account/{monetary-accountID}/payment/{paymentID}/note-attachment/{itemId}": {
    /** @description Used to manage attachment notes. */
    get: operations["READ_NoteAttachment_for_User_MonetaryAccount_Payment"];
    /** @description Used to manage attachment notes. */
    put: operations["UPDATE_NoteAttachment_for_User_MonetaryAccount_Payment"];
    /** @description Used to manage attachment notes. */
    delete: operations["DELETE_NoteAttachment_for_User_MonetaryAccount_Payment"];
  };
  "/user/{userID}/monetary-account/{monetary-accountID}/request-inquiry-batch/{request-inquiry-batchID}/note-attachment": {
    /** @description Manage the notes for a given user. */
    get: operations["List_all_NoteAttachment_for_User_MonetaryAccount_RequestInquiryBatch"];
    /** @description Used to manage attachment notes. */
    post: operations["CREATE_NoteAttachment_for_User_MonetaryAccount_RequestInquiryBatch"];
  };
  "/user/{userID}/monetary-account/{monetary-accountID}/request-inquiry-batch/{request-inquiry-batchID}/note-attachment/{itemId}": {
    /** @description Used to manage attachment notes. */
    get: operations["READ_NoteAttachment_for_User_MonetaryAccount_RequestInquiryBatch"];
    /** @description Used to manage attachment notes. */
    put: operations["UPDATE_NoteAttachment_for_User_MonetaryAccount_RequestInquiryBatch"];
    /** @description Used to manage attachment notes. */
    delete: operations["DELETE_NoteAttachment_for_User_MonetaryAccount_RequestInquiryBatch"];
  };
  "/user/{userID}/monetary-account/{monetary-accountID}/request-inquiry/{request-inquiryID}/note-attachment": {
    /** @description Manage the notes for a given user. */
    get: operations["List_all_NoteAttachment_for_User_MonetaryAccount_RequestInquiry"];
    /** @description Used to manage attachment notes. */
    post: operations["CREATE_NoteAttachment_for_User_MonetaryAccount_RequestInquiry"];
  };
  "/user/{userID}/monetary-account/{monetary-accountID}/request-inquiry/{request-inquiryID}/note-attachment/{itemId}": {
    /** @description Used to manage attachment notes. */
    get: operations["READ_NoteAttachment_for_User_MonetaryAccount_RequestInquiry"];
    /** @description Used to manage attachment notes. */
    put: operations["UPDATE_NoteAttachment_for_User_MonetaryAccount_RequestInquiry"];
    /** @description Used to manage attachment notes. */
    delete: operations["DELETE_NoteAttachment_for_User_MonetaryAccount_RequestInquiry"];
  };
  "/user/{userID}/monetary-account/{monetary-accountID}/request-response/{request-responseID}/note-attachment": {
    /** @description Manage the notes for a given user. */
    get: operations["List_all_NoteAttachment_for_User_MonetaryAccount_RequestResponse"];
    /** @description Used to manage attachment notes. */
    post: operations["CREATE_NoteAttachment_for_User_MonetaryAccount_RequestResponse"];
  };
  "/user/{userID}/monetary-account/{monetary-accountID}/request-response/{request-responseID}/note-attachment/{itemId}": {
    /** @description Used to manage attachment notes. */
    get: operations["READ_NoteAttachment_for_User_MonetaryAccount_RequestResponse"];
    /** @description Used to manage attachment notes. */
    put: operations["UPDATE_NoteAttachment_for_User_MonetaryAccount_RequestResponse"];
    /** @description Used to manage attachment notes. */
    delete: operations["DELETE_NoteAttachment_for_User_MonetaryAccount_RequestResponse"];
  };
  "/user/{userID}/monetary-account/{monetary-accountID}/schedule/{scheduleID}/schedule-instance/{schedule-instanceID}/note-attachment": {
    /** @description Manage the notes for a given user. */
    get: operations["List_all_NoteAttachment_for_User_MonetaryAccount_Schedule_ScheduleInstance"];
    /** @description Used to manage attachment notes. */
    post: operations["CREATE_NoteAttachment_for_User_MonetaryAccount_Schedule_ScheduleInstance"];
  };
  "/user/{userID}/monetary-account/{monetary-accountID}/schedule/{scheduleID}/schedule-instance/{schedule-instanceID}/note-attachment/{itemId}": {
    /** @description Used to manage attachment notes. */
    get: operations["READ_NoteAttachment_for_User_MonetaryAccount_Schedule_ScheduleInstance"];
    /** @description Used to manage attachment notes. */
    put: operations["UPDATE_NoteAttachment_for_User_MonetaryAccount_Schedule_ScheduleInstance"];
    /** @description Used to manage attachment notes. */
    delete: operations["DELETE_NoteAttachment_for_User_MonetaryAccount_Schedule_ScheduleInstance"];
  };
  "/user/{userID}/monetary-account/{monetary-accountID}/schedule-payment-batch/{schedule-payment-batchID}/note-attachment": {
    /** @description Manage the notes for a given user. */
    get: operations["List_all_NoteAttachment_for_User_MonetaryAccount_SchedulePaymentBatch"];
    /** @description Used to manage attachment notes. */
    post: operations["CREATE_NoteAttachment_for_User_MonetaryAccount_SchedulePaymentBatch"];
  };
  "/user/{userID}/monetary-account/{monetary-accountID}/schedule-payment-batch/{schedule-payment-batchID}/note-attachment/{itemId}": {
    /** @description Used to manage attachment notes. */
    get: operations["READ_NoteAttachment_for_User_MonetaryAccount_SchedulePaymentBatch"];
    /** @description Used to manage attachment notes. */
    put: operations["UPDATE_NoteAttachment_for_User_MonetaryAccount_SchedulePaymentBatch"];
    /** @description Used to manage attachment notes. */
    delete: operations["DELETE_NoteAttachment_for_User_MonetaryAccount_SchedulePaymentBatch"];
  };
  "/user/{userID}/monetary-account/{monetary-accountID}/schedule-payment/{schedule-paymentID}/note-attachment": {
    /** @description Manage the notes for a given user. */
    get: operations["List_all_NoteAttachment_for_User_MonetaryAccount_SchedulePayment"];
    /** @description Used to manage attachment notes. */
    post: operations["CREATE_NoteAttachment_for_User_MonetaryAccount_SchedulePayment"];
  };
  "/user/{userID}/monetary-account/{monetary-accountID}/schedule-payment/{schedule-paymentID}/note-attachment/{itemId}": {
    /** @description Used to manage attachment notes. */
    get: operations["READ_NoteAttachment_for_User_MonetaryAccount_SchedulePayment"];
    /** @description Used to manage attachment notes. */
    put: operations["UPDATE_NoteAttachment_for_User_MonetaryAccount_SchedulePayment"];
    /** @description Used to manage attachment notes. */
    delete: operations["DELETE_NoteAttachment_for_User_MonetaryAccount_SchedulePayment"];
  };
  "/user/{userID}/monetary-account/{monetary-accountID}/sofort-merchant-transaction/{sofort-merchant-transactionID}/note-attachment": {
    /** @description Manage the notes for a given user. */
    get: operations["List_all_NoteAttachment_for_User_MonetaryAccount_SofortMerchantTransaction"];
    /** @description Used to manage attachment notes. */
    post: operations["CREATE_NoteAttachment_for_User_MonetaryAccount_SofortMerchantTransaction"];
  };
  "/user/{userID}/monetary-account/{monetary-accountID}/sofort-merchant-transaction/{sofort-merchant-transactionID}/note-attachment/{itemId}": {
    /** @description Used to manage attachment notes. */
    get: operations["READ_NoteAttachment_for_User_MonetaryAccount_SofortMerchantTransaction"];
    /** @description Used to manage attachment notes. */
    put: operations["UPDATE_NoteAttachment_for_User_MonetaryAccount_SofortMerchantTransaction"];
    /** @description Used to manage attachment notes. */
    delete: operations["DELETE_NoteAttachment_for_User_MonetaryAccount_SofortMerchantTransaction"];
  };
  "/user/{userID}/monetary-account/{monetary-accountID}/whitelist/{whitelistID}/whitelist-result/{whitelist-resultID}/note-attachment": {
    /** @description Manage the notes for a given user. */
    get: operations["List_all_NoteAttachment_for_User_MonetaryAccount_Whitelist_WhitelistResult"];
    /** @description Used to manage attachment notes. */
    post: operations["CREATE_NoteAttachment_for_User_MonetaryAccount_Whitelist_WhitelistResult"];
  };
  "/user/{userID}/monetary-account/{monetary-accountID}/whitelist/{whitelistID}/whitelist-result/{whitelist-resultID}/note-attachment/{itemId}": {
    /** @description Used to manage attachment notes. */
    get: operations["READ_NoteAttachment_for_User_MonetaryAccount_Whitelist_WhitelistResult"];
    /** @description Used to manage attachment notes. */
    put: operations["UPDATE_NoteAttachment_for_User_MonetaryAccount_Whitelist_WhitelistResult"];
    /** @description Used to manage attachment notes. */
    delete: operations["DELETE_NoteAttachment_for_User_MonetaryAccount_Whitelist_WhitelistResult"];
  };
  "/user/{userID}/monetary-account/{monetary-accountID}/adyen-card-transaction/{adyen-card-transactionID}/note-text": {
    /** @description Used to manage text notes. */
    get: operations["List_all_NoteText_for_User_MonetaryAccount_AdyenCardTransaction"];
    /** @description Used to manage text notes. */
    post: operations["CREATE_NoteText_for_User_MonetaryAccount_AdyenCardTransaction"];
  };
  "/user/{userID}/monetary-account/{monetary-accountID}/adyen-card-transaction/{adyen-card-transactionID}/note-text/{itemId}": {
    /** @description Used to manage text notes. */
    get: operations["READ_NoteText_for_User_MonetaryAccount_AdyenCardTransaction"];
    /** @description Used to manage text notes. */
    put: operations["UPDATE_NoteText_for_User_MonetaryAccount_AdyenCardTransaction"];
    /** @description Used to manage text notes. */
    delete: operations["DELETE_NoteText_for_User_MonetaryAccount_AdyenCardTransaction"];
  };
  "/user/{userID}/monetary-account/{monetary-accountID}/switch-service-payment/{switch-service-paymentID}/note-text": {
    /** @description Manage the notes for a given user. */
    get: operations["List_all_NoteText_for_User_MonetaryAccount_SwitchServicePayment"];
    /** @description Used to manage text notes. */
    post: operations["CREATE_NoteText_for_User_MonetaryAccount_SwitchServicePayment"];
  };
  "/user/{userID}/monetary-account/{monetary-accountID}/switch-service-payment/{switch-service-paymentID}/note-text/{itemId}": {
    /** @description Used to manage text notes. */
    get: operations["READ_NoteText_for_User_MonetaryAccount_SwitchServicePayment"];
    /** @description Used to manage text notes. */
    put: operations["UPDATE_NoteText_for_User_MonetaryAccount_SwitchServicePayment"];
    /** @description Used to manage text notes. */
    delete: operations["DELETE_NoteText_for_User_MonetaryAccount_SwitchServicePayment"];
  };
  "/user/{userID}/monetary-account/{monetary-accountID}/bunqme-fundraiser-result/{bunqme-fundraiser-resultID}/note-text": {
    /** @description Manage the notes for a given user. */
    get: operations["List_all_NoteText_for_User_MonetaryAccount_BunqmeFundraiserResult"];
    /** @description Used to manage text notes. */
    post: operations["CREATE_NoteText_for_User_MonetaryAccount_BunqmeFundraiserResult"];
  };
  "/user/{userID}/monetary-account/{monetary-accountID}/bunqme-fundraiser-result/{bunqme-fundraiser-resultID}/note-text/{itemId}": {
    /** @description Used to manage text notes. */
    get: operations["READ_NoteText_for_User_MonetaryAccount_BunqmeFundraiserResult"];
    /** @description Used to manage text notes. */
    put: operations["UPDATE_NoteText_for_User_MonetaryAccount_BunqmeFundraiserResult"];
    /** @description Used to manage text notes. */
    delete: operations["DELETE_NoteText_for_User_MonetaryAccount_BunqmeFundraiserResult"];
  };
  "/user/{userID}/monetary-account/{monetary-accountID}/draft-payment/{draft-paymentID}/note-text": {
    /** @description Manage the notes for a given user. */
    get: operations["List_all_NoteText_for_User_MonetaryAccount_DraftPayment"];
    /** @description Used to manage text notes. */
    post: operations["CREATE_NoteText_for_User_MonetaryAccount_DraftPayment"];
  };
  "/user/{userID}/monetary-account/{monetary-accountID}/draft-payment/{draft-paymentID}/note-text/{itemId}": {
    /** @description Used to manage text notes. */
    get: operations["READ_NoteText_for_User_MonetaryAccount_DraftPayment"];
    /** @description Used to manage text notes. */
    put: operations["UPDATE_NoteText_for_User_MonetaryAccount_DraftPayment"];
    /** @description Used to manage text notes. */
    delete: operations["DELETE_NoteText_for_User_MonetaryAccount_DraftPayment"];
  };
  "/user/{userID}/monetary-account/{monetary-accountID}/ideal-merchant-transaction/{ideal-merchant-transactionID}/note-text": {
    /** @description Manage the notes for a given user. */
    get: operations["List_all_NoteText_for_User_MonetaryAccount_IdealMerchantTransaction"];
    /** @description Used to manage text notes. */
    post: operations["CREATE_NoteText_for_User_MonetaryAccount_IdealMerchantTransaction"];
  };
  "/user/{userID}/monetary-account/{monetary-accountID}/ideal-merchant-transaction/{ideal-merchant-transactionID}/note-text/{itemId}": {
    /** @description Used to manage text notes. */
    get: operations["READ_NoteText_for_User_MonetaryAccount_IdealMerchantTransaction"];
    /** @description Used to manage text notes. */
    put: operations["UPDATE_NoteText_for_User_MonetaryAccount_IdealMerchantTransaction"];
    /** @description Used to manage text notes. */
    delete: operations["DELETE_NoteText_for_User_MonetaryAccount_IdealMerchantTransaction"];
  };
  "/user/{userID}/monetary-account/{monetary-accountID}/mastercard-action/{mastercard-actionID}/note-text": {
    /** @description Manage the notes for a given user. */
    get: operations["List_all_NoteText_for_User_MonetaryAccount_MastercardAction"];
    /** @description Used to manage text notes. */
    post: operations["CREATE_NoteText_for_User_MonetaryAccount_MastercardAction"];
  };
  "/user/{userID}/monetary-account/{monetary-accountID}/mastercard-action/{mastercard-actionID}/note-text/{itemId}": {
    /** @description Used to manage text notes. */
    get: operations["READ_NoteText_for_User_MonetaryAccount_MastercardAction"];
    /** @description Used to manage text notes. */
    put: operations["UPDATE_NoteText_for_User_MonetaryAccount_MastercardAction"];
    /** @description Used to manage text notes. */
    delete: operations["DELETE_NoteText_for_User_MonetaryAccount_MastercardAction"];
  };
  "/user/{userID}/monetary-account/{monetary-accountID}/payment-batch/{payment-batchID}/note-text": {
    /** @description Manage the notes for a given user. */
    get: operations["List_all_NoteText_for_User_MonetaryAccount_PaymentBatch"];
    /** @description Used to manage text notes. */
    post: operations["CREATE_NoteText_for_User_MonetaryAccount_PaymentBatch"];
  };
  "/user/{userID}/monetary-account/{monetary-accountID}/payment-batch/{payment-batchID}/note-text/{itemId}": {
    /** @description Used to manage text notes. */
    get: operations["READ_NoteText_for_User_MonetaryAccount_PaymentBatch"];
    /** @description Used to manage text notes. */
    put: operations["UPDATE_NoteText_for_User_MonetaryAccount_PaymentBatch"];
    /** @description Used to manage text notes. */
    delete: operations["DELETE_NoteText_for_User_MonetaryAccount_PaymentBatch"];
  };
  "/user/{userID}/monetary-account/{monetary-accountID}/payment/{paymentID}/note-text": {
    /** @description Manage the notes for a given user. */
    get: operations["List_all_NoteText_for_User_MonetaryAccount_Payment"];
    /** @description Used to manage text notes. */
    post: operations["CREATE_NoteText_for_User_MonetaryAccount_Payment"];
  };
  "/user/{userID}/monetary-account/{monetary-accountID}/payment/{paymentID}/note-text/{itemId}": {
    /** @description Used to manage text notes. */
    get: operations["READ_NoteText_for_User_MonetaryAccount_Payment"];
    /** @description Used to manage text notes. */
    put: operations["UPDATE_NoteText_for_User_MonetaryAccount_Payment"];
    /** @description Used to manage text notes. */
    delete: operations["DELETE_NoteText_for_User_MonetaryAccount_Payment"];
  };
  "/user/{userID}/monetary-account/{monetary-accountID}/request-inquiry-batch/{request-inquiry-batchID}/note-text": {
    /** @description Manage the notes for a given user. */
    get: operations["List_all_NoteText_for_User_MonetaryAccount_RequestInquiryBatch"];
    /** @description Used to manage text notes. */
    post: operations["CREATE_NoteText_for_User_MonetaryAccount_RequestInquiryBatch"];
  };
  "/user/{userID}/monetary-account/{monetary-accountID}/request-inquiry-batch/{request-inquiry-batchID}/note-text/{itemId}": {
    /** @description Used to manage text notes. */
    get: operations["READ_NoteText_for_User_MonetaryAccount_RequestInquiryBatch"];
    /** @description Used to manage text notes. */
    put: operations["UPDATE_NoteText_for_User_MonetaryAccount_RequestInquiryBatch"];
    /** @description Used to manage text notes. */
    delete: operations["DELETE_NoteText_for_User_MonetaryAccount_RequestInquiryBatch"];
  };
  "/user/{userID}/monetary-account/{monetary-accountID}/request-inquiry/{request-inquiryID}/note-text": {
    /** @description Manage the notes for a given user. */
    get: operations["List_all_NoteText_for_User_MonetaryAccount_RequestInquiry"];
    /** @description Used to manage text notes. */
    post: operations["CREATE_NoteText_for_User_MonetaryAccount_RequestInquiry"];
  };
  "/user/{userID}/monetary-account/{monetary-accountID}/request-inquiry/{request-inquiryID}/note-text/{itemId}": {
    /** @description Used to manage text notes. */
    get: operations["READ_NoteText_for_User_MonetaryAccount_RequestInquiry"];
    /** @description Used to manage text notes. */
    put: operations["UPDATE_NoteText_for_User_MonetaryAccount_RequestInquiry"];
    /** @description Used to manage text notes. */
    delete: operations["DELETE_NoteText_for_User_MonetaryAccount_RequestInquiry"];
  };
  "/user/{userID}/monetary-account/{monetary-accountID}/request-response/{request-responseID}/note-text": {
    /** @description Manage the notes for a given user. */
    get: operations["List_all_NoteText_for_User_MonetaryAccount_RequestResponse"];
    /** @description Used to manage text notes. */
    post: operations["CREATE_NoteText_for_User_MonetaryAccount_RequestResponse"];
  };
  "/user/{userID}/monetary-account/{monetary-accountID}/request-response/{request-responseID}/note-text/{itemId}": {
    /** @description Used to manage text notes. */
    get: operations["READ_NoteText_for_User_MonetaryAccount_RequestResponse"];
    /** @description Used to manage text notes. */
    put: operations["UPDATE_NoteText_for_User_MonetaryAccount_RequestResponse"];
    /** @description Used to manage text notes. */
    delete: operations["DELETE_NoteText_for_User_MonetaryAccount_RequestResponse"];
  };
  "/user/{userID}/monetary-account/{monetary-accountID}/schedule/{scheduleID}/schedule-instance/{schedule-instanceID}/note-text": {
    /** @description Manage the notes for a given user. */
    get: operations["List_all_NoteText_for_User_MonetaryAccount_Schedule_ScheduleInstance"];
    /** @description Used to manage text notes. */
    post: operations["CREATE_NoteText_for_User_MonetaryAccount_Schedule_ScheduleInstance"];
  };
  "/user/{userID}/monetary-account/{monetary-accountID}/schedule/{scheduleID}/schedule-instance/{schedule-instanceID}/note-text/{itemId}": {
    /** @description Used to manage text notes. */
    get: operations["READ_NoteText_for_User_MonetaryAccount_Schedule_ScheduleInstance"];
    /** @description Used to manage text notes. */
    put: operations["UPDATE_NoteText_for_User_MonetaryAccount_Schedule_ScheduleInstance"];
    /** @description Used to manage text notes. */
    delete: operations["DELETE_NoteText_for_User_MonetaryAccount_Schedule_ScheduleInstance"];
  };
  "/user/{userID}/monetary-account/{monetary-accountID}/schedule-payment-batch/{schedule-payment-batchID}/note-text": {
    /** @description Manage the notes for a given user. */
    get: operations["List_all_NoteText_for_User_MonetaryAccount_SchedulePaymentBatch"];
    /** @description Used to manage text notes. */
    post: operations["CREATE_NoteText_for_User_MonetaryAccount_SchedulePaymentBatch"];
  };
  "/user/{userID}/monetary-account/{monetary-accountID}/schedule-payment-batch/{schedule-payment-batchID}/note-text/{itemId}": {
    /** @description Used to manage text notes. */
    get: operations["READ_NoteText_for_User_MonetaryAccount_SchedulePaymentBatch"];
    /** @description Used to manage text notes. */
    put: operations["UPDATE_NoteText_for_User_MonetaryAccount_SchedulePaymentBatch"];
    /** @description Used to manage text notes. */
    delete: operations["DELETE_NoteText_for_User_MonetaryAccount_SchedulePaymentBatch"];
  };
  "/user/{userID}/monetary-account/{monetary-accountID}/schedule-payment/{schedule-paymentID}/note-text": {
    /** @description Manage the notes for a given user. */
    get: operations["List_all_NoteText_for_User_MonetaryAccount_SchedulePayment"];
    /** @description Used to manage text notes. */
    post: operations["CREATE_NoteText_for_User_MonetaryAccount_SchedulePayment"];
  };
  "/user/{userID}/monetary-account/{monetary-accountID}/schedule-payment/{schedule-paymentID}/note-text/{itemId}": {
    /** @description Used to manage text notes. */
    get: operations["READ_NoteText_for_User_MonetaryAccount_SchedulePayment"];
    /** @description Used to manage text notes. */
    put: operations["UPDATE_NoteText_for_User_MonetaryAccount_SchedulePayment"];
    /** @description Used to manage text notes. */
    delete: operations["DELETE_NoteText_for_User_MonetaryAccount_SchedulePayment"];
  };
  "/user/{userID}/monetary-account/{monetary-accountID}/sofort-merchant-transaction/{sofort-merchant-transactionID}/note-text": {
    /** @description Manage the notes for a given user. */
    get: operations["List_all_NoteText_for_User_MonetaryAccount_SofortMerchantTransaction"];
    /** @description Used to manage text notes. */
    post: operations["CREATE_NoteText_for_User_MonetaryAccount_SofortMerchantTransaction"];
  };
  "/user/{userID}/monetary-account/{monetary-accountID}/sofort-merchant-transaction/{sofort-merchant-transactionID}/note-text/{itemId}": {
    /** @description Used to manage text notes. */
    get: operations["READ_NoteText_for_User_MonetaryAccount_SofortMerchantTransaction"];
    /** @description Used to manage text notes. */
    put: operations["UPDATE_NoteText_for_User_MonetaryAccount_SofortMerchantTransaction"];
    /** @description Used to manage text notes. */
    delete: operations["DELETE_NoteText_for_User_MonetaryAccount_SofortMerchantTransaction"];
  };
  "/user/{userID}/monetary-account/{monetary-accountID}/whitelist/{whitelistID}/whitelist-result/{whitelist-resultID}/note-text": {
    /** @description Manage the notes for a given user. */
    get: operations["List_all_NoteText_for_User_MonetaryAccount_Whitelist_WhitelistResult"];
    /** @description Used to manage text notes. */
    post: operations["CREATE_NoteText_for_User_MonetaryAccount_Whitelist_WhitelistResult"];
  };
  "/user/{userID}/monetary-account/{monetary-accountID}/whitelist/{whitelistID}/whitelist-result/{whitelist-resultID}/note-text/{itemId}": {
    /** @description Used to manage text notes. */
    get: operations["READ_NoteText_for_User_MonetaryAccount_Whitelist_WhitelistResult"];
    /** @description Used to manage text notes. */
    put: operations["UPDATE_NoteText_for_User_MonetaryAccount_Whitelist_WhitelistResult"];
    /** @description Used to manage text notes. */
    delete: operations["DELETE_NoteText_for_User_MonetaryAccount_Whitelist_WhitelistResult"];
  };
  "/user/{userID}/notification-filter-email": {
    /** @description Manage the email notification filters for a user. */
    get: operations["List_all_NotificationFilterEmail_for_User"];
    /** @description Manage the email notification filters for a user. */
    post: operations["CREATE_NotificationFilterEmail_for_User"];
  };
  "/user/{userID}/notification-filter-failure": {
    /** @description Manage the url notification filters for a user. */
    get: operations["List_all_NotificationFilterFailure_for_User"];
    /** @description Manage the url notification filters for a user. */
    post: operations["CREATE_NotificationFilterFailure_for_User"];
  };
  "/user/{userID}/notification-filter-push": {
    /** @description Manage the push notification filters for a user. */
    get: operations["List_all_NotificationFilterPush_for_User"];
    /** @description Manage the push notification filters for a user. */
    post: operations["CREATE_NotificationFilterPush_for_User"];
  };
  "/user/{userID}/notification-filter-url": {
    /** @description Manage the url notification filters for a user. */
    get: operations["List_all_NotificationFilterUrl_for_User"];
    /** @description Manage the url notification filters for a user. */
    post: operations["CREATE_NotificationFilterUrl_for_User"];
  };
  "/user/{userID}/monetary-account/{monetary-accountID}/notification-filter-url": {
    /** @description Manage the url notification filters for a user. */
    get: operations["List_all_NotificationFilterUrl_for_User_MonetaryAccount"];
    /** @description Manage the url notification filters for a user. */
    post: operations["CREATE_NotificationFilterUrl_for_User_MonetaryAccount"];
  };
  "/user/{userID}/oauth-client/{itemId}": {
    /** @description Used for managing OAuth Clients. */
    get: operations["READ_OauthClient_for_User"];
    /** @description Used for managing OAuth Clients. */
    put: operations["UPDATE_OauthClient_for_User"];
  };
  "/user/{userID}/oauth-client": {
    /** @description Used for managing OAuth Clients. */
    get: operations["List_all_OauthClient_for_User"];
    /** @description Used for managing OAuth Clients. */
    post: operations["CREATE_OauthClient_for_User"];
  };
  "/user/{userID}/monetary-account/{monetary-accountID}/payment": {
    /** @description Get a listing of all Payments performed on a given MonetaryAccount (incoming and outgoing). */
    get: operations["List_all_Payment_for_User_MonetaryAccount"];
    /** @description Create a new Payment. */
    post: operations["CREATE_Payment_for_User_MonetaryAccount"];
  };
  "/user/{userID}/monetary-account/{monetary-accountID}/payment/{itemId}": {
    /** @description Get a specific previous Payment. */
    get: operations["READ_Payment_for_User_MonetaryAccount"];
  };
  "/user/{userID}/monetary-account/{monetary-accountID}/mastercard-action/{mastercard-actionID}/payment": {
    /** @description MasterCard transaction view. */
    get: operations["List_all_Payment_for_User_MonetaryAccount_MastercardAction"];
  };
  "/user/{userID}/monetary-account/{monetary-accountID}/payment-auto-allocate": {
    /** @description Manage a users automatic payment auto allocated settings. */
    get: operations["List_all_PaymentAutoAllocate_for_User_MonetaryAccount"];
    /** @description Manage a users automatic payment auto allocated settings. */
    post: operations["CREATE_PaymentAutoAllocate_for_User_MonetaryAccount"];
  };
  "/user/{userID}/monetary-account/{monetary-accountID}/payment-auto-allocate/{itemId}": {
    /** @description Manage a users automatic payment auto allocated settings. */
    get: operations["READ_PaymentAutoAllocate_for_User_MonetaryAccount"];
    /** @description Manage a users automatic payment auto allocated settings. */
    put: operations["UPDATE_PaymentAutoAllocate_for_User_MonetaryAccount"];
    /** @description Manage a users automatic payment auto allocated settings. */
    delete: operations["DELETE_PaymentAutoAllocate_for_User_MonetaryAccount"];
  };
  "/user/{userID}/payment-auto-allocate": {
    /** @description List a users automatic payment auto allocated settings. */
    get: operations["List_all_PaymentAutoAllocate_for_User"];
  };
  "/user/{userID}/monetary-account/{monetary-accountID}/payment-batch": {
    /** @description Return all the payment batches for a monetary account. */
    get: operations["List_all_PaymentBatch_for_User_MonetaryAccount"];
    /** @description Create a payment batch by sending an array of single payment objects, that will become part of the batch. */
    post: operations["CREATE_PaymentBatch_for_User_MonetaryAccount"];
  };
  "/user/{userID}/monetary-account/{monetary-accountID}/payment-batch/{itemId}": {
    /** @description Return the details of a specific payment batch. */
    get: operations["READ_PaymentBatch_for_User_MonetaryAccount"];
    /** @description Revoke a bunq.to payment batch. The status of all the payments will be set to REVOKED. */
    put: operations["UPDATE_PaymentBatch_for_User_MonetaryAccount"];
  };
  "/payment-service-provider-credential/{itemId}": {
    /** @description Register a Payment Service Provider and provide credentials */
    get: operations["READ_PaymentServiceProviderCredential"];
  };
  "/payment-service-provider-credential": {
    /** @description Register a Payment Service Provider and provide credentials */
    post: operations["CREATE_PaymentServiceProviderCredential"];
  };
  "/user/{userID}/payment-service-provider-draft-payment": {
    /** @description Manage the PaymentServiceProviderDraftPayment's for a PISP. */
    get: operations["List_all_PaymentServiceProviderDraftPayment_for_User"];
    /** @description Manage the PaymentServiceProviderDraftPayment's for a PISP. */
    post: operations["CREATE_PaymentServiceProviderDraftPayment_for_User"];
  };
  "/user/{userID}/payment-service-provider-draft-payment/{itemId}": {
    /** @description Manage the PaymentServiceProviderDraftPayment's for a PISP. */
    get: operations["READ_PaymentServiceProviderDraftPayment_for_User"];
    /** @description Manage the PaymentServiceProviderDraftPayment's for a PISP. */
    put: operations["UPDATE_PaymentServiceProviderDraftPayment_for_User"];
  };
  "/user/{userID}/payment-service-provider-issuer-transaction": {
    /** @description The endpoint for payment service provider issuer transactions */
    get: operations["List_all_PaymentServiceProviderIssuerTransaction_for_User"];
    /** @description The endpoint for payment service provider issuer transactions */
    post: operations["CREATE_PaymentServiceProviderIssuerTransaction_for_User"];
  };
  "/user/{userID}/payment-service-provider-issuer-transaction/{itemId}": {
    /** @description The endpoint for payment service provider issuer transactions */
    get: operations["READ_PaymentServiceProviderIssuerTransaction_for_User"];
    /** @description The endpoint for payment service provider issuer transactions */
    put: operations["UPDATE_PaymentServiceProviderIssuerTransaction_for_User"];
  };
  "/user/{userID}/invoice/{invoiceID}/pdf-content": {
    /** @description Get a PDF export of an invoice. */
    get: operations["List_all_PdfContent_for_User_Invoice"];
  };
  "/registry-import-splitwise-csv": {
    /** @description Used to upload a CSV export from Splitwise, and create a new Registry from it. */
    post: operations["CREATE_RegistryImportSplitwiseCsv"];
  };
  "/user/{userID}/registry/{registryID}/registry-settlement": {
    /** @description Get a listing of all Slice group settlements. */
    get: operations["List_all_RegistrySettlement_for_User_Registry"];
    /** @description Create a new Slice group settlement. */
    post: operations["CREATE_RegistrySettlement_for_User_Registry"];
  };
  "/user/{userID}/registry/{registryID}/registry-settlement/{itemId}": {
    /** @description Get a specific Slice group settlement. */
    get: operations["READ_RegistrySettlement_for_User_Registry"];
  };
  "/user/{userID}/card/{cardID}/replace": {
    /** @description Request a card replacement. */
    post: operations["CREATE_Replace_for_User_Card"];
  };
  "/user/{userID}/monetary-account/{monetary-accountID}/request-inquiry": {
    /** @description Get all payment requests for a user's monetary account. bunqme_share_url is always null if the counterparty is a bunq user. */
    get: operations["List_all_RequestInquiry_for_User_MonetaryAccount"];
    /** @description Create a new payment request. */
    post: operations["CREATE_RequestInquiry_for_User_MonetaryAccount"];
  };
  "/user/{userID}/monetary-account/{monetary-accountID}/request-inquiry/{itemId}": {
    /** @description Get the details of a specific payment request, including its status. bunqme_share_url is always null if the counterparty is a bunq user. */
    get: operations["READ_RequestInquiry_for_User_MonetaryAccount"];
    /** @description Revoke a request for payment, by updating the status to REVOKED. */
    put: operations["UPDATE_RequestInquiry_for_User_MonetaryAccount"];
  };
  "/user/{userID}/monetary-account/{monetary-accountID}/request-inquiry-batch": {
    /** @description Return all the request batches for a monetary account. */
    get: operations["List_all_RequestInquiryBatch_for_User_MonetaryAccount"];
    /** @description Create a request batch by sending an array of single request objects, that will become part of the batch. */
    post: operations["CREATE_RequestInquiryBatch_for_User_MonetaryAccount"];
  };
  "/user/{userID}/monetary-account/{monetary-accountID}/request-inquiry-batch/{itemId}": {
    /** @description Return the details of a specific request batch. */
    get: operations["READ_RequestInquiryBatch_for_User_MonetaryAccount"];
    /** @description Revoke a request batch. The status of all the requests will be set to REVOKED. */
    put: operations["UPDATE_RequestInquiryBatch_for_User_MonetaryAccount"];
  };
  "/user/{userID}/monetary-account/{monetary-accountID}/request-response/{itemId}": {
    /** @description Get the details for a specific existing RequestResponse. */
    get: operations["READ_RequestResponse_for_User_MonetaryAccount"];
    /** @description Update the status to accept or reject the RequestResponse. */
    put: operations["UPDATE_RequestResponse_for_User_MonetaryAccount"];
  };
  "/user/{userID}/monetary-account/{monetary-accountID}/request-response": {
    /** @description Get all RequestResponses for a MonetaryAccount. */
    get: operations["List_all_RequestResponse_for_User_MonetaryAccount"];
  };
  "/sandbox-user-company": {
    /** @description Used to create a sandbox userCompany. */
    post: operations["CREATE_SandboxUserCompany"];
  };
  "/sandbox-user-person": {
    /** @description Used to create a sandbox userPerson. */
    post: operations["CREATE_SandboxUserPerson"];
  };
  "/user/{userID}/monetary-account/{monetary-accountID}/schedule/{itemId}": {
    /** @description Get a specific schedule definition for a given monetary account. */
    get: operations["READ_Schedule_for_User_MonetaryAccount"];
  };
  "/user/{userID}/monetary-account/{monetary-accountID}/schedule": {
    /** @description Get a collection of scheduled definition for a given monetary account. You can add the parameter type to filter the response. When type={SCHEDULE_DEFINITION_PAYMENT,SCHEDULE_DEFINITION_PAYMENT_BATCH} is provided only schedule definition object that relate to these definitions are returned. */
    get: operations["List_all_Schedule_for_User_MonetaryAccount"];
  };
  "/user/{userID}/schedule": {
    /** @description Get a collection of scheduled definition for all accessible monetary accounts of the user. You can add the parameter type to filter the response. When type={SCHEDULE_DEFINITION_PAYMENT,SCHEDULE_DEFINITION_PAYMENT_BATCH} is provided only schedule definition object that relate to these definitions are returned. */
    get: operations["List_all_Schedule_for_User"];
  };
  "/user/{userID}/monetary-account/{monetary-accountID}/schedule/{scheduleID}/schedule-instance/{itemId}": {
    /** @description view for reading, updating and listing the scheduled instance. */
    get: operations["READ_ScheduleInstance_for_User_MonetaryAccount_Schedule"];
    /** @description view for reading, updating and listing the scheduled instance. */
    put: operations["UPDATE_ScheduleInstance_for_User_MonetaryAccount_Schedule"];
  };
  "/user/{userID}/monetary-account/{monetary-accountID}/schedule/{scheduleID}/schedule-instance": {
    /** @description view for reading, updating and listing the scheduled instance. */
    get: operations["List_all_ScheduleInstance_for_User_MonetaryAccount_Schedule"];
  };
  "/user/{userID}/monetary-account/{monetary-accountID}/schedule-payment": {
    /** @description Endpoint for schedule payments. */
    get: operations["List_all_SchedulePayment_for_User_MonetaryAccount"];
    /** @description Endpoint for schedule payments. */
    post: operations["CREATE_SchedulePayment_for_User_MonetaryAccount"];
  };
  "/user/{userID}/monetary-account/{monetary-accountID}/schedule-payment/{itemId}": {
    /** @description Endpoint for schedule payments. */
    get: operations["READ_SchedulePayment_for_User_MonetaryAccount"];
    /** @description Endpoint for schedule payments. */
    put: operations["UPDATE_SchedulePayment_for_User_MonetaryAccount"];
    /** @description Endpoint for schedule payments. */
    delete: operations["DELETE_SchedulePayment_for_User_MonetaryAccount"];
  };
  "/user/{userID}/monetary-account/{monetary-accountID}/schedule-payment-batch/{itemId}": {
    /** @description Endpoint for schedule payment batches. */
    get: operations["READ_SchedulePaymentBatch_for_User_MonetaryAccount"];
    /** @description Endpoint for schedule payment batches. */
    put: operations["UPDATE_SchedulePaymentBatch_for_User_MonetaryAccount"];
    /** @description Endpoint for schedule payment batches. */
    delete: operations["DELETE_SchedulePaymentBatch_for_User_MonetaryAccount"];
  };
  "/user/{userID}/monetary-account/{monetary-accountID}/schedule-payment-batch": {
    /** @description Endpoint for schedule payment batches. */
    post: operations["CREATE_SchedulePaymentBatch_for_User_MonetaryAccount"];
  };
  "/server-error": {
    /** @description An endpoint that will always throw an error. */
    post: operations["CREATE_ServerError"];
  };
  "/installation/{installationID}/server-public-key": {
    /** @description Show the ServerPublicKey for this Installation. */
    get: operations["List_all_ServerPublicKey_for_Installation"];
  };
  "/session/{itemId}": {
    /** @description Deletes the current session. */
    delete: operations["DELETE_Session"];
  };
  "/session-server": {
    /** @description Create a new session for a DeviceServer. Provide the Installation token in the "X-Bunq-Client-Authentication" header. And don't forget to create the "X-Bunq-Client-Signature" header. The response contains a Session token that should be used for as the "X-Bunq-Client-Authentication" header for all future API calls. The ip address making this call needs to match the ip address bound to your API key. */
    post: operations["CREATE_SessionServer"];
  };
  "/user/{userID}/monetary-account/{monetary-accountID}/share-invite-monetary-account-inquiry": {
    /** @description [DEPRECATED - use /share-invite-monetary-account-response] Get a list with all the share inquiries for a monetary account, only if the requesting user has permission to change the details of the various ones. */
    get: operations["List_all_ShareInviteMonetaryAccountInquiry_for_User_MonetaryAccount"];
    /** @description [DEPRECATED - use /share-invite-monetary-account-response] Create a new share inquiry for a monetary account, specifying the permission the other bunq user will have on it. */
    post: operations["CREATE_ShareInviteMonetaryAccountInquiry_for_User_MonetaryAccount"];
  };
  "/user/{userID}/monetary-account/{monetary-accountID}/share-invite-monetary-account-inquiry/{itemId}": {
    /** @description [DEPRECATED - use /share-invite-monetary-account-response] Get the details of a specific share inquiry. */
    get: operations["READ_ShareInviteMonetaryAccountInquiry_for_User_MonetaryAccount"];
    /** @description [DEPRECATED - use /share-invite-monetary-account-response] Update the details of a share. This includes updating status (revoking or cancelling it), granted permission and validity period of this share. */
    put: operations["UPDATE_ShareInviteMonetaryAccountInquiry_for_User_MonetaryAccount"];
  };
  "/user/{userID}/share-invite-monetary-account-response/{itemId}": {
    /** @description Return the details of a specific share a user was invited to. */
    get: operations["READ_ShareInviteMonetaryAccountResponse_for_User"];
    /** @description Accept or reject a share a user was invited to. */
    put: operations["UPDATE_ShareInviteMonetaryAccountResponse_for_User"];
  };
  "/user/{userID}/share-invite-monetary-account-response": {
    /** @description Return all the shares a user was invited to. */
    get: operations["List_all_ShareInviteMonetaryAccountResponse_for_User"];
  };
  "/user/{userID}/monetary-account/{monetary-accountID}/sofort-merchant-transaction/{itemId}": {
    /** @description View for requesting Sofort transactions and polling their status. */
    get: operations["READ_SofortMerchantTransaction_for_User_MonetaryAccount"];
  };
  "/user/{userID}/monetary-account/{monetary-accountID}/sofort-merchant-transaction": {
    /** @description View for requesting Sofort transactions and polling their status. */
    get: operations["List_all_SofortMerchantTransaction_for_User_MonetaryAccount"];
  };
  "/user/{userID}/monetary-account/{monetary-accountID}/event/{eventID}/statement": {
    /** @description Used to create a statement export of a single payment. */
    post: operations["CREATE_Statement_for_User_MonetaryAccount_Event"];
  };
  "/user/{userID}/monetary-account/{monetary-accountID}/event/{eventID}/statement/{itemId}": {
    /** @description Used to create a statement export of a single payment. */
    get: operations["READ_Statement_for_User_MonetaryAccount_Event"];
  };
  "/user/{userID}/monetary-account/{monetary-accountID}/switch-service-payment/{itemId}": {
    /** @description An incoming payment made towards an account of an external bank and redirected to a bunq account via switch service. */
    get: operations["READ_SwitchServicePayment_for_User_MonetaryAccount"];
  };
  "/user/{userID}/token-qr-request-ideal": {
    /** @description Create a request from an ideal transaction. */
    post: operations["CREATE_TokenQrRequestIdeal_for_User"];
  };
  "/user/{userID}/token-qr-request-sofort": {
    /** @description Create a request from an SOFORT transaction. */
    post: operations["CREATE_TokenQrRequestSofort_for_User"];
  };
  "/user/{userID}/transferwise-currency": {
    /** @description Used to get a list of supported currencies for Transferwise. */
    get: operations["List_all_TransferwiseCurrency_for_User"];
  };
  "/user/{userID}/transferwise-quote": {
    /** @description Used to get quotes from Transferwise. These can be used to initiate payments. */
    post: operations["CREATE_TransferwiseQuote_for_User"];
  };
  "/user/{userID}/transferwise-quote/{itemId}": {
    /** @description Used to get quotes from Transferwise. These can be used to initiate payments. */
    get: operations["READ_TransferwiseQuote_for_User"];
  };
  "/user/{userID}/transferwise-quote-temporary": {
    /** @description Used to get temporary quotes from Transferwise. These cannot be used to initiate payments */
    post: operations["CREATE_TransferwiseQuoteTemporary_for_User"];
  };
  "/user/{userID}/transferwise-quote-temporary/{itemId}": {
    /** @description Used to get temporary quotes from Transferwise. These cannot be used to initiate payments */
    get: operations["READ_TransferwiseQuoteTemporary_for_User"];
  };
  "/user/{userID}/transferwise-quote/{transferwise-quoteID}/transferwise-recipient": {
    /** @description Used to manage recipient accounts with Transferwise. */
    get: operations["List_all_TransferwiseRecipient_for_User_TransferwiseQuote"];
    /** @description Used to manage recipient accounts with Transferwise. */
    post: operations["CREATE_TransferwiseRecipient_for_User_TransferwiseQuote"];
  };
  "/user/{userID}/transferwise-quote/{transferwise-quoteID}/transferwise-recipient/{itemId}": {
    /** @description Used to manage recipient accounts with Transferwise. */
    get: operations["READ_TransferwiseRecipient_for_User_TransferwiseQuote"];
    /** @description Used to manage recipient accounts with Transferwise. */
    delete: operations["DELETE_TransferwiseRecipient_for_User_TransferwiseQuote"];
  };
  "/user/{userID}/transferwise-quote/{transferwise-quoteID}/transferwise-recipient-requirement": {
    /** @description Used to determine the recipient account requirements for Transferwise transfers. */
    get: operations["List_all_TransferwiseRecipientRequirement_for_User_TransferwiseQuote"];
    /** @description Used to determine the recipient account requirements for Transferwise transfers. */
    post: operations["CREATE_TransferwiseRecipientRequirement_for_User_TransferwiseQuote"];
  };
  "/user/{userID}/transferwise-quote/{transferwise-quoteID}/transferwise-transfer": {
    /** @description Used to create Transferwise payments. */
    get: operations["List_all_TransferwiseTransfer_for_User_TransferwiseQuote"];
    /** @description Used to create Transferwise payments. */
    post: operations["CREATE_TransferwiseTransfer_for_User_TransferwiseQuote"];
  };
  "/user/{userID}/transferwise-quote/{transferwise-quoteID}/transferwise-transfer/{itemId}": {
    /** @description Used to create Transferwise payments. */
    get: operations["READ_TransferwiseTransfer_for_User_TransferwiseQuote"];
  };
  "/user/{userID}/transferwise-quote/{transferwise-quoteID}/transferwise-transfer-requirement": {
    /** @description Used to determine the account requirements for Transferwise transfers. */
    post: operations["CREATE_TransferwiseTransferRequirement_for_User_TransferwiseQuote"];
  };
  "/user/{userID}/transferwise-user": {
    /** @description Used to manage Transferwise users. */
    get: operations["List_all_TransferwiseUser_for_User"];
    /** @description Used to manage Transferwise users. */
    post: operations["CREATE_TransferwiseUser_for_User"];
  };
  "/user/{userID}/tree-progress": {
    /** @description See how many trees this user has planted. */
    get: operations["List_all_TreeProgress_for_User"];
  };
  "/user/{itemId}": {
    /** @description Get a specific user. */
    get: operations["READ_User"];
  };
  "/user": {
    /** @description Get a collection of all available users. */
    get: operations["List_all_User"];
  };
  "/user-company/{itemId}": {
    /** @description Get a specific company. */
    get: operations["READ_UserCompany"];
    /** @description Modify a specific company's data. */
    put: operations["UPDATE_UserCompany"];
  };
  "/user-payment-service-provider/{itemId}": {
    /** @description Used to view UserPaymentServiceProvider for session creation. */
    get: operations["READ_UserPaymentServiceProvider"];
  };
  "/user-person/{itemId}": {
    /** @description Get a specific person. */
    get: operations["READ_UserPerson"];
    /** @description Modify a specific person object's data. */
    put: operations["UPDATE_UserPerson"];
  };
  "/user/{userID}/whitelist-sdd/{itemId}": {
    /** @description Get a specific recurring SDD whitelist entry. */
    get: operations["READ_WhitelistSdd_for_User"];
  };
  "/user/{userID}/whitelist-sdd": {
    /** @description Get a listing of all recurring SDD whitelist entries for a target monetary account. */
    get: operations["List_all_WhitelistSdd_for_User"];
  };
  "/user/{userID}/monetary-account/{monetary-accountID}/whitelist-sdd/{itemId}": {
    /** @description Get a specific SDD whitelist entry. */
    get: operations["READ_WhitelistSdd_for_User_MonetaryAccount"];
  };
  "/user/{userID}/monetary-account/{monetary-accountID}/whitelist-sdd": {
    /** @description Get a listing of all SDD whitelist entries for a target monetary account. */
    get: operations["List_all_WhitelistSdd_for_User_MonetaryAccount"];
  };
  "/user/{userID}/whitelist-sdd-one-off/{itemId}": {
    /** @description Get a specific one off SDD whitelist entry. */
    get: operations["READ_WhitelistSddOneOff_for_User"];
    /** @description Whitelist an one off SDD so that when another one off SDD from the creditor comes in, it is automatically accepted. */
    put: operations["UPDATE_WhitelistSddOneOff_for_User"];
    /** @description Whitelist an one off SDD so that when another one off SDD from the creditor comes in, it is automatically accepted. */
    delete: operations["DELETE_WhitelistSddOneOff_for_User"];
  };
  "/user/{userID}/whitelist-sdd-one-off": {
    /** @description Get a listing of all one off SDD whitelist entries for a target monetary account. */
    get: operations["List_all_WhitelistSddOneOff_for_User"];
    /** @description Create a new one off SDD whitelist entry. */
    post: operations["CREATE_WhitelistSddOneOff_for_User"];
  };
  "/user/{userID}/whitelist-sdd-recurring/{itemId}": {
    /** @description Get a specific recurring SDD whitelist entry. */
    get: operations["READ_WhitelistSddRecurring_for_User"];
    /** @description Whitelist a recurring SDD so that when another recurrence comes in, it is automatically accepted. */
    put: operations["UPDATE_WhitelistSddRecurring_for_User"];
    /** @description Whitelist a recurring SDD so that when another recurrence comes in, it is automatically accepted. */
    delete: operations["DELETE_WhitelistSddRecurring_for_User"];
  };
  "/user/{userID}/whitelist-sdd-recurring": {
    /** @description Get a listing of all recurring SDD whitelist entries for a target monetary account. */
    get: operations["List_all_WhitelistSddRecurring_for_User"];
    /** @description Create a new recurring SDD whitelist entry. */
    post: operations["CREATE_WhitelistSddRecurring_for_User"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    ActivityMapPlacePublicRead: {
      /** @description The name of the place. */
      name?: string;
      /** @description The public uuid of the place. */
      public_uuid?: string;
      /** @description The geolocation of this place. */
      geolocation?: components["schemas"]["Geolocation"];
      /** @description The address of this place. */
      address?: components["schemas"]["Address"];
      /** @description The phone number of this place. */
      phone_number?: string;
      /** @description The URL to this place's merchant website. */
      url_merchant?: string;
      /** @description The URL to the place's Google maps location. */
      url_google_maps?: string;
      /** @description The attachments for the place's photos. */
      all_attachment_photo?: readonly components["schemas"]["AttachmentPublic"][];
      /** @description The google types of the place. */
      all_type?: readonly string[];
      /** @description The opening periods of the place. */
      all_opening_period?: readonly string[];
      /** @description The total number of recommendations. */
      number_of_recommendation_total?: number;
    };
    AdditionalInformation: {
      /** @description The category of the refund, required for chargeback. */
      category?: string;
      /** @description The reason to refund, required for chargeback. */
      reason?: string;
      /** @description Comment about the refund. */
      comment?: string;
      /** @description The Attachments to attach to the refund request. */
      attachment?: readonly components["schemas"]["AttachmentMasterCardActionRefund"][];
      /** @description Proof that the user acknowledged the terms and conditions for chargebacks. */
      terms_and_conditions?: string;
    };
    AdditionalTransactionInformationCategory: {
      /** @description The category. */
      category?: string;
      /** @description Who created this category. */
      type?: string;
      /** @description Whether this category is active. Only relevant for user-defined categories. */
      status?: string;
      /** @description The sort order of the category. */
      order?: number;
      /** @description The description of the category. */
      description?: string;
      /** @description The translation of the description of the category. */
      description_translated?: string;
      /** @description The color of the category. */
      color?: string;
      /** @description The icon of the category. */
      icon?: string;
    };
    AdditionalTransactionInformationCategoryListing: {
      /** @description The category. */
      category?: string;
      /** @description Who created this category. */
      type?: string;
      /** @description Whether this category is active. Only relevant for user-defined categories. */
      status?: string;
      /** @description The sort order of the category. */
      order?: number;
      /** @description The description of the category. */
      description?: string;
      /** @description The translation of the description of the category. */
      description_translated?: string;
      /** @description The color of the category. */
      color?: string;
      /** @description The icon of the category. */
      icon?: string;
    };
    AdditionalTransactionInformationCategoryUserDefined: {
      /** @description The category. */
      category?: string;
      /** @description Whether this category is active. Only relevant for user-defined categories. */
      status: string;
      /** @description The description of the category. */
      description?: string;
      /** @description The color of the category. */
      color?: string;
      /** @description The icon of the category. */
      icon?: string;
    };
    AdditionalTransactionInformationCategoryUserDefinedCreate: {
      /** @description The id of the created item */
      Id?: components["schemas"]["BunqId"];
    };
    Address: {
      /** @description The street. */
      street?: string;
      /** @description The house number. */
      house_number?: string;
      /** @description The PO box. */
      po_box?: string;
      /** @description The postal code. */
      postal_code?: string;
      /** @description The city. */
      city?: string;
      /** @description The country as an ISO 3166-1 alpha-2 country code. */
      country?: string;
      /** @description The apartment, building or other extra information for addresses. */
      extra?: string;
      /** @description The name on the mailbox (only used for Postal addresses). */
      mailbox_name?: string;
      /** @description The province according to local standard. */
      province?: string;
      /** @description To show whether user created or updated her address for app event listing. */
      is_user_address_updated?: boolean;
    };
    Amount: {
      /** @description The amount formatted to two decimal places. */
      value?: string;
      /** @description The currency of the amount. It is an ISO 4217 formatted currency code. */
      currency?: string;
    };
    Attachment: {
      /** @description The description of the attachment. */
      description?: string;
      /** @description The content type of the attachment's file. */
      content_type?: string;
      /** @description The URLs where the file can be downloaded. */
      urls?: readonly components["schemas"]["AttachmentUrl"][];
    };
    AttachmentConversationContentListing: Record<string, never>;
    AttachmentMasterCardActionRefund: {
      /** @description The id of the attached Attachment. */
      id?: number;
    };
    AttachmentMonetaryAccount: Record<string, never>;
    AttachmentMonetaryAccountContentListing: Record<string, never>;
    AttachmentMonetaryAccountCreate: {
      /** @description The ID of the attachment created. */
      id?: number;
    };
    AttachmentMonetaryAccountPayment: {
      /** @description The id of the attached Attachment. */
      id?: number;
      /** @description The id of the MonetaryAccount this Attachment is attached from. */
      monetary_account_id?: number;
    };
    AttachmentPublic: {
      /** @description The uuid of the attachment. */
      uuid?: string;
      /** @description The description of the attachment. */
      description?: string;
      /** @description The content type of the attachment's file. */
      content_type?: string;
    };
    AttachmentPublicContentListing: Record<string, never>;
    AttachmentPublicCreate: {
      /** @description The id of the created item */
      Id?: components["schemas"]["BunqId"];
    };
    AttachmentPublicRead: {
      /** @description The UUID of the attachment. */
      uuid?: string;
      /** @description The timestamp of the attachment's creation. */
      created?: string;
      /** @description The timestamp of the attachment's last update. */
      updated?: string;
      /** @description The attachment. */
      attachment?: components["schemas"]["Attachment"];
    };
    AttachmentUrl: {
      /** @description The file type of attachment. */
      type?: string;
      /** @description The URL where the attachment can be downloaded. */
      url?: string;
    };
    AttachmentUserContentListing: Record<string, never>;
    AttachmentUserRead: {
      /** @description The id of the attachment. */
      id?: number;
      /** @description The timestamp of the attachment's creation. */
      created?: string;
      /** @description The timestamp of the attachment's last update. */
      updated?: string;
      /** @description The attachment. */
      attachment?: components["schemas"]["Attachment"];
    };
    Avatar: {
      /** @description The public UUID of the avatar. */
      uuid?: string;
      /** @description The public UUID of object this avatar is anchored to. */
      anchor_uuid?: string;
      /** @description The actual image information of this avatar. */
      image?: readonly components["schemas"]["Image"][];
      /** @description The style (if applicable) for this Avatar. */
      style?: string;
    };
    AvatarCreate: {
      /** @description The UUID of the created avatar. */
      uuid?: string;
    };
    AvatarRead: {
      /** @description The UUID of the created avatar. */
      uuid?: string;
      /** @description The content type of the image. */
      image?: readonly components["schemas"]["Image"][];
    };
    BankSwitchServiceNetherlandsIncoming: {
      /** @description The label of the monetary of this switch service. */
      alias?: components["schemas"]["LabelMonetaryAccount"];
      /** @description The IBAN alias that's displayed for this switch service. */
      counterparty_alias?: components["schemas"]["LabelMonetaryAccount"];
      /** @description The status of the switch service. */
      status?: string;
      /** @description The label of the user creator of this switch service. */
      user_alias?: components["schemas"]["LabelUser"];
      /** @description The sub status of the switch service. */
      sub_status?: string;
      /** @description The timestamp when the switch service desired to be start. */
      time_start_desired?: string;
      /** @description The timestamp when the switch service actually starts. */
      time_start_actual?: string;
      /** @description The timestamp when the switch service ends. */
      time_end?: string;
      /** @description Reference to the bank transfer form for this switch-service. */
      attachment?: components["schemas"]["Attachment"];
    };
    BankSwitchServiceNetherlandsIncomingPayment: {
      /** @description The bank switch service details. */
      bank_switch_service?: components["schemas"]["BankSwitchServiceNetherlandsIncoming"];
      /** @description The payment made using bank switch service. */
      payment?: components["schemas"]["Payment"];
    };
    BankSwitchServiceNetherlandsIncomingPaymentRead: {
      /** @description The bank switch service details. */
      bank_switch_service?: components["schemas"]["BankSwitchServiceNetherlandsIncoming"];
      /** @description The payment made using bank switch service. */
      payment?: components["schemas"]["Payment"];
    };
    BillingContractSubscription: {
      /** @description The subscription type of the user. Can be one of PERSON_SUPER_LIGHT_V1, PERSON_LIGHT_V1, PERSON_MORE_V1, PERSON_FREE_V1, PERSON_PREMIUM_V1, COMPANY_V1, or COMPANY_V2. */
      subscription_type?: string;
      /** @description The id of the billing contract. */
      id?: number;
      /** @description The timestamp when the billing contract was made. */
      created?: string;
      /** @description The timestamp when the billing contract was last updated. */
      updated?: string;
      /** @description The date from when the billing contract is valid. */
      contract_date_start?: string;
      /** @description The date until when the billing contract is valid. */
      contract_date_end?: string;
      /** @description The version of the billing contract. */
      contract_version?: number;
      /** @description The subscription type the user will have after a subscription downgrade. Will be null if downgrading is not possible. */
      subscription_type_downgrade?: string;
      /** @description The subscription status. */
      status?: string;
      /** @description The subscription substatus. */
      sub_status?: string;
    };
    BillingContractSubscriptionListing: {
      /** @description The id of the billing contract. */
      id?: number;
      /** @description The timestamp when the billing contract was made. */
      created?: string;
      /** @description The timestamp when the billing contract was last updated. */
      updated?: string;
      /** @description The date from when the billing contract is valid. */
      contract_date_start?: string;
      /** @description The date until when the billing contract is valid. */
      contract_date_end?: string;
      /** @description The version of the billing contract. */
      contract_version?: number;
      /** @description The subscription type of the user. Can be one of PERSON_SUPER_LIGHT_V1, PERSON_LIGHT_V1, PERSON_MORE_V1, PERSON_FREE_V1, PERSON_PREMIUM_V1, COMPANY_V1, or COMPANY_V2. */
      subscription_type?: string;
      /** @description The subscription type the user will have after a subscription downgrade. Will be null if downgrading is not possible. */
      subscription_type_downgrade?: string;
      /** @description The subscription status. */
      status?: string;
      /** @description The subscription substatus. */
      sub_status?: string;
    };
    BirdeeInvestmentPortfolio: {
      /** @description The type of risk profile associated with the portfolio. */
      risk_profile_type?: string;
      /** @description The investment theme. */
      investment_theme?: string;
      /** @description The name associated with the investment portfolio. */
      name?: string;
      /** @description The investment goal. */
      goal?: components["schemas"]["BirdeeInvestmentPortfolioGoal"];
      /** @description Status of the portfolio. */
      status?: string;
      /** @description Maximum number of strategy changes in a year. */
      number_of_strategy_change_annual_maximum?: number;
      /** @description Maximum number of strategy changes used. */
      number_of_strategy_change_annual_used?: number;
      /** @description The external identifier of the portfolio. */
      external_identifier?: string;
      /** @description The investment portfolio balance. */
      balance?: components["schemas"]["BirdeeInvestmentPortfolioBalance"];
      /** @description The allocations of the investment portfolio. */
      allocations?: readonly components["schemas"]["BirdeePortfolioAllocation"][];
    };
    BirdeeInvestmentPortfolioBalance: {
      /** @description The current valuation of the portfolio, minus any amount pending withdrawal. */
      amount_available?: components["schemas"]["Amount"];
      /** @description The total amount deposited. */
      amount_deposit_total?: components["schemas"]["Amount"];
      /** @description The total amount withdrawn. */
      amount_withdrawal_total?: components["schemas"]["Amount"];
      /** @description The total fee amount. */
      amount_fee_total?: components["schemas"]["Amount"];
      /** @description The difference between the netto deposited amount and the current valuation. */
      amount_profit?: components["schemas"]["Amount"];
      /** @description The amount that's sent to Birdee, but pending investment on the portfolio. */
      amount_deposit_pending?: components["schemas"]["Amount"];
      /** @description The amount that's sent to Birdee, but pending withdrawal. */
      amount_withdrawal_pending?: components["schemas"]["Amount"];
    };
    BirdeeInvestmentPortfolioGoal: {
      /** @description The investment goal amount. */
      amount_target?: components["schemas"]["Amount"];
      /** @description The investment goal end time. */
      time_end?: string;
    };
    BirdeePortfolioAllocation: {
      /** @description Currency of the instrument. */
      instrument_currency?: string;
      /** @description Asset Class of the instrument. */
      instrument_asset_class?: string;
      /** @description Name of the asset class. */
      instrument_asset_class_name?: string;
      /** @description ISIN code of the instrument. */
      instrument_isin?: string;
      /** @description Name of the instrument. */
      instrument_name?: string;
      /** @description Name of the geographical region covered by the instrument */
      instrument_region_name?: string;
      /** @description Key Information Document of the instrument. */
      instrument_key_information_document_uri?: string;
      /** @description Weight of the financial instrument in the model portfolio. */
      weight?: string;
      /** @description Quantity of the financial instrument in the portfolio. */
      quantity?: string;
      /** @description Unit price of the financial instrument. */
      price?: string;
      /** @description Monetary amount of the financial instrument in the portfolio. */
      amount?: string;
    };
    BunqId: {
      /** @description An integer ID of an object. Unique per object type. */
      id?: number;
    };
    BunqMeFundraiserProfile: {
      /** @description The pointer (url) which will be used to access the bunq.me fundraiser profile. */
      pointer?: components["schemas"]["Pointer"];
      /** @description The color chosen for the bunq.me fundraiser profile in hexadecimal format. */
      color?: string;
      /** @description The LabelMonetaryAccount with the public information of the User and the MonetaryAccount that created the bunq.me fundraiser profile. */
      alias?: components["schemas"]["LabelMonetaryAccount"];
      /** @description The currency of the MonetaryAccount that created the bunq.me fundraiser profile. */
      currency?: string;
      /** @description The description of the bunq.me fundraiser profile. */
      description?: string;
      /** @description The attachment attached to the fundraiser profile. */
      attachment?: components["schemas"]["AttachmentPublic"];
      /** @description The status of the bunq.me fundraiser profile, can be ACTIVE or DEACTIVATED. */
      status?: string;
      /** @description The URL which the user is sent to when a payment is completed. */
      redirect_url?: string;
      /** @description Provided if the user has enabled their invite link. */
      invite_profile_name?: string;
      /** @description List of available merchants. */
      merchant_available?: readonly components["schemas"]["BunqMeMerchantAvailable"][];
    };
    BunqMeFundraiserProfileUserListing: {
      /** @description Id of the monetary account on which you want to receive bunq.me payments. */
      monetary_account_id?: number;
      /** @description Id of the user owning the profile. */
      owner_user_id?: number;
      /** @description The color chosen for the bunq.me fundraiser profile in hexadecimal format. */
      color?: string;
      /** @description The LabelMonetaryAccount with the public information of the User and the MonetaryAccount that created the bunq.me fundraiser profile. */
      alias?: components["schemas"]["LabelMonetaryAccount"];
      /** @description The currency of the MonetaryAccount that created the bunq.me fundraiser profile. */
      currency?: string;
      /** @description The description of the bunq.me fundraiser profile. */
      description?: string;
      /** @description The attachment used for the background of the bunq.me fundraiser profile. */
      attachment?: components["schemas"]["AttachmentPublic"];
      /** @description The pointer (url) which will be used to access the bunq.me fundraiser profile. */
      pointer?: components["schemas"]["Pointer"];
      /** @description The URL which the user is sent to when a payment is completed. */
      redirect_url?: string;
      /** @description The status of the bunq.me fundraiser profile, can be ACTIVE or DEACTIVATED. */
      status?: string;
    };
    BunqMeFundraiserProfileUserRead: {
      /** @description Id of the monetary account on which you want to receive bunq.me payments. */
      monetary_account_id?: number;
      /** @description Id of the user owning the profile. */
      owner_user_id?: number;
      /** @description The color chosen for the bunq.me fundraiser profile in hexadecimal format. */
      color?: string;
      /** @description The LabelMonetaryAccount with the public information of the User and the MonetaryAccount that created the bunq.me fundraiser profile. */
      alias?: components["schemas"]["LabelMonetaryAccount"];
      /** @description The currency of the MonetaryAccount that created the bunq.me fundraiser profile. */
      currency?: string;
      /** @description The description of the bunq.me fundraiser profile. */
      description?: string;
      /** @description The attachment used for the background of the bunq.me fundraiser profile. */
      attachment?: components["schemas"]["AttachmentPublic"];
      /** @description The pointer (url) which will be used to access the bunq.me fundraiser profile. */
      pointer?: components["schemas"]["Pointer"];
      /** @description The URL which the user is sent to when a payment is completed. */
      redirect_url?: string;
      /** @description The status of the bunq.me fundraiser profile, can be ACTIVE or DEACTIVATED. */
      status?: string;
    };
    BunqMeFundraiserResult: {
      /** @description The id of the bunq.me. */
      id?: number;
      /** @description The timestamp when the bunq.me was created. */
      created?: string;
      /** @description The timestamp when the bunq.me was last updated. */
      updated?: string;
      /** @description The bunq.me fundraiser profile. */
      bunqme_fundraiser_profile?: components["schemas"]["BunqMeFundraiserProfile"];
      /** @description The list of payments, paid to the bunq.me fundraiser profile. */
      payments?: readonly components["schemas"]["Payment"][];
    };
    BunqMeFundraiserResultRead: {
      /** @description The id of the bunq.me. */
      id?: number;
      /** @description The timestamp when the bunq.me was created. */
      created?: string;
      /** @description The timestamp when the bunq.me was last updated. */
      updated?: string;
      /** @description The bunq.me fundraiser profile. */
      bunqme_fundraiser_profile?: components["schemas"]["BunqMeFundraiserProfile"];
      /** @description The list of payments, paid to the bunq.me fundraiser profile. */
      payments?: readonly components["schemas"]["Payment"][];
    };
    BunqMeMerchantAvailable: {
      /** @description A merchant type supported by bunq.me. */
      merchant_type?: string;
      /** @description Whether or not the merchant is available for the user. */
      available?: boolean;
    };
    BunqMeTab: {
      /** @description The bunq.me entry containing the payment information. */
      bunqme_tab_entry: components["schemas"]["BunqMeTabEntry"];
      /** @description The status of the bunq.me. Ignored in POST requests but can be used for cancelling the bunq.me by setting status as CANCELLED with a PUT request. */
      status?: string;
      /** @description The ID of the related event if the bunqMeTab made by 'split' functionality. */
      event_id?: number;
    };
    BunqMeTabCreate: {
      /** @description The id of the created bunq.me. */
      id?: number;
    };
    BunqMeTabEntry: {
      /** @description The requested Amount. */
      amount_inquired?: components["schemas"]["Amount"];
      /** @description The description for the bunq.me. Maximum 9000 characters. */
      description?: string;
      /** @description The URL which the user is sent to when a payment is completed. */
      redirect_url?: string;
      /** @description The uuid of the bunq.me. */
      uuid?: string;
      /** @description The LabelMonetaryAccount with the public information of the User and the MonetaryAccount that created the bunq.me link. */
      alias?: components["schemas"]["LabelMonetaryAccount"];
      /** @description The status of the bunq.me. Can be WAITING_FOR_PAYMENT, CANCELLED or EXPIRED. */
      status?: string;
      /** @description List of available merchants. */
      merchant_available?: readonly components["schemas"]["BunqMeMerchantAvailable"][];
      /** @description Provided if the user has enabled their invite link. */
      invite_profile_name?: string;
    };
    BunqMeTabListing: {
      /** @description The id of the created bunq.me. */
      id?: number;
      /** @description The timestamp when the bunq.me was created. */
      created?: string;
      /** @description The timestamp when the bunq.me was last updated. */
      updated?: string;
      /** @description The timestamp of when the bunq.me expired or will expire. */
      time_expiry?: string;
      /** @description The id of the MonetaryAccount the bunq.me was sent from. */
      monetary_account_id?: number;
      /** @description The status of the bunq.me. Can be WAITING_FOR_PAYMENT, CANCELLED or EXPIRED. */
      status?: string;
      /** @description The type of the bunq.me Tab. Should be BUNQ_ME */
      type?: string;
      /** @description The LabelMonetaryAccount with the public information of the User and the MonetaryAccount that created the bunq.me link. */
      alias_monetary_account?: components["schemas"]["LabelMonetaryAccount"];
      /** @description The url that points to the bunq.me page. */
      bunqme_tab_share_url?: string;
      /** @description The bunq.me entry containing the payment information. */
      bunqme_tab_entry?: components["schemas"]["BunqMeTabEntry"];
      /** @description The bunq.me tab entries attached to this bunq.me Tab. */
      bunqme_tab_entries?: readonly components["schemas"]["BunqMeTabEntry"][];
      /** @description The list of bunq.me result Inquiries successfully made and paid. */
      result_inquiries?: readonly components["schemas"]["BunqMeTabResultInquiry"][];
    };
    BunqMeTabRead: {
      /** @description The id of the created bunq.me. */
      id?: number;
      /** @description The timestamp when the bunq.me was created. */
      created?: string;
      /** @description The timestamp when the bunq.me was last updated. */
      updated?: string;
      /** @description The timestamp of when the bunq.me expired or will expire. */
      time_expiry?: string;
      /** @description The id of the MonetaryAccount the bunq.me was sent from. */
      monetary_account_id?: number;
      /** @description The status of the bunq.me. Can be WAITING_FOR_PAYMENT, CANCELLED or EXPIRED. */
      status?: string;
      /** @description The type of the bunq.me Tab. Should be BUNQ_ME */
      type?: string;
      /** @description The LabelMonetaryAccount with the public information of the User and the MonetaryAccount that created the bunq.me link. */
      alias_monetary_account?: components["schemas"]["LabelMonetaryAccount"];
      /** @description The url that points to the bunq.me page. */
      bunqme_tab_share_url?: string;
      /** @description The bunq.me entry containing the payment information. */
      bunqme_tab_entry?: components["schemas"]["BunqMeTabEntry"];
      /** @description The bunq.me tab entries attached to this bunq.me Tab. */
      bunqme_tab_entries?: readonly components["schemas"]["BunqMeTabEntry"][];
      /** @description The list of bunq.me result Inquiries successfully made and paid. */
      result_inquiries?: readonly components["schemas"]["BunqMeTabResultInquiry"][];
    };
    BunqMeTabResultInquiry: {
      /** @description The payment made for the Tab. */
      payment?: components["schemas"]["Payment"];
      /** @description The Id of the bunq.me tab that this BunqMeTabResultInquiry belongs to. */
      bunq_me_tab_id?: number;
    };
    BunqMeTabResultResponse: {
      /** @description The payment made for the bunq.me tab. */
      payment?: components["schemas"]["Payment"];
    };
    BunqMeTabResultResponseRead: {
      /** @description The payment made for the bunq.me tab. */
      payment?: components["schemas"]["Payment"];
    };
    BunqMeTabUpdate: {
      /** @description The id of the created item */
      Id?: components["schemas"]["BunqId"];
    };
    Card: {
      /** @description The plaintext pin code. Requests require encryption to be enabled. */
      pin_code?: string;
      /** @description DEPRECATED: Activate a card by setting status to ACTIVE when the order_status is ACCEPTED_FOR_PRODUCTION. */
      activation_code?: string;
      /** @description The status to set for the card. Can be ACTIVE, DEACTIVATED, LOST, STOLEN or CANCELLED, and can only be set to LOST/STOLEN/CANCELLED when order status is ACCEPTED_FOR_PRODUCTION/DELIVERED_TO_CUSTOMER/CARD_UPDATE_REQUESTED/CARD_UPDATE_SENT/CARD_UPDATE_ACCEPTED. Can only be set to DEACTIVATED after initial activation, i.e. order_status is DELIVERED_TO_CUSTOMER/CARD_UPDATE_REQUESTED/CARD_UPDATE_SENT/CARD_UPDATE_ACCEPTED. Mind that all the possible choices (apart from ACTIVE and DEACTIVATED) are permanent and cannot be changed after. */
      status?: string;
      /** @description The order status to set for the card. Set to CARD_REQUEST_PENDING to get a virtual card produced. */
      order_status?: string;
      /** @description The spending limit for the card. */
      card_limit?: components["schemas"]["Amount"];
      /** @description The ATM spending limit for the card. */
      card_limit_atm?: components["schemas"]["Amount"];
      /** @description The countries for which to grant (temporary) permissions to use the card. */
      country_permission?: components["schemas"]["CardCountryPermission"][];
      /** @description Array of Types, PINs, account IDs assigned to the card. */
      pin_code_assignment?: components["schemas"]["CardPinAssignment"][];
      /** @description Array of PANs and their attributes. */
      primary_account_numbers?: components["schemas"]["CardPrimaryAccountNumber"][];
      /** @description ID of the MA to be used as fallback for this card if insufficient balance. Fallback account is removed if not supplied. */
      monetary_account_id_fallback?: number;
      /** @description The user's preferred name as it will be on the card. */
      preferred_name_on_card?: string;
      /** @description The second line of text on the card */
      second_line?: string;
      /** @description The reason for card cancellation. */
      cancellation_reason?: string;
    };
    CardBatch: {
      /** @description The cards that need to be updated. */
      cards: components["schemas"]["CardBatchEntry"][];
    };
    CardBatchCreate: {
      /** @description The ids of the cards that have been updated. */
      updated_card_ids?: readonly components["schemas"]["BunqId"][];
    };
    CardBatchEntry: {
      /** @description The ID of the card that needs to be updated. */
      id: number;
      /** @description The status to set for the card. Can be ACTIVE, DEACTIVATED, LOST, STOLEN or CANCELLED, and can only be set to LOST/STOLEN/CANCELLED when order status is ACCEPTED_FOR_PRODUCTION/DELIVERED_TO_CUSTOMER/CARD_UPDATE_REQUESTED/CARD_UPDATE_SENT/CARD_UPDATE_ACCEPTED. Can only be set to DEACTIVATED after initial activation, i.e. order_status is DELIVERED_TO_CUSTOMER/CARD_UPDATE_REQUESTED/CARD_UPDATE_SENT/CARD_UPDATE_ACCEPTED. Mind that all the possible choices (apart from ACTIVE and DEACTIVATED) are permanent and cannot be changed after. */
      status?: string;
      /** @description The spending limit for the card. */
      card_limit?: components["schemas"]["Amount"];
      /** @description The ATM spending limit for the card. */
      card_limit_atm?: components["schemas"]["Amount"];
      /** @description The countries for which to grant (temporary) permissions to use the card. */
      country_permission?: components["schemas"]["CardCountryPermission"][];
      /** @description ID of the MA to be used as fallback for this card if insufficient balance. Fallback account is removed if not supplied. */
      monetary_account_id_fallback?: number;
    };
    CardBatchReplace: {
      /** @description The cards that need to be replaced. */
      cards: components["schemas"]["CardBatchReplaceEntry"][];
    };
    CardBatchReplaceCreate: {
      /** @description The ids of the cards that have been replaced. */
      updated_card_ids?: readonly components["schemas"]["BunqId"][];
    };
    CardBatchReplaceEntry: {
      /** @description The ID of the card that needs to be replaced. */
      id: number;
      /** @description The user's name as it will be on the card. Check 'card-name' for the available card names for a user. */
      name_on_card?: string;
      /** @description Array of Types, PINs, account IDs assigned to the card. */
      pin_code_assignment?: components["schemas"]["CardPinAssignment"][];
      /** @description The second line on the card. */
      second_line?: string;
    };
    CardCountryPermission: {
      /** @description The country to allow transactions in (e.g. NL, DE). */
      country?: string;
      /** @description Expiry time of this rule. */
      expiry_time?: string;
      /** @description The id of the card country permission entry. */
      id?: number;
    };
    CardCredit: {
      /** @description The first line of text on the card, used as name/description for it. It can contain at most 17 characters and it can be empty. */
      first_line?: string;
      /** @description The second line of text on the card, used as name/description for it. It can contain at most 17 characters and it can be empty. */
      second_line: string;
      /** @description The user's name as it will be on the card. Check 'card-name' for the available card names for a user. */
      name_on_card: string;
      /** @description The user's preferred name that can be put on the card. */
      preferred_name_on_card?: string;
      /** @description The pointer to the monetary account that will be connected at first with the card. Its IBAN code is also the one that will be printed on the card itself. The pointer must be of type IBAN. */
      alias?: components["schemas"]["Pointer"];
      /** @description The type of card to order. Can be MASTERCARD. */
      type: string;
      /** @description The product type of the card to order. */
      product_type: string;
      /** @description Array of Types, PINs, account IDs assigned to the card. */
      pin_code_assignment?: components["schemas"]["CardPinAssignment"][];
      /** @description ID of the MA to be used as fallback for this card if insufficient balance. Fallback account is removed if not supplied. */
      monetary_account_id_fallback?: number;
      /** @description The order status of this card. Can be CARD_REQUEST_PENDING or VIRTUAL_DELIVERY. */
      order_status?: string;
    };
    CardCreditCreate: {
      /** @description The id of the created item */
      Id?: components["schemas"]["BunqId"];
    };
    CardDebit: {
      /** @description The second line of text on the card, used as name/description for it. It can contain at most 17 characters and it can be empty. */
      second_line: string;
      /** @description The user's name as it will be on the card. Check 'card-name' for the available card names for a user. */
      name_on_card: string;
      /** @description The user's preferred name that can be put on the card. */
      preferred_name_on_card?: string;
      /** @description The pointer to the monetary account that will be connected at first with the card. Its IBAN code is also the one that will be printed on the card itself. The pointer must be of type IBAN. */
      alias?: components["schemas"]["Pointer"];
      /** @description The type of card to order. Can be MAESTRO or MASTERCARD. */
      type: string;
      /** @description The product type of the card to order. */
      product_type: string;
      /** @description Array of Types, PINs, account IDs assigned to the card. */
      pin_code_assignment?: components["schemas"]["CardPinAssignment"][];
      /** @description ID of the MA to be used as fallback for this card if insufficient balance. Fallback account is removed if not supplied. */
      monetary_account_id_fallback?: number;
      /** @description The order status of this card. Can be CARD_REQUEST_PENDING or VIRTUAL_DELIVERY. */
      order_status?: string;
    };
    CardDebitCreate: {
      /** @description The id of the created item */
      Id?: components["schemas"]["BunqId"];
    };
    CardGeneratedCvc2: {
      /** @description The type of generated cvc2. Can be STATIC or GENERATED. */
      type?: string;
    };
    CardGeneratedCvc2Create: {
      /** @description The id of the created item */
      Id?: components["schemas"]["BunqId"];
    };
    CardGeneratedCvc2Listing: {
      /** @description The id of the cvc code. */
      id?: number;
      /** @description The timestamp of the cvc code's creation. */
      created?: string;
      /** @description The timestamp of the cvc code's last update. */
      updated?: string;
      /** @description The type of generated cvc2. Can be STATIC or GENERATED. */
      type?: string;
      /** @description The cvc2 code. */
      cvc2?: string;
      /** @description The status of the cvc2. Can be AVAILABLE, USED, EXPIRED, BLOCKED. */
      status?: string;
      /** @description Expiry time of the cvc2. */
      expiry_time?: string;
    };
    CardGeneratedCvc2Read: {
      /** @description The id of the cvc code. */
      id?: number;
      /** @description The timestamp of the cvc code's creation. */
      created?: string;
      /** @description The timestamp of the cvc code's last update. */
      updated?: string;
      /** @description The type of generated cvc2. Can be STATIC or GENERATED. */
      type?: string;
      /** @description The cvc2 code. */
      cvc2?: string;
      /** @description The status of the cvc2. Can be AVAILABLE, USED, EXPIRED, BLOCKED. */
      status?: string;
      /** @description Expiry time of the cvc2. */
      expiry_time?: string;
    };
    CardGeneratedCvc2Update: {
      /** @description The id of the created item */
      Id?: components["schemas"]["BunqId"];
    };
    CardListing: {
      /** @description The id of the card. */
      id?: number;
      /** @description The timestamp of the card's creation. */
      created?: string;
      /** @description The timestamp of the card's last update. */
      updated?: string;
      /** @description The public UUID of the card. */
      public_uuid?: string;
      /** @description The type of the card. Can be MAESTRO, MASTERCARD. */
      type?: string;
      /** @description The sub-type of the card. */
      sub_type?: string;
      /** @description The second line of text on the card */
      second_line?: string;
      /** @description ID of the user who is owner of the card. */
      user_id?: number;
      /** @description The status to set for the card. Can be ACTIVE, DEACTIVATED, LOST, STOLEN, CANCELLED, EXPIRED or PIN_TRIES_EXCEEDED. */
      status?: string;
      /** @description The sub-status of the card. Can be NONE or REPLACED. */
      sub_status?: string;
      /** @description The order status of the card. Can be NEW_CARD_REQUEST_RECEIVED, CARD_REQUEST_PENDING, SENT_FOR_PRODUCTION, ACCEPTED_FOR_PRODUCTION, DELIVERED_TO_CUSTOMER, CARD_UPDATE_REQUESTED, CARD_UPDATE_PENDING, CARD_UPDATE_SENT, CARD_UPDATE_ACCEPTED, VIRTUAL_DELIVERY, NEW_CARD_REQUEST_PENDING_USER_APPROVAL, SENT_FOR_DELIVERY or NEW_CARD_REQUEST_CANCELLED. */
      order_status?: string;
      /** @description Expiry date of the card. */
      expiry_date?: string;
      /** @description The user's name on the card. */
      name_on_card?: string;
      /** @description The user's preferred name on the card. */
      preferred_name_on_card?: string;
      /** @description Array of PANs and their attributes. */
      primary_account_numbers?: readonly components["schemas"]["CardPrimaryAccountNumber"][];
      /** @description The payment account reference number associated with the card. */
      payment_account_reference?: string;
      /** @description The spending limit for the card. */
      card_limit?: components["schemas"]["Amount"];
      /** @description The ATM spending limit for the card. */
      card_limit_atm?: components["schemas"]["Amount"];
      /** @description The countries for which to grant (temporary) permissions to use the card. */
      country_permission?: readonly components["schemas"]["CardCountryPermission"][];
      /** @description The monetary account this card was ordered on and the label user that owns the card. */
      label_monetary_account_ordered?: components["schemas"]["LabelMonetaryAccount"];
      /** @description The monetary account that this card is currently linked to and the label user viewing it. */
      label_monetary_account_current?: components["schemas"]["LabelMonetaryAccount"];
      /** @description Current monetary account (only for prepaid credit cards). */
      monetary_account?: components["schemas"]["MonetaryAccount"];
      /** @description Array of Types, PINs, account IDs assigned to the card. */
      pin_code_assignment?: readonly components["schemas"]["CardPinAssignment"][];
      /** @description ID of the MA to be used as fallback for this card if insufficient balance. Fallback account is removed if not supplied. */
      monetary_account_id_fallback?: number;
      /** @description The country that is domestic to the card. Defaults to country of residence of user. */
      country?: string;
      /** @description A tracking link provided by our shipment provider. */
      card_shipment_tracking_url?: string;
      /** @description Whether this card is eligible for a free replacement. */
      is_eligible_for_free_replacement?: boolean;
      /** @description The card replacement for this card. */
      card_replacement?: components["schemas"]["CardReplacement"];
    };
    CardNameListing: {
      /** @description All possible variations (of suitable length) of user's legal name for the debit card. */
      possible_card_name_array?: readonly string[];
    };
    CardPinAssignment: {
      /** @description PIN type. Can be PRIMARY, SECONDARY or TERTIARY */
      type?: string;
      /** @description Routing type. Can be MANUAL or AUTOMATIC */
      routing_type?: string;
      /** @description The 4 digit PIN to be assigned to this account. */
      pin_code?: string;
      /** @description The ID of the monetary account to assign to this pin for the card. */
      monetary_account_id?: number;
    };
    CardPrimaryAccountNumber: {
      /** @description The ID for this Virtual PAN. */
      id?: number;
      /** @description The description for this PAN. */
      description?: string;
      /** @description The status for this PAN, only for Online Cards. */
      status?: string;
      /** @description The ID of the monetary account to assign to this PAN, only for Online Cards. */
      monetary_account_id?: number;
      /** @description The UUID for this Virtual PAN. */
      uuid?: string;
      /** @description The last four digits of the PAN. */
      four_digit?: string;
    };
    CardRead: {
      /** @description The id of the card. */
      id?: number;
      /** @description The timestamp of the card's creation. */
      created?: string;
      /** @description The timestamp of the card's last update. */
      updated?: string;
      /** @description The public UUID of the card. */
      public_uuid?: string;
      /** @description The type of the card. Can be MAESTRO, MASTERCARD. */
      type?: string;
      /** @description The sub-type of the card. */
      sub_type?: string;
      /** @description The second line of text on the card */
      second_line?: string;
      /** @description ID of the user who is owner of the card. */
      user_id?: number;
      /** @description The status to set for the card. Can be ACTIVE, DEACTIVATED, LOST, STOLEN, CANCELLED, EXPIRED or PIN_TRIES_EXCEEDED. */
      status?: string;
      /** @description The sub-status of the card. Can be NONE or REPLACED. */
      sub_status?: string;
      /** @description The order status of the card. Can be NEW_CARD_REQUEST_RECEIVED, CARD_REQUEST_PENDING, SENT_FOR_PRODUCTION, ACCEPTED_FOR_PRODUCTION, DELIVERED_TO_CUSTOMER, CARD_UPDATE_REQUESTED, CARD_UPDATE_PENDING, CARD_UPDATE_SENT, CARD_UPDATE_ACCEPTED, VIRTUAL_DELIVERY, NEW_CARD_REQUEST_PENDING_USER_APPROVAL, SENT_FOR_DELIVERY or NEW_CARD_REQUEST_CANCELLED. */
      order_status?: string;
      /** @description Expiry date of the card. */
      expiry_date?: string;
      /** @description The user's name on the card. */
      name_on_card?: string;
      /** @description The user's preferred name on the card. */
      preferred_name_on_card?: string;
      /** @description Array of PANs and their attributes. */
      primary_account_numbers?: readonly components["schemas"]["CardPrimaryAccountNumber"][];
      /** @description The payment account reference number associated with the card. */
      payment_account_reference?: string;
      /** @description The spending limit for the card. */
      card_limit?: components["schemas"]["Amount"];
      /** @description The ATM spending limit for the card. */
      card_limit_atm?: components["schemas"]["Amount"];
      /** @description The countries for which to grant (temporary) permissions to use the card. */
      country_permission?: readonly components["schemas"]["CardCountryPermission"][];
      /** @description The monetary account this card was ordered on and the label user that owns the card. */
      label_monetary_account_ordered?: components["schemas"]["LabelMonetaryAccount"];
      /** @description The monetary account that this card is currently linked to and the label user viewing it. */
      label_monetary_account_current?: components["schemas"]["LabelMonetaryAccount"];
      /** @description Current monetary account (only for prepaid credit cards). */
      monetary_account?: components["schemas"]["MonetaryAccount"];
      /** @description Array of Types, PINs, account IDs assigned to the card. */
      pin_code_assignment?: readonly components["schemas"]["CardPinAssignment"][];
      /** @description ID of the MA to be used as fallback for this card if insufficient balance. Fallback account is removed if not supplied. */
      monetary_account_id_fallback?: number;
      /** @description The country that is domestic to the card. Defaults to country of residence of user. */
      country?: string;
      /** @description A tracking link provided by our shipment provider. */
      card_shipment_tracking_url?: string;
      /** @description Whether this card is eligible for a free replacement. */
      is_eligible_for_free_replacement?: boolean;
      /** @description The card replacement for this card. */
      card_replacement?: components["schemas"]["CardReplacement"];
    };
    CardReplace: {
      /** @description The user's name as it will be on the card. Check 'card-name' for the available card names for a user. */
      name_on_card?: string;
      /** @description The user's preferred name that can be put on the card. */
      preferred_name_on_card?: string;
      /** @description Array of Types, PINs, account IDs assigned to the card. */
      pin_code_assignment?: components["schemas"]["CardPinAssignment"][];
      /** @description The second line on the card. */
      second_line?: string;
    };
    CardReplaceCreate: {
      /** @description The id of the created item */
      Id?: components["schemas"]["BunqId"];
    };
    CardReplacement: {
      /** @description The status of the CardReplacement. */
      status?: string;
      /** @description The user's main address. */
      address_main?: components["schemas"]["Address"];
      /** @description The user's postal address. */
      address_postal?: components["schemas"]["Address"];
      /** @description The original card that belongs to the CardReplacement. */
      card_id?: number;
      /** @description The new card that replaces the original card in the CardReplacement. */
      card_new_id?: number;
    };
    CardUpdate: {
      /** @description The id of the created item */
      Id?: components["schemas"]["BunqId"];
    };
    CashbackPayoutItem: {
      /** @description The status of the cashback payout item. */
      status?: string;
      /** @description The amount of cashback earned. */
      amount?: components["schemas"]["Amount"];
      /** @description The cashback rate. */
      rate_applied?: string;
      /** @description The transaction category that this cashback is for. */
      transaction_category?: components["schemas"]["AdditionalTransactionInformationCategory"];
    };
    Certificate: {
      /** @description A single certificate in the chain in .PEM format. */
      certificate?: string;
    };
    CertificatePinned: {
      /** @description The certificate chain in .PEM format. */
      certificate_chain: components["schemas"]["Certificate"][];
    };
    CertificatePinnedCreate: {
      /** @description The id generated for the pinned certificate chain. */
      id?: number;
    };
    CertificatePinnedDelete: Record<string, never>;
    CertificatePinnedListing: {
      /** @description The certificate chain in .PEM format. Certificates are glued with newline characters. */
      certificate_chain?: string;
      /** @description The id generated for the pinned certificate chain. */
      id?: number;
    };
    CertificatePinnedRead: {
      /** @description The certificate chain in .PEM format. Certificates are glued with newline characters. */
      certificate_chain?: string;
      /** @description The id generated for the pinned certificate chain. */
      id?: number;
    };
    CoOwner: {
      /** @description The Alias of the co-owner. */
      alias?: components["schemas"]["LabelUser"];
      /** @description Can be: ACCEPTED, REJECTED, PENDING or REVOKED */
      status?: string;
    };
    Company: {
      /** @description The company name. */
      name: string;
      /** @description The company's main address. */
      address_main: components["schemas"]["Address"];
      /** @description The company's postal address. */
      address_postal: components["schemas"]["Address"];
      /** @description The country where the company is registered. */
      country: string;
      /** @description The names and birth dates of the company's ultimate beneficiary owners. Minimum zero, maximum four. */
      ubo?: components["schemas"]["Ubo"][];
      /** @description The company's chamber of commerce number. */
      chamber_of_commerce_number?: string;
      /** @description The company's legal form. */
      legal_form: string;
      /** @description The subscription type for the company. */
      subscription_type: string;
      /** @description The public UUID of the company's avatar. */
      avatar_uuid?: string;
      /** @description DEPRECATED All the vat numbers of the company */
      vat_number?: components["schemas"]["CompanyVatNumber"];
      /** @description All the vat numbers of the company */
      vat_numbers?: components["schemas"]["CompanyVatNumber"][];
      /** @description The type of signup track the user is following. */
      signup_track_type?: string;
    };
    CompanyCreate: {
      /** @description The id of the created item */
      Id?: components["schemas"]["BunqId"];
    };
    CompanyListing: {
      UserCompany?: components["schemas"]["UserCompany"];
    };
    CompanyRead: {
      UserCompany?: components["schemas"]["UserCompany"];
    };
    CompanyUpdate: {
      /** @description The id of the created item */
      Id?: components["schemas"]["BunqId"];
    };
    CompanyVatNumber: {
      /** @description The VAT identification number type. */
      type?: string;
      /** @description The country of the VAT identification number. */
      country?: string;
      /** @description The VAT identification number number. */
      value?: string;
    };
    ConfirmationOfFunds: {
      /** @description The pointer (IBAN) of the account we're querying. */
      pointer_iban: components["schemas"]["Pointer"];
      /** @description The amount we want to check for. */
      amount: components["schemas"]["Amount"];
    };
    ConfirmationOfFundsCreate: {
      /** @description The id of the created item */
      Id?: components["schemas"]["BunqId"];
    };
    CurrencyCloudBeneficiary: {
      /** @description The name of the beneficiary. */
      name: string;
      /** @description The country of the beneficiary. */
      country: string;
      /** @description The currency of the beneficiary. */
      currency: string;
      /** @description The payment type this requirement is for. */
      payment_type: string;
      /** @description The legal entity type of the beneficiary. */
      legal_entity_type: string;
      /** @description All fields that were required by CurrencyCloud. Obtained through the CurrencyCloudBeneficiaryRequirement listing. */
      all_field: string[];
    };
    CurrencyCloudBeneficiaryCreate: {
      /** @description The id of the created item */
      Id?: components["schemas"]["BunqId"];
    };
    CurrencyCloudBeneficiaryListing: {
      /** @description The id of the profile. */
      id?: number;
      /** @description The timestamp of the beneficiaries creation. */
      created?: string;
      /** @description The timestamp of the beneficiaries last update. */
      updated?: string;
      /** @description The name of the beneficiary. */
      name?: string;
      /** @description The account number to display for the beneficiary. */
      account_number?: string;
      /** @description The currency of the beneficiary. */
      currency?: string;
      /** @description The external identifier of the beneficiary. */
      external_identifier?: string;
    };
    CurrencyCloudBeneficiaryRead: {
      /** @description The id of the profile. */
      id?: number;
      /** @description The timestamp of the beneficiaries creation. */
      created?: string;
      /** @description The timestamp of the beneficiaries last update. */
      updated?: string;
      /** @description The name of the beneficiary. */
      name?: string;
      /** @description The account number to display for the beneficiary. */
      account_number?: string;
      /** @description The currency of the beneficiary. */
      currency?: string;
      /** @description The external identifier of the beneficiary. */
      external_identifier?: string;
    };
    CurrencyCloudBeneficiaryRequirementField: {
      /** @description The label to display for the field. */
      label?: string;
      /** @description The name of the field. */
      name?: string;
      /** @description The expression to validate field input. */
      validation_expression?: string;
      /** @description The type of data to input. Determines the keyboard to display. */
      input_type?: string;
    };
    CurrencyCloudBeneficiaryRequirementListing: {
      /** @description The payment type this requirement is for. */
      payment_type?: string;
      /** @description The entity type this requirement is for. */
      legal_entity_type?: string;
      /** @description The fields that are required. */
      all_field?: readonly components["schemas"]["CurrencyCloudBeneficiaryRequirementField"][];
    };
    CurrencyCloudPaymentQuote: {
      /** @description The points we want to know the fees for. */
      pointers: components["schemas"]["Pointer"][];
    };
    CurrencyCloudPaymentQuoteCreate: {
      /** @description The id of the created item */
      Id?: components["schemas"]["BunqId"];
    };
    CurrencyConversion: {
      /** @description The id of the conversion. */
      id?: number;
      /** @description The timestamp of the conversion's creation. */
      created?: string;
      /** @description The timestamp of the conversion's last update. */
      updated?: string;
      /** @description The status of the conversion. */
      status?: string;
      /** @description The expected delivery date of the conversion. */
      date_delivery_expected?: string;
      /** @description The rate of the conversion. */
      rate?: string;
      /** @description The amount of the conversion. */
      amount?: components["schemas"]["Amount"];
      /** @description The amount of the counter conversion. */
      counter_amount?: components["schemas"]["Amount"];
      /** @description The group uuid of the conversion. */
      group_uuid?: string;
      /** @description The type of this conversion. */
      type?: string;
      /** @description The order type, buying or selling. */
      order_type?: string;
      /** @description The label of the monetary account. */
      label_monetary_account?: components["schemas"]["LabelMonetaryAccount"];
      /** @description The label of the counter monetary account. */
      counter_label_monetary_account?: components["schemas"]["LabelMonetaryAccount"];
      /** @description The payment associated with this conversion. */
      payment?: components["schemas"]["Payment"];
    };
    CurrencyConversionListing: {
      /** @description The id of the conversion. */
      id?: number;
      /** @description The timestamp of the conversion's creation. */
      created?: string;
      /** @description The timestamp of the conversion's last update. */
      updated?: string;
      /** @description The status of the conversion. */
      status?: string;
      /** @description The expected delivery date of the conversion. */
      date_delivery_expected?: string;
      /** @description The rate of the conversion. */
      rate?: string;
      /** @description The amount of the conversion. */
      amount?: components["schemas"]["Amount"];
      /** @description The amount of the counter conversion. */
      counter_amount?: components["schemas"]["Amount"];
      /** @description The group uuid of the conversion. */
      group_uuid?: string;
      /** @description The type of this conversion. */
      type?: string;
      /** @description The order type, buying or selling. */
      order_type?: string;
      /** @description The label of the monetary account. */
      label_monetary_account?: components["schemas"]["LabelMonetaryAccount"];
      /** @description The label of the counter monetary account. */
      counter_label_monetary_account?: components["schemas"]["LabelMonetaryAccount"];
      /** @description The payment associated with this conversion. */
      payment?: components["schemas"]["Payment"];
    };
    CurrencyConversionQuote: {
      /** @description The amount to convert. */
      amount: components["schemas"]["Amount"];
      /** @description The currency we are converting. */
      currency_source: string;
      /** @description The currency we are converting towards. */
      currency_target: string;
      /** @description The type of the quote, SELL or BUY. */
      order_type: string;
      /** @description The Alias of the party we are transferring the money to. */
      counterparty_alias: components["schemas"]["Pointer"];
      /** @description The status of the quote. */
      status?: string;
    };
    CurrencyConversionQuoteCreate: {
      /** @description The id of the created item */
      Id?: components["schemas"]["BunqId"];
    };
    CurrencyConversionQuoteRead: {
      /** @description The id of the quote. */
      id?: number;
      /** @description The timestamp of the quote's creation. */
      created?: string;
      /** @description The timestamp of the quote's last update. */
      updated?: string;
      /** @description The status of the quote. */
      status?: string;
      /** @description The amount to convert. */
      amount_source?: components["schemas"]["Amount"];
      /** @description The amount to convert to. */
      amount_target?: components["schemas"]["Amount"];
      /** @description The conversion rate. */
      rate?: string;
      /** @description Timestamp for when this quote expires and the user should request a new one. */
      time_expiry?: string;
    };
    CurrencyConversionQuoteUpdate: {
      /** @description The id of the created item */
      Id?: components["schemas"]["BunqId"];
    };
    CurrencyConversionRead: {
      /** @description The id of the conversion. */
      id?: number;
      /** @description The timestamp of the conversion's creation. */
      created?: string;
      /** @description The timestamp of the conversion's last update. */
      updated?: string;
      /** @description The status of the conversion. */
      status?: string;
      /** @description The expected delivery date of the conversion. */
      date_delivery_expected?: string;
      /** @description The rate of the conversion. */
      rate?: string;
      /** @description The amount of the conversion. */
      amount?: components["schemas"]["Amount"];
      /** @description The amount of the counter conversion. */
      counter_amount?: components["schemas"]["Amount"];
      /** @description The group uuid of the conversion. */
      group_uuid?: string;
      /** @description The type of this conversion. */
      type?: string;
      /** @description The order type, buying or selling. */
      order_type?: string;
      /** @description The label of the monetary account. */
      label_monetary_account?: components["schemas"]["LabelMonetaryAccount"];
      /** @description The label of the counter monetary account. */
      counter_label_monetary_account?: components["schemas"]["LabelMonetaryAccount"];
      /** @description The payment associated with this conversion. */
      payment?: components["schemas"]["Payment"];
    };
    Customer: {
      /** @description The primary billing account account's id. */
      billing_account_id?: string;
      /** @description The preferred notification type for invoices. */
      invoice_notification_preference?: string;
      /** @description The id of the customer. */
      id?: number;
      /** @description The timestamp of the customer object's creation. */
      created?: string;
      /** @description The timestamp of the customer object's last update. */
      updated?: string;
    };
    CustomerLimit: {
      /** @description The limit of monetary accounts. */
      limit_monetary_account?: number;
      /** @description The amount of additional monetary accounts you can create. */
      limit_monetary_account_remaining?: number;
      /** @description The limit of Maestro cards. */
      limit_card_debit_maestro?: number;
      /** @description The limit of MasterCard cards. */
      limit_card_debit_mastercard?: number;
      /** @description DEPRECTATED: The limit of wildcards, e.g. Maestro or MasterCard cards. */
      limit_card_debit_wildcard?: number;
      /** @description The limit of wildcards, e.g. Maestro or MasterCard cards. */
      limit_card_wildcard?: number;
      /** @description The limit of free replacement cards. */
      limit_card_replacement?: number;
      /** @description The maximum amount a user is allowed to spend in a month. */
      limit_amount_monthly?: components["schemas"]["Amount"];
      /** @description The amount the user has spent in the last month. */
      spent_amount_monthly?: components["schemas"]["Amount"];
    };
    CustomerLimitListing: {
      /** @description The limit of monetary accounts. */
      limit_monetary_account?: number;
      /** @description The amount of additional monetary accounts you can create. */
      limit_monetary_account_remaining?: number;
      /** @description The limit of Maestro cards. */
      limit_card_debit_maestro?: number;
      /** @description The limit of MasterCard cards. */
      limit_card_debit_mastercard?: number;
      /** @description DEPRECTATED: The limit of wildcards, e.g. Maestro or MasterCard cards. */
      limit_card_debit_wildcard?: number;
      /** @description The limit of wildcards, e.g. Maestro or MasterCard cards. */
      limit_card_wildcard?: number;
      /** @description The limit of free replacement cards. */
      limit_card_replacement?: number;
      /** @description The maximum amount a user is allowed to spend in a month. */
      limit_amount_monthly?: components["schemas"]["Amount"];
      /** @description The amount the user has spent in the last month. */
      spent_amount_monthly?: components["schemas"]["Amount"];
    };
    DeviceListing: {
      DeviceServer?: components["schemas"]["DeviceServer"];
    };
    DeviceRead: {
      DeviceServer?: components["schemas"]["DeviceServer"];
    };
    DeviceServer: {
      /** @description The description of the DeviceServer. This is only for your own reference when reading the DeviceServer again. */
      description: string;
      /** @description The API key. You can request an API key in the bunq app. */
      secret: string;
      /** @description An array of IPs (v4 or v6) this DeviceServer will be able to do calls from. These will be linked to the API key. */
      permitted_ips?: string[];
    };
    DeviceServerCreate: {
      /** @description The id of the DeviceServer as created on the server. */
      id?: number;
    };
    DeviceServerListing: {
      /** @description The id of the DeviceServer as created on the server. */
      id?: number;
      /** @description The timestamp of the DeviceServer's creation. */
      created?: string;
      /** @description The timestamp of the DeviceServer's last update. */
      updated?: string;
      /** @description The description of the DeviceServer. */
      description?: string;
      /** @description The ip address which was used to create the DeviceServer. */
      ip?: string;
      /** @description The status of the DeviceServer. Can be ACTIVE, BLOCKED, NEEDS_CONFIRMATION or OBSOLETE. */
      status?: string;
    };
    DeviceServerRead: {
      /** @description The id of the DeviceServer as created on the server. */
      id?: number;
      /** @description The timestamp of the DeviceServer's creation. */
      created?: string;
      /** @description The timestamp of the DeviceServer's last update. */
      updated?: string;
      /** @description The description of the DeviceServer. */
      description?: string;
      /** @description The ip address which was used to create the DeviceServer. */
      ip?: string;
      /** @description The status of the DeviceServer. Can be ACTIVE, BLOCKED, NEEDS_CONFIRMATION or OBSOLETE. */
      status?: string;
    };
    DraftPayment: {
      /** @description The status of the DraftPayment. */
      status?: string;
      /** @description The list of entries in the DraftPayment. Each entry will result in a payment when the DraftPayment is accepted. */
      entries: components["schemas"]["DraftPaymentEntry"][];
      /** @description The last updated_timestamp that you received for this DraftPayment. This needs to be provided to prevent race conditions. */
      previous_updated_timestamp?: string;
      /** @description The number of accepts that are required for the draft payment to receive status ACCEPTED. Currently only 1 is valid. */
      number_of_required_accepts: number;
      /** @description The schedule details when creating or updating a scheduled payment. */
      schedule?: components["schemas"]["Schedule"];
    };
    DraftPaymentAnchorObject: {
      Payment?: components["schemas"]["Payment"];
      PaymentBatch?: components["schemas"]["PaymentBatch"];
    };
    DraftPaymentCreate: {
      /** @description The id of the created DrafPayment. */
      id?: number;
    };
    DraftPaymentEntry: {
      /** @description The amount of the payment. */
      amount?: components["schemas"]["Amount"];
      /** @description The LabelMonetaryAccount containing the public information of the other (counterparty) side of the DraftPayment. */
      counterparty_alias?: components["schemas"]["LabelMonetaryAccount"];
      /** @description The description for the DraftPayment. Maximum 140 characters for DraftPayments to external IBANs, 9000 characters for DraftPayments to only other bunq MonetaryAccounts. */
      description?: string;
      /** @description Optional data to be included with the Payment specific to the merchant. */
      merchant_reference?: string;
      /** @description The Attachments attached to the DraftPayment. */
      attachment?: components["schemas"]["AttachmentMonetaryAccountPayment"][];
      /** @description The id of the draft payment entry. */
      id?: number;
      /** @description The LabelMonetaryAccount containing the public information of 'this' (party) side of the DraftPayment. */
      alias?: components["schemas"]["LabelMonetaryAccount"];
      /** @description The type of the draft payment entry. */
      type?: string;
    };
    DraftPaymentListing: {
      /** @description The id of the created DrafPayment. */
      id?: number;
      /** @description The id of the MonetaryAccount the DraftPayment applies to. */
      monetary_account_id?: number;
      /** @description The label of the User who created the DraftPayment. */
      user_alias_created?: components["schemas"]["LabelUser"];
      /** @description All responses to this draft payment. */
      responses?: readonly components["schemas"]["DraftPaymentResponse"][];
      /** @description The status of the DraftPayment. */
      status?: string;
      /** @description The type of the DraftPayment. */
      type?: string;
      /** @description The entries in the DraftPayment. */
      entries?: readonly components["schemas"]["DraftPaymentEntry"][];
      /** @description The Payment or PaymentBatch. This will only be present after the DraftPayment has been accepted. */
      object?: components["schemas"]["DraftPaymentAnchorObject"];
      /** @description The reference to the object used for split the bill. Can be RequestInquiry or RequestInquiryBatch */
      request_reference_split_the_bill?: readonly components["schemas"]["RequestInquiryReference"][];
      /** @description The schedule details. */
      schedule?: components["schemas"]["Schedule"];
    };
    DraftPaymentRead: {
      /** @description The id of the created DrafPayment. */
      id?: number;
      /** @description The id of the MonetaryAccount the DraftPayment applies to. */
      monetary_account_id?: number;
      /** @description The label of the User who created the DraftPayment. */
      user_alias_created?: components["schemas"]["LabelUser"];
      /** @description All responses to this draft payment. */
      responses?: readonly components["schemas"]["DraftPaymentResponse"][];
      /** @description The status of the DraftPayment. */
      status?: string;
      /** @description The type of the DraftPayment. */
      type?: string;
      /** @description The entries in the DraftPayment. */
      entries?: readonly components["schemas"]["DraftPaymentEntry"][];
      /** @description The Payment or PaymentBatch. This will only be present after the DraftPayment has been accepted. */
      object?: components["schemas"]["DraftPaymentAnchorObject"];
      /** @description The reference to the object used for split the bill. Can be RequestInquiry or RequestInquiryBatch */
      request_reference_split_the_bill?: readonly components["schemas"]["RequestInquiryReference"][];
      /** @description The schedule details. */
      schedule?: components["schemas"]["Schedule"];
    };
    DraftPaymentResponse: {
      /** @description The status with which was responded. */
      status?: string;
      /** @description The user that responded to the DraftPayment. */
      user_alias_created?: components["schemas"]["LabelUser"];
    };
    DraftPaymentUpdate: {
      /** @description The id of the created DrafPayment. */
      id?: number;
    };
    Error: {
        /** @description The error description in English. */
        error_description?: string;
        /** @description The error description translated to the user's language. */
        error_description_translated?: string;
      }[];
    EventListing: {
      /** @description The id of the event. */
      id?: number;
      /** @description The timestamp of the event's creation. */
      created?: string;
      /** @description The timestamp of the event's last update. */
      updated?: string;
      /** @description The performed action. Can be: CREATE or UPDATE. */
      action?: string;
      /** @description The id of the user the event applied to (if it was a user event). */
      user_id?: string;
      /** @description The id of the monetary account the event applied to (if it was a monetary account event). */
      monetary_account_id?: string;
      /** @description The details of the external object the event was created for. */
      object?: components["schemas"]["EventObject"];
      /** @description The event status. Can be: FINALIZED or AWAITING_REPLY. An example of FINALIZED event is a payment received event, while an AWAITING_REPLY event is a request received event. */
      status?: string;
    };
    EventObject: {
      BunqMeTab?: components["schemas"]["BunqMeTab"];
      BunqMeTabResultResponse?: components["schemas"]["BunqMeTabResultResponse"];
      BunqMeFundraiserResult?: components["schemas"]["BunqMeFundraiserResult"];
      Card?: components["schemas"]["Card"];
      CardDebit?: components["schemas"]["CardDebit"];
      DraftPayment?: components["schemas"]["DraftPayment"];
      FeatureAnnouncement?: components["schemas"]["FeatureAnnouncement"];
      IdealMerchantTransaction?: components["schemas"]["IdealMerchantTransaction"];
      Invoice?: components["schemas"]["Invoice"];
      ScheduledPayment?: components["schemas"]["SchedulePayment"];
      ScheduledPaymentBatch?: components["schemas"]["SchedulePaymentBatch"];
      ScheduledInstance?: components["schemas"]["ScheduleInstance"];
      MasterCardAction?: components["schemas"]["MasterCardAction"];
      BankSwitchServiceNetherlandsIncomingPayment?: components["schemas"]["BankSwitchServiceNetherlandsIncomingPayment"];
      Payment?: components["schemas"]["Payment"];
      PaymentBatch?: components["schemas"]["PaymentBatch"];
      RequestInquiryBatch?: components["schemas"]["RequestInquiryBatch"];
      RequestInquiry?: components["schemas"]["RequestInquiry"];
      RequestResponse?: components["schemas"]["RequestResponse"];
      ShareInviteBankInquiry?: components["schemas"]["ShareInviteMonetaryAccountInquiry"];
      ShareInviteBankResponse?: components["schemas"]["ShareInviteMonetaryAccountResponse"];
      SofortMerchantTransaction?: components["schemas"]["SofortMerchantTransaction"];
      TransferwisePayment?: components["schemas"]["TransferwiseTransfer"];
    };
    EventRead: {
      /** @description The id of the event. */
      id?: number;
      /** @description The timestamp of the event's creation. */
      created?: string;
      /** @description The timestamp of the event's last update. */
      updated?: string;
      /** @description The performed action. Can be: CREATE or UPDATE. */
      action?: string;
      /** @description The id of the user the event applied to (if it was a user event). */
      user_id?: string;
      /** @description The id of the monetary account the event applied to (if it was a monetary account event). */
      monetary_account_id?: string;
      /** @description The details of the external object the event was created for. */
      object?: components["schemas"]["EventObject"];
      /** @description The event status. Can be: FINALIZED or AWAITING_REPLY. An example of FINALIZED event is a payment received event, while an AWAITING_REPLY event is a request received event. */
      status?: string;
    };
    ExportAnnualOverview: {
      /** @description The year for which the overview is. */
      year: number;
    };
    ExportAnnualOverviewContentListing: Record<string, never>;
    ExportAnnualOverviewCreate: {
      /** @description The id of the annual overview as created on the server. */
      id?: number;
    };
    ExportAnnualOverviewDelete: Record<string, never>;
    ExportAnnualOverviewListing: {
      /** @description The id of the annual overview as created on the server. */
      id?: number;
      /** @description The timestamp of the annual overview 's creation. */
      created?: string;
      /** @description The timestamp of the annual overview 's last update. */
      updated?: string;
      /** @description The year for which the overview is. */
      year?: number;
      /** @description The user to which this annual overview belongs. */
      alias_user?: components["schemas"]["LabelUser"];
    };
    ExportAnnualOverviewRead: {
      /** @description The id of the annual overview as created on the server. */
      id?: number;
      /** @description The timestamp of the annual overview 's creation. */
      created?: string;
      /** @description The timestamp of the annual overview 's last update. */
      updated?: string;
      /** @description The year for which the overview is. */
      year?: number;
      /** @description The user to which this annual overview belongs. */
      alias_user?: components["schemas"]["LabelUser"];
    };
    ExportRib: Record<string, never>;
    ExportRibContentListing: Record<string, never>;
    ExportRibCreate: {
      /** @description The id of the rib as created on the server. */
      id?: number;
    };
    ExportRibDelete: Record<string, never>;
    ExportRibListing: {
      /** @description The id of the rib as created on the server. */
      id?: number;
      /** @description The timestamp of the RIB's creation. */
      created?: string;
      /** @description The timestamp of the RIB's last update. */
      updated?: string;
    };
    ExportRibRead: {
      /** @description The id of the rib as created on the server. */
      id?: number;
      /** @description The timestamp of the RIB's creation. */
      created?: string;
      /** @description The timestamp of the RIB's last update. */
      updated?: string;
    };
    ExportStatement: {
      /** @description The format type of statement. Allowed values: MT940, CSV, PDF. */
      statement_format: string;
      /** @description The start date for making statements. */
      date_start: string;
      /** @description The end date for making statements. */
      date_end: string;
      /** @description Required for CSV exports. The regional format of the statement, can be UK_US (comma-separated) or EUROPEAN (semicolon-separated). */
      regional_format?: string;
      /** @description Only for PDF exports. Includes attachments to mutations in the export, such as scanned receipts. */
      include_attachment?: boolean;
    };
    ExportStatementCardContentListing: Record<string, never>;
    ExportStatementCardCsv: {
      /** @description The start date for making statements. */
      date_start: string;
      /** @description The end date for making statements. */
      date_end: string;
      /** @description Required for CSV exports. The regional format of the statement, can be UK_US (comma-separated) or EUROPEAN (semicolon-separated). */
      regional_format: string;
    };
    ExportStatementCardCsvCreate: {
      /** @description The id of the created item */
      Id?: components["schemas"]["BunqId"];
    };
    ExportStatementCardCsvDelete: Record<string, never>;
    ExportStatementCardCsvListing: {
      /** @description The id of the customer statement model. */
      id?: number;
      /** @description The timestamp of the statement model's creation. */
      created?: string;
      /** @description The timestamp of the statement model's last update. */
      updated?: string;
      /** @description The date from when this statement shows transactions. */
      date_start?: string;
      /** @description The date until which statement shows transactions. */
      date_end?: string;
      /** @description The status of the export. */
      status?: string;
      /** @description The regional format of a CSV statement. */
      regional_format?: string;
      /** @description The card for which this statement was created. */
      card_id?: number;
    };
    ExportStatementCardCsvRead: {
      /** @description The id of the customer statement model. */
      id?: number;
      /** @description The timestamp of the statement model's creation. */
      created?: string;
      /** @description The timestamp of the statement model's last update. */
      updated?: string;
      /** @description The date from when this statement shows transactions. */
      date_start?: string;
      /** @description The date until which statement shows transactions. */
      date_end?: string;
      /** @description The status of the export. */
      status?: string;
      /** @description The regional format of a CSV statement. */
      regional_format?: string;
      /** @description The card for which this statement was created. */
      card_id?: number;
    };
    ExportStatementCardListing: {
      /** @description The id of the customer statement model. */
      id?: number;
      /** @description The timestamp of the statement model's creation. */
      created?: string;
      /** @description The timestamp of the statement model's last update. */
      updated?: string;
      /** @description The date from when this statement shows transactions. */
      date_start?: string;
      /** @description The date until which statement shows transactions. */
      date_end?: string;
      /** @description The status of the export. */
      status?: string;
      /** @description The regional format of a CSV statement. */
      regional_format?: string;
      /** @description The card for which this statement was created. */
      card_id?: number;
    };
    ExportStatementCardPdf: {
      /** @description The start date for making statements. */
      date_start: string;
      /** @description The end date for making statements. */
      date_end: string;
    };
    ExportStatementCardPdfCreate: {
      /** @description The id of the created item */
      Id?: components["schemas"]["BunqId"];
    };
    ExportStatementCardPdfDelete: Record<string, never>;
    ExportStatementCardPdfListing: {
      /** @description The id of the customer statement model. */
      id?: number;
      /** @description The timestamp of the statement model's creation. */
      created?: string;
      /** @description The timestamp of the statement model's last update. */
      updated?: string;
      /** @description The date from when this statement shows transactions. */
      date_start?: string;
      /** @description The date until which statement shows transactions. */
      date_end?: string;
      /** @description The status of the export. */
      status?: string;
      /** @description The card for which this statement was created. */
      card_id?: number;
    };
    ExportStatementCardPdfRead: {
      /** @description The id of the customer statement model. */
      id?: number;
      /** @description The timestamp of the statement model's creation. */
      created?: string;
      /** @description The timestamp of the statement model's last update. */
      updated?: string;
      /** @description The date from when this statement shows transactions. */
      date_start?: string;
      /** @description The date until which statement shows transactions. */
      date_end?: string;
      /** @description The status of the export. */
      status?: string;
      /** @description The card for which this statement was created. */
      card_id?: number;
    };
    ExportStatementCardRead: {
      /** @description The id of the customer statement model. */
      id?: number;
      /** @description The timestamp of the statement model's creation. */
      created?: string;
      /** @description The timestamp of the statement model's last update. */
      updated?: string;
      /** @description The date from when this statement shows transactions. */
      date_start?: string;
      /** @description The date until which statement shows transactions. */
      date_end?: string;
      /** @description The status of the export. */
      status?: string;
      /** @description The regional format of a CSV statement. */
      regional_format?: string;
      /** @description The card for which this statement was created. */
      card_id?: number;
    };
    ExportStatementContentListing: Record<string, never>;
    ExportStatementCreate: {
      /** @description The id of the created item */
      Id?: components["schemas"]["BunqId"];
    };
    ExportStatementDelete: Record<string, never>;
    ExportStatementListing: {
      /** @description The id of the customer statement model. */
      id?: number;
      /** @description The timestamp of the statement model's creation. */
      created?: string;
      /** @description The timestamp of the statement model's last update. */
      updated?: string;
      /** @description The date from when this statement shows transactions. */
      date_start?: string;
      /** @description The date until which statement shows transactions. */
      date_end?: string;
      /** @description The status of the export. */
      status?: string;
      /** @description MT940 Statement number. Unique per monetary account. */
      statement_number?: number;
      /** @description The format of statement. */
      statement_format?: string;
      /** @description The regional format of a CSV statement. */
      regional_format?: string;
      /** @description The monetary account for which this statement was created. */
      alias_monetary_account?: components["schemas"]["LabelMonetaryAccount"];
    };
    ExportStatementPayment: Record<string, never>;
    ExportStatementPaymentContentListing: Record<string, never>;
    ExportStatementPaymentCreate: {
      /** @description The id of the created item */
      Id?: components["schemas"]["BunqId"];
    };
    ExportStatementPaymentRead: {
      /** @description The id of the single payment statement model. */
      id?: number;
      /** @description The timestamp of the statement model's creation. */
      created?: string;
      /** @description The timestamp of the statement model's last update. */
      updated?: string;
      /** @description The status of the export. */
      status?: string;
    };
    ExportStatementRead: {
      /** @description The id of the customer statement model. */
      id?: number;
      /** @description The timestamp of the statement model's creation. */
      created?: string;
      /** @description The timestamp of the statement model's last update. */
      updated?: string;
      /** @description The date from when this statement shows transactions. */
      date_start?: string;
      /** @description The date until which statement shows transactions. */
      date_end?: string;
      /** @description The status of the export. */
      status?: string;
      /** @description MT940 Statement number. Unique per monetary account. */
      statement_number?: number;
      /** @description The format of statement. */
      statement_format?: string;
      /** @description The regional format of a CSV statement. */
      regional_format?: string;
      /** @description The monetary account for which this statement was created. */
      alias_monetary_account?: components["schemas"]["LabelMonetaryAccount"];
    };
    FeatureAnnouncement: {
      /** @description The Avatar of the event overview. */
      avatar?: components["schemas"]["Avatar"];
      /** @description The event overview title of the feature display */
      title?: string;
      /** @description The event overview subtitle of the feature display */
      sub_title?: string;
      /** @description The type of the feature announcement so apps can override with their own stuff if desired */
      type?: string;
    };
    FeatureAnnouncementRead: {
      /** @description The Avatar of the event overview. */
      avatar?: components["schemas"]["Avatar"];
      /** @description The event overview title of the feature display */
      title?: string;
      /** @description The event overview subtitle of the feature display */
      sub_title?: string;
      /** @description The type of the feature announcement so apps can override with their own stuff if desired */
      type?: string;
    };
    Geolocation: {
      /** @description The latitude for a geolocation restriction. */
      latitude?: number;
      /** @description The longitude for a geolocation restriction. */
      longitude?: number;
      /** @description The altitude for a geolocation restriction. */
      altitude?: number;
      /** @description The radius for a geolocation restriction. */
      radius?: number;
    };
    IdealMerchantTransaction: {
      /** @description The requested amount of money to add. */
      amount_requested?: components["schemas"]["Amount"];
      /** @description The BIC of the issuer. */
      issuer?: string;
      /** @description The id of the monetary account this ideal merchant transaction links to. */
      monetary_account_id?: number;
      /** @description The alias of the monetary account to add money to. */
      alias?: components["schemas"]["LabelMonetaryAccount"];
      /** @description The alias of the monetary account the money comes from. */
      counterparty_alias?: components["schemas"]["LabelMonetaryAccount"];
      /** @description In case of a successful transaction, the amount of money that will be transferred. */
      amount_guaranteed?: components["schemas"]["Amount"];
      /** @description When the transaction will expire. */
      expiration?: string;
      /** @description The Name of the issuer. */
      issuer_name?: string;
      /** @description The URL to visit to */
      issuer_authentication_url?: string;
      /** @description The 'purchase ID' of the iDEAL transaction. */
      purchase_identifier?: string;
      /** @description The status of the transaction. */
      status?: string;
      /** @description When the status was last updated. */
      status_timestamp?: string;
      /** @description The 'transaction ID' of the iDEAL transaction. */
      transaction_identifier?: string;
    };
    IdealMerchantTransactionCreate: {
      /** @description The id of the created item */
      Id?: components["schemas"]["BunqId"];
    };
    IdealMerchantTransactionListing: {
      /** @description The id of the monetary account this ideal merchant transaction links to. */
      monetary_account_id?: number;
      /** @description The alias of the monetary account to add money to. */
      alias?: components["schemas"]["LabelMonetaryAccount"];
      /** @description The alias of the monetary account the money comes from. */
      counterparty_alias?: components["schemas"]["LabelMonetaryAccount"];
      /** @description In case of a successful transaction, the amount of money that will be transferred. */
      amount_guaranteed?: components["schemas"]["Amount"];
      /** @description The requested amount of money to add. */
      amount_requested?: components["schemas"]["Amount"];
      /** @description When the transaction will expire. */
      expiration?: string;
      /** @description The BIC of the issuer. */
      issuer?: string;
      /** @description The Name of the issuer. */
      issuer_name?: string;
      /** @description The URL to visit to */
      issuer_authentication_url?: string;
      /** @description The 'purchase ID' of the iDEAL transaction. */
      purchase_identifier?: string;
      /** @description The status of the transaction. */
      status?: string;
      /** @description When the status was last updated. */
      status_timestamp?: string;
      /** @description The 'transaction ID' of the iDEAL transaction. */
      transaction_identifier?: string;
    };
    IdealMerchantTransactionRead: {
      /** @description The id of the monetary account this ideal merchant transaction links to. */
      monetary_account_id?: number;
      /** @description The alias of the monetary account to add money to. */
      alias?: components["schemas"]["LabelMonetaryAccount"];
      /** @description The alias of the monetary account the money comes from. */
      counterparty_alias?: components["schemas"]["LabelMonetaryAccount"];
      /** @description In case of a successful transaction, the amount of money that will be transferred. */
      amount_guaranteed?: components["schemas"]["Amount"];
      /** @description The requested amount of money to add. */
      amount_requested?: components["schemas"]["Amount"];
      /** @description When the transaction will expire. */
      expiration?: string;
      /** @description The BIC of the issuer. */
      issuer?: string;
      /** @description The Name of the issuer. */
      issuer_name?: string;
      /** @description The URL to visit to */
      issuer_authentication_url?: string;
      /** @description The 'purchase ID' of the iDEAL transaction. */
      purchase_identifier?: string;
      /** @description The status of the transaction. */
      status?: string;
      /** @description When the status was last updated. */
      status_timestamp?: string;
      /** @description The 'transaction ID' of the iDEAL transaction. */
      transaction_identifier?: string;
    };
    Image: {
      /** @description The public UUID of the public attachment containing the image. */
      attachment_public_uuid?: string;
      /** @description The content-type as a MIME filetype. */
      content_type?: string;
      /** @description The image height in pixels. */
      height?: number;
      /** @description The image width in pixels. */
      width?: number;
    };
    InsightEventListing: {
      /** @description The id of the event. */
      id?: number;
      /** @description The timestamp of the event's creation. */
      created?: string;
      /** @description The timestamp of the event's last update. */
      updated?: string;
      /** @description The performed action. Can be: CREATE or UPDATE. */
      action?: string;
      /** @description The id of the user the event applied to (if it was a user event). */
      user_id?: string;
      /** @description The id of the monetary account the event applied to (if it was a monetary account event). */
      monetary_account_id?: string;
      /** @description The details of the external object the event was created for. */
      object?: components["schemas"]["EventObject"];
      /** @description The event status. Can be: FINALIZED or AWAITING_REPLY. An example of FINALIZED event is a payment received event, while an AWAITING_REPLY event is a request received event. */
      status?: string;
    };
    InsightListing: {
      /** @description The category. */
      category?: string;
      /** @description The translated category. */
      category_translated?: string;
      /** @description The color of the category. */
      category_color?: string;
      /** @description The icon of the category. */
      category_icon?: string;
      /** @description The total amount of the transactions in the category. */
      amount_total?: components["schemas"]["Amount"];
      /** @description The number of the transactions in the category. */
      number_of_transactions?: number;
    };
    InsightPreferenceDateListing: {
      /** @description The day of month at which budgeting/insights should start. */
      day_of_month?: number;
    };
    Installation: {
      /** @description Your public key. This is the public part of the key pair that you are going to use to create value of the "X-Bunq-Client-Signature" header for all future API calls. */
      client_public_key: string;
    };
    InstallationCreate: {
      /** @description The Id object of the created Installation */
      Id?: components["schemas"]["BunqId"];
      /** @description The Token object of this Installation. */
      Token?: components["schemas"]["InstallationToken"];
      /** @description The ServerPublicKey object of the created Installation */
      ServerPublicKey?: components["schemas"]["InstallationServerPublicKey"];
    };
    InstallationListing: {
      /** @description The id of the Installation as created on the server. You can use this id to request the server's public key again. */
      id?: number;
    };
    InstallationRead: {
      /** @description The id of the Installation as created on the server. You can use this id to request the server's public key again. */
      id?: number;
    };
    InstallationServerPublicKey: {
      /** @description The server's public key for this Installation. You should use this key to verify the "X-Bunq-Server-Signature" header for each response from the server. */
      server_public_key?: string;
    };
    InstallationServerPublicKeyListing: {
      /** @description The server's public key for this Installation. */
      server_public_key?: string;
    };
    InstallationToken: {
      /** @description The id of the Token. */
      id?: number;
      /** @description The timestamp of the Token's creation. */
      created?: string;
      /** @description The timestamp of the Token's last update. */
      updated?: string;
      /** @description The installation token is the token the client has to provide in the "X-Bunq-Client-Authentication" header for the creation of a DeviceServer and SessionServer. */
      token?: string;
    };
    Invoice: {
      /** @description The invoice status. */
      status?: string;
      /** @description The description provided by the admin. */
      description: string;
      /** @description The external url provided by the admin. */
      external_url: string;
      /** @description The id of the invoice object. */
      id?: number;
      /** @description The timestamp of the invoice object's creation. */
      created?: string;
      /** @description The timestamp of the invoice object's last update. */
      updated?: string;
      /** @description The invoice date. */
      invoice_date?: string;
      /** @description The invoice number. */
      invoice_number?: string;
      /** @description The category to display to the user. */
      category?: string;
      /** @description The invoice item groups. */
      group?: readonly components["schemas"]["InvoiceItemGroup"][];
      /** @description The total discounted item price including VAT. */
      total_vat_inclusive?: components["schemas"]["Amount"];
      /** @description The total discounted item price excluding VAT. */
      total_vat_exclusive?: components["schemas"]["Amount"];
      /** @description The VAT on the total discounted item price. */
      total_vat?: components["schemas"]["Amount"];
      /** @description The label that's displayed to the counterparty with the invoice. Includes user. */
      alias?: components["schemas"]["LabelMonetaryAccount"];
      /** @description The customer's address. */
      address?: components["schemas"]["Address"];
      /** @description The label of the counterparty of the invoice. Includes user. */
      counterparty_alias?: components["schemas"]["LabelMonetaryAccount"];
      /** @description The company's address. */
      counterparty_address?: components["schemas"]["Address"];
      /** @description The company's chamber of commerce number. */
      chamber_of_commerce_number?: string;
      /** @description The company's chamber of commerce number. */
      vat_number?: string;
      /** @description The reference to the object used for split the bill. Can be RequestInquiry or RequestInquiryBatch */
      request_reference_split_the_bill?: readonly components["schemas"]["RequestInquiryReference"][];
    };
    InvoiceByUserListing: {
      /** @description The id of the invoice object. */
      id?: number;
      /** @description The timestamp of the invoice object's creation. */
      created?: string;
      /** @description The timestamp of the invoice object's last update. */
      updated?: string;
      /** @description The invoice date. */
      invoice_date?: string;
      /** @description The invoice number. */
      invoice_number?: string;
      /** @description The invoice status. */
      status?: string;
      /** @description The invoice item groups. */
      group?: readonly components["schemas"]["InvoiceItemGroup"][];
      /** @description The total discounted item price including VAT. */
      total_vat_inclusive?: components["schemas"]["Amount"];
      /** @description The total discounted item price excluding VAT. */
      total_vat_exclusive?: components["schemas"]["Amount"];
      /** @description The VAT on the total discounted item price. */
      total_vat?: components["schemas"]["Amount"];
      /** @description The label that's displayed to the counterparty with the invoice. Includes user. */
      alias?: components["schemas"]["LabelMonetaryAccount"];
      /** @description The customer's address. */
      address?: components["schemas"]["Address"];
      /** @description The label of the counterparty of the invoice. Includes user. */
      counterparty_alias?: components["schemas"]["LabelMonetaryAccount"];
      /** @description The company's address. */
      counterparty_address?: components["schemas"]["Address"];
      /** @description The company's chamber of commerce number. */
      chamber_of_commerce_number?: string;
      /** @description The company's chamber of commerce number. */
      vat_number?: string;
    };
    InvoiceByUserRead: {
      /** @description The id of the invoice object. */
      id?: number;
      /** @description The timestamp of the invoice object's creation. */
      created?: string;
      /** @description The timestamp of the invoice object's last update. */
      updated?: string;
      /** @description The invoice date. */
      invoice_date?: string;
      /** @description The invoice number. */
      invoice_number?: string;
      /** @description The invoice status. */
      status?: string;
      /** @description The invoice item groups. */
      group?: readonly components["schemas"]["InvoiceItemGroup"][];
      /** @description The total discounted item price including VAT. */
      total_vat_inclusive?: components["schemas"]["Amount"];
      /** @description The total discounted item price excluding VAT. */
      total_vat_exclusive?: components["schemas"]["Amount"];
      /** @description The VAT on the total discounted item price. */
      total_vat?: components["schemas"]["Amount"];
      /** @description The label that's displayed to the counterparty with the invoice. Includes user. */
      alias?: components["schemas"]["LabelMonetaryAccount"];
      /** @description The customer's address. */
      address?: components["schemas"]["Address"];
      /** @description The label of the counterparty of the invoice. Includes user. */
      counterparty_alias?: components["schemas"]["LabelMonetaryAccount"];
      /** @description The company's address. */
      counterparty_address?: components["schemas"]["Address"];
      /** @description The company's chamber of commerce number. */
      chamber_of_commerce_number?: string;
      /** @description The company's chamber of commerce number. */
      vat_number?: string;
    };
    InvoiceExportPdfContentListing: Record<string, never>;
    InvoiceItem: {
      /** @description The id of the invoice item. */
      id?: number;
      /** @description The billing date of the item. */
      billing_date?: string;
      /** @description The price description. */
      type_description?: string;
      /** @description The translated price description. */
      type_description_translated?: string;
      /** @description The unit item price excluding VAT. */
      unit_vat_exclusive?: components["schemas"]["Amount"];
      /** @description The unit item price including VAT. */
      unit_vat_inclusive?: components["schemas"]["Amount"];
      /** @description The VAT tax fraction. */
      vat?: number;
      /** @description The number of items priced. */
      quantity?: number;
      /** @description The item price excluding VAT. */
      total_vat_exclusive?: components["schemas"]["Amount"];
      /** @description The item price including VAT. */
      total_vat_inclusive?: components["schemas"]["Amount"];
    };
    InvoiceItemGroup: {
      /** @description The type of the invoice item group. */
      type?: string;
      /** @description The description of the type of the invoice item group. */
      type_description?: string;
      /** @description The translated description of the type of the invoice item group. */
      type_description_translated?: string;
      /** @description The identifier of the invoice item group. */
      instance_description?: string;
      /** @description The unit item price excluding VAT. */
      product_vat_exclusive?: components["schemas"]["Amount"];
      /** @description The unit item price including VAT. */
      product_vat_inclusive?: components["schemas"]["Amount"];
      /** @description The invoice items in the group. */
      item?: readonly components["schemas"]["InvoiceItem"][];
    };
    InvoiceListing: {
      /** @description The id of the invoice object. */
      id?: number;
      /** @description The timestamp of the invoice object's creation. */
      created?: string;
      /** @description The timestamp of the invoice object's last update. */
      updated?: string;
      /** @description The invoice date. */
      invoice_date?: string;
      /** @description The invoice number. */
      invoice_number?: string;
      /** @description The invoice status. */
      status?: string;
      /** @description The category to display to the user. */
      category?: string;
      /** @description The invoice item groups. */
      group?: readonly components["schemas"]["InvoiceItemGroup"][];
      /** @description The total discounted item price including VAT. */
      total_vat_inclusive?: components["schemas"]["Amount"];
      /** @description The total discounted item price excluding VAT. */
      total_vat_exclusive?: components["schemas"]["Amount"];
      /** @description The VAT on the total discounted item price. */
      total_vat?: components["schemas"]["Amount"];
      /** @description The label that's displayed to the counterparty with the invoice. Includes user. */
      alias?: components["schemas"]["LabelMonetaryAccount"];
      /** @description The customer's address. */
      address?: components["schemas"]["Address"];
      /** @description The label of the counterparty of the invoice. Includes user. */
      counterparty_alias?: components["schemas"]["LabelMonetaryAccount"];
      /** @description The company's address. */
      counterparty_address?: components["schemas"]["Address"];
      /** @description The company's chamber of commerce number. */
      chamber_of_commerce_number?: string;
      /** @description The company's chamber of commerce number. */
      vat_number?: string;
      /** @description The reference to the object used for split the bill. Can be RequestInquiry or RequestInquiryBatch */
      request_reference_split_the_bill?: readonly components["schemas"]["RequestInquiryReference"][];
    };
    InvoiceRead: {
      /** @description The id of the invoice object. */
      id?: number;
      /** @description The timestamp of the invoice object's creation. */
      created?: string;
      /** @description The timestamp of the invoice object's last update. */
      updated?: string;
      /** @description The invoice date. */
      invoice_date?: string;
      /** @description The invoice number. */
      invoice_number?: string;
      /** @description The invoice status. */
      status?: string;
      /** @description The category to display to the user. */
      category?: string;
      /** @description The invoice item groups. */
      group?: readonly components["schemas"]["InvoiceItemGroup"][];
      /** @description The total discounted item price including VAT. */
      total_vat_inclusive?: components["schemas"]["Amount"];
      /** @description The total discounted item price excluding VAT. */
      total_vat_exclusive?: components["schemas"]["Amount"];
      /** @description The VAT on the total discounted item price. */
      total_vat?: components["schemas"]["Amount"];
      /** @description The label that's displayed to the counterparty with the invoice. Includes user. */
      alias?: components["schemas"]["LabelMonetaryAccount"];
      /** @description The customer's address. */
      address?: components["schemas"]["Address"];
      /** @description The label of the counterparty of the invoice. Includes user. */
      counterparty_alias?: components["schemas"]["LabelMonetaryAccount"];
      /** @description The company's address. */
      counterparty_address?: components["schemas"]["Address"];
      /** @description The company's chamber of commerce number. */
      chamber_of_commerce_number?: string;
      /** @description The company's chamber of commerce number. */
      vat_number?: string;
      /** @description The reference to the object used for split the bill. Can be RequestInquiry or RequestInquiryBatch */
      request_reference_split_the_bill?: readonly components["schemas"]["RequestInquiryReference"][];
    };
    Issuer: {
      /** @description The BIC code. */
      bic?: string;
      /** @description The name of the bank. */
      name?: string;
    };
    LabelCard: {
      /** @description The public UUID. */
      uuid?: string;
      /** @description The type of the card. */
      type?: string;
      /** @description The second line on the card. */
      second_line?: string;
      /** @description The date this card will expire. */
      expiry_date?: string;
      /** @description The status of the card. */
      status?: string;
      /** @description The owner of this card. */
      label_user?: components["schemas"]["LabelUser"];
    };
    LabelMonetaryAccount: {
      /** @description The IBAN of the monetary account. */
      iban?: string;
      /** @description The name to display with this monetary account. */
      display_name?: string;
      /** @description The avatar of the monetary account. */
      avatar?: components["schemas"]["Avatar"];
      /** @description The user this monetary account belongs to. */
      label_user?: components["schemas"]["LabelUser"];
      /** @description The country of the user. Formatted as a ISO 3166-1 alpha-2 country code. */
      country?: string;
      /** @description Bunq.me pointer with type and value. */
      bunq_me?: components["schemas"]["Pointer"];
      /** @description Whether or not the monetary account is light. */
      is_light?: boolean;
      /** @description The BIC used for a SWIFT payment. */
      swift_bic?: string;
      /** @description The account number used for a SWIFT payment. May or may not be an IBAN. */
      swift_account_number?: string;
      /** @description The account number used for a Transferwise payment. May or may not be an IBAN. */
      transferwise_account_number?: string;
      /** @description The bank code used for a Transferwise payment. May or may not be a BIC. */
      transferwise_bank_code?: string;
      /** @description The merchant category code. */
      merchant_category_code?: string;
    };
    LabelUser: {
      /** @description The public UUID of the label-user. */
      uuid?: string;
      /** @description The name to be displayed for this user, as it was given on the request. */
      display_name?: string;
      /** @description The country of the user. 000 stands for "unknown" */
      country?: string;
      /** @description The current avatar of the user. */
      avatar?: components["schemas"]["Avatar"];
      /** @description The current nickname of the user. */
      public_nick_name?: string;
    };
    MasterCardAction: {
      /** @description The id of the MastercardAction. */
      id?: number;
      /** @description The id of the monetary account this action links to. */
      monetary_account_id?: number;
      /** @description The id of the card this action links to. */
      card_id?: number;
      /** @description The amount of the transaction in local currency. */
      amount_local?: components["schemas"]["Amount"];
      /** @description The amount of the transaction in local currency. */
      amount_converted?: components["schemas"]["Amount"];
      /** @description The amount of the transaction in the monetary account's currency. */
      amount_billing?: components["schemas"]["Amount"];
      /** @description The original amount in local currency. */
      amount_original_local?: components["schemas"]["Amount"];
      /** @description The original amount in the monetary account's currency. */
      amount_original_billing?: components["schemas"]["Amount"];
      /** @description The fee amount as charged by the merchant, if applicable. */
      amount_fee?: components["schemas"]["Amount"];
      /** @description The response code by which authorised transaction can be identified as authorised by bunq. */
      card_authorisation_id_response?: string;
      /** @description Why the transaction was denied, if it was denied, or just ALLOWED. */
      decision?: string;
      /** @description The payment status of the transaction. For example PAYMENT_SUCCESSFUL, for a successful payment. */
      payment_status?: string;
      /** @description Empty if allowed, otherwise a textual explanation of why it was denied. */
      decision_description?: string;
      /** @description Empty if allowed, otherwise a textual explanation of why it was denied in user's language. */
      decision_description_translated?: string;
      /** @description Empty if allowed or if no relevant Together topic exists, otherwise contains the URL for a Together topic with more information about the decision. */
      decision_together_url?: string;
      /** @description The description for this transaction to display. */
      description?: string;
      /** @description The status in the authorisation process. */
      authorisation_status?: string;
      /** @description The type of transaction that was delivered using the card. */
      authorisation_type?: string;
      /** @description The type of entry mode the user used. Can be 'ATM', 'ICC', 'MAGNETIC_STRIPE' or 'E_COMMERCE'. */
      pan_entry_mode_user?: string;
      /** @description The setlement status in the authorisation process. */
      settlement_status?: string;
      /** @description The clearing status of the authorisation. Can be 'PENDING', 'FIRST_PRESENTMENT_COMPLETE' or 'REFUND_LENIENCY'. */
      clearing_status?: string;
      /** @description The maturity date. */
      maturity_date?: string;
      /** @description The city where the message originates from as announced by the terminal. */
      city?: string;
      /** @description The monetary account label of the account that this action is created for. */
      alias?: components["schemas"]["LabelMonetaryAccount"];
      /** @description The monetary account label of the counterparty. */
      counterparty_alias?: components["schemas"]["LabelMonetaryAccount"];
      /** @description The label of the card. */
      label_card?: components["schemas"]["LabelCard"];
      /** @description The identification string of the merchant. */
      merchant_id?: string;
      /** @description If this is a tokenisation action, this shows the status of the token. */
      token_status?: string;
      /** @description If this is a reservation, the moment the reservation will expire. */
      reservation_expiry_time?: string;
      /** @description The time when the processing of the clearing is expired, refunding the authorisation. */
      clearing_expiry_time?: string;
      /** @description The type of the limit applied to validate if this MasterCardAction was within the spending limits. The returned string matches the limit types as defined in the card endpoint. */
      applied_limit?: string;
      /** @description The secure code id for this mastercard action or null. */
      secure_code_id?: number;
      /** @description The ID of the wallet provider as defined by MasterCard. 420 = bunq Android app with Tap&Pay; 103 = Apple Pay. */
      wallet_provider_id?: string;
      /** @description The reference to the object used for split the bill. Can be RequestInquiry or RequestInquiryBatch */
      request_reference_split_the_bill?: readonly components["schemas"]["RequestInquiryReference"][];
      /** @description A reference to the Refunds if they exist. */
      all_mastercard_action_refund?: readonly components["schemas"]["MasterCardActionRefund"][];
      /** @description The Card Presence type of the POS. */
      pos_card_presence?: string;
      /** @description The Card Holder Presence type of the POS. */
      pos_card_holder_presence?: string;
      /** @description The whitelist id for this action or null. */
      eligible_whitelist_id?: number;
      /** @description The cashback payout item for this action or null */
      cashback_payout_item?: components["schemas"]["CashbackPayoutItem"];
      /** @description The blacklist enabled for the merchant of this transaction */
      blacklist?: components["schemas"]["UserBlacklistMasterCardMerchant"];
      /** @description The status of the additional authentication performed (3ds) by the user for this transaction. */
      additional_authentication_status?: string;
      /** @description Status checking the provided PIN. */
      pin_status?: string;
      /** @description The report for this transaction */
      mastercard_action_report?: components["schemas"]["MasterCardActionReport"];
      /** @description The MCC provided. */
      merchant_category_code?: string;
    };
    MasterCardActionListing: {
      /** @description The id of the MastercardAction. */
      id?: number;
      /** @description The id of the monetary account this action links to. */
      monetary_account_id?: number;
      /** @description The id of the card this action links to. */
      card_id?: number;
      /** @description The amount of the transaction in local currency. */
      amount_local?: components["schemas"]["Amount"];
      /** @description The amount of the transaction in local currency. */
      amount_converted?: components["schemas"]["Amount"];
      /** @description The amount of the transaction in the monetary account's currency. */
      amount_billing?: components["schemas"]["Amount"];
      /** @description The original amount in local currency. */
      amount_original_local?: components["schemas"]["Amount"];
      /** @description The original amount in the monetary account's currency. */
      amount_original_billing?: components["schemas"]["Amount"];
      /** @description The fee amount as charged by the merchant, if applicable. */
      amount_fee?: components["schemas"]["Amount"];
      /** @description The response code by which authorised transaction can be identified as authorised by bunq. */
      card_authorisation_id_response?: string;
      /** @description Why the transaction was denied, if it was denied, or just ALLOWED. */
      decision?: string;
      /** @description The payment status of the transaction. For example PAYMENT_SUCCESSFUL, for a successful payment. */
      payment_status?: string;
      /** @description Empty if allowed, otherwise a textual explanation of why it was denied. */
      decision_description?: string;
      /** @description Empty if allowed, otherwise a textual explanation of why it was denied in user's language. */
      decision_description_translated?: string;
      /** @description Empty if allowed or if no relevant Together topic exists, otherwise contains the URL for a Together topic with more information about the decision. */
      decision_together_url?: string;
      /** @description The description for this transaction to display. */
      description?: string;
      /** @description The status in the authorisation process. */
      authorisation_status?: string;
      /** @description The type of transaction that was delivered using the card. */
      authorisation_type?: string;
      /** @description The type of entry mode the user used. Can be 'ATM', 'ICC', 'MAGNETIC_STRIPE' or 'E_COMMERCE'. */
      pan_entry_mode_user?: string;
      /** @description The setlement status in the authorisation process. */
      settlement_status?: string;
      /** @description The clearing status of the authorisation. Can be 'PENDING', 'FIRST_PRESENTMENT_COMPLETE' or 'REFUND_LENIENCY'. */
      clearing_status?: string;
      /** @description The maturity date. */
      maturity_date?: string;
      /** @description The city where the message originates from as announced by the terminal. */
      city?: string;
      /** @description The monetary account label of the account that this action is created for. */
      alias?: components["schemas"]["LabelMonetaryAccount"];
      /** @description The monetary account label of the counterparty. */
      counterparty_alias?: components["schemas"]["LabelMonetaryAccount"];
      /** @description The label of the card. */
      label_card?: components["schemas"]["LabelCard"];
      /** @description The identification string of the merchant. */
      merchant_id?: string;
      /** @description If this is a tokenisation action, this shows the status of the token. */
      token_status?: string;
      /** @description If this is a reservation, the moment the reservation will expire. */
      reservation_expiry_time?: string;
      /** @description The time when the processing of the clearing is expired, refunding the authorisation. */
      clearing_expiry_time?: string;
      /** @description The type of the limit applied to validate if this MasterCardAction was within the spending limits. The returned string matches the limit types as defined in the card endpoint. */
      applied_limit?: string;
      /** @description The secure code id for this mastercard action or null. */
      secure_code_id?: number;
      /** @description The ID of the wallet provider as defined by MasterCard. 420 = bunq Android app with Tap&Pay; 103 = Apple Pay. */
      wallet_provider_id?: string;
      /** @description The reference to the object used for split the bill. Can be RequestInquiry or RequestInquiryBatch */
      request_reference_split_the_bill?: readonly components["schemas"]["RequestInquiryReference"][];
      /** @description A reference to the Refunds if they exist. */
      all_mastercard_action_refund?: readonly components["schemas"]["MasterCardActionRefund"][];
      /** @description The Card Presence type of the POS. */
      pos_card_presence?: string;
      /** @description The Card Holder Presence type of the POS. */
      pos_card_holder_presence?: string;
      /** @description The whitelist id for this action or null. */
      eligible_whitelist_id?: number;
      /** @description The cashback payout item for this action or null */
      cashback_payout_item?: components["schemas"]["CashbackPayoutItem"];
      /** @description The blacklist enabled for the merchant of this transaction */
      blacklist?: components["schemas"]["UserBlacklistMasterCardMerchant"];
      /** @description The status of the additional authentication performed (3ds) by the user for this transaction. */
      additional_authentication_status?: string;
      /** @description Status checking the provided PIN. */
      pin_status?: string;
      /** @description The report for this transaction */
      mastercard_action_report?: components["schemas"]["MasterCardActionReport"];
      /** @description The MCC provided. */
      merchant_category_code?: string;
    };
    MasterCardActionRead: {
      /** @description The id of the MastercardAction. */
      id?: number;
      /** @description The id of the monetary account this action links to. */
      monetary_account_id?: number;
      /** @description The id of the card this action links to. */
      card_id?: number;
      /** @description The amount of the transaction in local currency. */
      amount_local?: components["schemas"]["Amount"];
      /** @description The amount of the transaction in local currency. */
      amount_converted?: components["schemas"]["Amount"];
      /** @description The amount of the transaction in the monetary account's currency. */
      amount_billing?: components["schemas"]["Amount"];
      /** @description The original amount in local currency. */
      amount_original_local?: components["schemas"]["Amount"];
      /** @description The original amount in the monetary account's currency. */
      amount_original_billing?: components["schemas"]["Amount"];
      /** @description The fee amount as charged by the merchant, if applicable. */
      amount_fee?: components["schemas"]["Amount"];
      /** @description The response code by which authorised transaction can be identified as authorised by bunq. */
      card_authorisation_id_response?: string;
      /** @description Why the transaction was denied, if it was denied, or just ALLOWED. */
      decision?: string;
      /** @description The payment status of the transaction. For example PAYMENT_SUCCESSFUL, for a successful payment. */
      payment_status?: string;
      /** @description Empty if allowed, otherwise a textual explanation of why it was denied. */
      decision_description?: string;
      /** @description Empty if allowed, otherwise a textual explanation of why it was denied in user's language. */
      decision_description_translated?: string;
      /** @description Empty if allowed or if no relevant Together topic exists, otherwise contains the URL for a Together topic with more information about the decision. */
      decision_together_url?: string;
      /** @description The description for this transaction to display. */
      description?: string;
      /** @description The status in the authorisation process. */
      authorisation_status?: string;
      /** @description The type of transaction that was delivered using the card. */
      authorisation_type?: string;
      /** @description The type of entry mode the user used. Can be 'ATM', 'ICC', 'MAGNETIC_STRIPE' or 'E_COMMERCE'. */
      pan_entry_mode_user?: string;
      /** @description The setlement status in the authorisation process. */
      settlement_status?: string;
      /** @description The clearing status of the authorisation. Can be 'PENDING', 'FIRST_PRESENTMENT_COMPLETE' or 'REFUND_LENIENCY'. */
      clearing_status?: string;
      /** @description The maturity date. */
      maturity_date?: string;
      /** @description The city where the message originates from as announced by the terminal. */
      city?: string;
      /** @description The monetary account label of the account that this action is created for. */
      alias?: components["schemas"]["LabelMonetaryAccount"];
      /** @description The monetary account label of the counterparty. */
      counterparty_alias?: components["schemas"]["LabelMonetaryAccount"];
      /** @description The label of the card. */
      label_card?: components["schemas"]["LabelCard"];
      /** @description The identification string of the merchant. */
      merchant_id?: string;
      /** @description If this is a tokenisation action, this shows the status of the token. */
      token_status?: string;
      /** @description If this is a reservation, the moment the reservation will expire. */
      reservation_expiry_time?: string;
      /** @description The time when the processing of the clearing is expired, refunding the authorisation. */
      clearing_expiry_time?: string;
      /** @description The type of the limit applied to validate if this MasterCardAction was within the spending limits. The returned string matches the limit types as defined in the card endpoint. */
      applied_limit?: string;
      /** @description The secure code id for this mastercard action or null. */
      secure_code_id?: number;
      /** @description The ID of the wallet provider as defined by MasterCard. 420 = bunq Android app with Tap&Pay; 103 = Apple Pay. */
      wallet_provider_id?: string;
      /** @description The reference to the object used for split the bill. Can be RequestInquiry or RequestInquiryBatch */
      request_reference_split_the_bill?: readonly components["schemas"]["RequestInquiryReference"][];
      /** @description A reference to the Refunds if they exist. */
      all_mastercard_action_refund?: readonly components["schemas"]["MasterCardActionRefund"][];
      /** @description The Card Presence type of the POS. */
      pos_card_presence?: string;
      /** @description The Card Holder Presence type of the POS. */
      pos_card_holder_presence?: string;
      /** @description The whitelist id for this action or null. */
      eligible_whitelist_id?: number;
      /** @description The cashback payout item for this action or null */
      cashback_payout_item?: components["schemas"]["CashbackPayoutItem"];
      /** @description The blacklist enabled for the merchant of this transaction */
      blacklist?: components["schemas"]["UserBlacklistMasterCardMerchant"];
      /** @description The status of the additional authentication performed (3ds) by the user for this transaction. */
      additional_authentication_status?: string;
      /** @description Status checking the provided PIN. */
      pin_status?: string;
      /** @description The report for this transaction */
      mastercard_action_report?: components["schemas"]["MasterCardActionReport"];
      /** @description The MCC provided. */
      merchant_category_code?: string;
    };
    MasterCardActionReference: {
      /** @description The id of the event. */
      event_id?: number;
    };
    MasterCardActionRefund: {
      /** @description Type of this refund. Can de REFUND or CHARGEBACK */
      type?: string;
      /** @description The sub type of this refund indicating whether the chargeback will be FULL or PARTIAL. */
      sub_type?: string;
      /** @description The amount to refund. */
      amount?: components["schemas"]["Amount"];
      /** @description The category of the refund, required for chargeback. */
      category?: string;
      /** @description The reason of the refund. Can be REFUND_EXPIRED_TRANSACTION, REFUND_REQUESTED, REFUND_MERCHANT, REFUND_CHARGEBACK. */
      reason?: string;
      /** @description Comment about the refund. */
      comment?: string;
      /** @description The Attachments to attach to the refund request. */
      attachment?: components["schemas"]["AttachmentMasterCardActionRefund"][];
      /** @description Proof that the user acknowledged the terms and conditions for chargebacks. */
      terms_and_conditions?: string;
      /** @description The id of the refund. */
      id?: number;
      /** @description The timestamp of the refund's creation. */
      created?: string;
      /** @description The timestamp of the refund's last update. */
      updated?: string;
      /** @description The label of the user who created this note. */
      label_user_creator?: components["schemas"]["LabelUser"];
      /** @description The status of the refunded mastercard action. Can be AUTO_APPROVED, AUTO_APPROVED_WAITING_FOR_EXPIRY, PENDING_APPROVAL, APPROVED, REFUNDED, DENIED or FAILED */
      status?: string;
      /** @description The reference to the object this refund applies to. */
      reference_mastercard_action_event?: readonly components["schemas"]["MasterCardActionReference"][];
      /** @description The id of mastercard action being refunded. */
      mastercard_action_id?: number;
      /** @description The monetary account label of the account that this action is created for. */
      alias?: components["schemas"]["LabelMonetaryAccount"];
      /** @description The monetary account label of the counterparty. */
      counterparty_alias?: components["schemas"]["LabelMonetaryAccount"];
      /** @description The description for this transaction to display. */
      description?: string;
      /** @description The label of the card. */
      label_card?: components["schemas"]["LabelCard"];
      /** @description The time the refund will take place. */
      time_refund?: string;
      /** @description All additional information provided by the user. */
      additional_information?: components["schemas"]["AdditionalInformation"];
      /** @description Description of the refund's current status. */
      status_description?: string;
      /** @description Description of the refund's current status, translated in user's language. */
      status_description_translated?: string;
      /** @description Together topic concerning the refund's current status. */
      status_together_url?: string;
    };
    MasterCardActionReport: {
      /** @description The id of mastercard action being reported. */
      mastercard_action_id?: number;
      /** @description The id of mastercard action being reported. */
      type?: string;
      /** @description The id of mastercard action being reported. */
      status?: string;
      /** @description The reported merchant. */
      merchant_id?: string;
      /** @description The name of the merchant. */
      merchant_name?: string;
      /** @description The monetary account label of the merchant. */
      counterparty_alias?: components["schemas"]["LabelMonetaryAccount"];
    };
    MasterCardIdentityCheckChallengeRequestUser: {
      /** @description The status of the identity check. Can be ACCEPTED_PENDING_RESPONSE or REJECTED_PENDING_RESPONSE. */
      status: string;
    };
    MasterCardIdentityCheckChallengeRequestUserRead: {
      /** @description The transaction amount. */
      amount?: string;
      /** @description When the identity check expires. */
      expiry_time?: string;
      /** @description The description of the purchase. NULL if no description is given. */
      description?: string;
      /** @description The status of the secure code. Can be PENDING, ACCEPTED, REJECTED, EXPIRED. */
      status?: string;
      /** @description Textual explanation of the decision. */
      decision_description?: string;
      /** @description Textual explanation of the decision in user's language. */
      decision_description_translated?: string;
      /** @description The return url for the merchant app after the challenge is accepted or rejected. */
      url_merchant_app?: string;
      /** @description The monetary account label of the counterparty. */
      counterparty_alias?: components["schemas"]["LabelMonetaryAccount"];
      /** @description The ID of the latest event for the identity check. */
      event_id?: number;
    };
    MasterCardIdentityCheckChallengeRequestUserUpdate: {
      /** @description The id of the created item */
      Id?: components["schemas"]["BunqId"];
    };
    MasterCardPaymentListing: Record<string, never>;
    MonetaryAccount: {
      MonetaryAccountBank?: components["schemas"]["MonetaryAccountBank"];
      MonetaryAccountJoint?: components["schemas"]["MonetaryAccountJoint"];
      MonetaryAccountLight?: components["schemas"]["MonetaryAccountLight"];
      MonetaryAccountSavings?: components["schemas"]["MonetaryAccountSavings"];
      MonetaryAccountExternal?: components["schemas"]["MonetaryAccountExternal"];
      MonetaryAccountInvestment?: components["schemas"]["MonetaryAccountInvestment"];
      MonetaryAccountExternalSavings?: components["schemas"]["MonetaryAccountExternalSavings"];
    };
    MonetaryAccountBank: {
      /** @description The currency of the MonetaryAccountBank as an ISO 4217 formatted currency code. */
      currency?: string;
      /** @description The description of the MonetaryAccountBank. Defaults to 'bunq account'. */
      description?: string;
      /** @description The daily spending limit Amount of the MonetaryAccountBank. Defaults to 1000 EUR. Currency must match the MonetaryAccountBank's currency. Limited to 10000 EUR. */
      daily_limit?: components["schemas"]["Amount"];
      /** @description The UUID of the Avatar of the MonetaryAccountBank. */
      avatar_uuid?: string;
      /** @description The status of the MonetaryAccountBank. Can be: ACTIVE, BLOCKED, CANCELLED or PENDING_REOPEN */
      status?: string;
      /** @description The sub-status of the MonetaryAccountBank providing extra information regarding the status. Will be NONE for ACTIVE or PENDING_REOPEN, COMPLETELY or ONLY_ACCEPTING_INCOMING for BLOCKED and REDEMPTION_INVOLUNTARY, REDEMPTION_VOLUNTARY or PERMANENT for CANCELLED. */
      sub_status?: string;
      /** @description The reason for voluntarily cancelling (closing) the MonetaryAccountBank, can only be OTHER. */
      reason?: string;
      /** @description The optional free-form reason for voluntarily cancelling (closing) the MonetaryAccountBank. Can be any user provided message. */
      reason_description?: string;
      /** @description The legal name of the user / company using this monetary account. */
      display_name?: string;
      /** @description The settings of the MonetaryAccountBank. */
      setting?: components["schemas"]["MonetaryAccountSetting"];
      /** @description The country of the monetary account IBAN. */
      country_iban?: string;
      /** @description The id of the MonetaryAccountBank. */
      id?: number;
      /** @description The timestamp of the MonetaryAccountBank's creation. */
      created?: string;
      /** @description The timestamp of the MonetaryAccountBank's last update. */
      updated?: string;
      /** @description The Avatar of the MonetaryAccountBank. */
      avatar?: components["schemas"]["Avatar"];
      /** @description The maximum Amount the MonetaryAccountBank can be 'in the red'. */
      overdraft_limit?: components["schemas"]["Amount"];
      /** @description The current available balance Amount of the MonetaryAccountBank. */
      balance?: components["schemas"]["Amount"];
      /** @description The Aliases for the MonetaryAccountBank. */
      alias?: readonly components["schemas"]["Pointer"][];
      /** @description The MonetaryAccountBank's public UUID. */
      public_uuid?: string;
      /** @description The id of the User who owns the MonetaryAccountBank. */
      user_id?: number;
      /** @description The profile of the account. */
      monetary_account_profile?: components["schemas"]["MonetaryAccountProfile"];
      /** @description The ids of the AutoSave. */
      all_auto_save_id?: readonly components["schemas"]["BunqId"][];
    };
    MonetaryAccountBankCreate: {
      /** @description The id of the created item */
      Id?: components["schemas"]["BunqId"];
    };
    MonetaryAccountBankListing: {
      /** @description The id of the MonetaryAccountBank. */
      id?: number;
      /** @description The timestamp of the MonetaryAccountBank's creation. */
      created?: string;
      /** @description The timestamp of the MonetaryAccountBank's last update. */
      updated?: string;
      /** @description The Avatar of the MonetaryAccountBank. */
      avatar?: components["schemas"]["Avatar"];
      /** @description The currency of the MonetaryAccountBank as an ISO 4217 formatted currency code. */
      currency?: string;
      /** @description The description of the MonetaryAccountBank. Defaults to 'bunq account'. */
      description?: string;
      /** @description The daily spending limit Amount of the MonetaryAccountBank. Defaults to 1000 EUR. Currency must match the MonetaryAccountBank's currency. Limited to 10000 EUR. */
      daily_limit?: components["schemas"]["Amount"];
      /** @description The maximum Amount the MonetaryAccountBank can be 'in the red'. */
      overdraft_limit?: components["schemas"]["Amount"];
      /** @description The current available balance Amount of the MonetaryAccountBank. */
      balance?: components["schemas"]["Amount"];
      /** @description The Aliases for the MonetaryAccountBank. */
      alias?: readonly components["schemas"]["Pointer"][];
      /** @description The MonetaryAccountBank's public UUID. */
      public_uuid?: string;
      /** @description The status of the MonetaryAccountBank. Can be: ACTIVE, BLOCKED, CANCELLED or PENDING_REOPEN */
      status?: string;
      /** @description The sub-status of the MonetaryAccountBank providing extra information regarding the status. Will be NONE for ACTIVE or PENDING_REOPEN, COMPLETELY or ONLY_ACCEPTING_INCOMING for BLOCKED and REDEMPTION_INVOLUNTARY, REDEMPTION_VOLUNTARY or PERMANENT for CANCELLED. */
      sub_status?: string;
      /** @description The reason for voluntarily cancelling (closing) the MonetaryAccountBank, can only be OTHER. */
      reason?: string;
      /** @description The optional free-form reason for voluntarily cancelling (closing) the MonetaryAccountBank. Can be any user provided message. */
      reason_description?: string;
      /** @description The id of the User who owns the MonetaryAccountBank. */
      user_id?: number;
      /** @description The profile of the account. */
      monetary_account_profile?: components["schemas"]["MonetaryAccountProfile"];
      /** @description The legal name of the user / company using this monetary account. */
      display_name?: string;
      /** @description The settings of the MonetaryAccountBank. */
      setting?: components["schemas"]["MonetaryAccountSetting"];
      /** @description The ids of the AutoSave. */
      all_auto_save_id?: readonly components["schemas"]["BunqId"][];
    };
    MonetaryAccountBankRead: {
      /** @description The id of the MonetaryAccountBank. */
      id?: number;
      /** @description The timestamp of the MonetaryAccountBank's creation. */
      created?: string;
      /** @description The timestamp of the MonetaryAccountBank's last update. */
      updated?: string;
      /** @description The Avatar of the MonetaryAccountBank. */
      avatar?: components["schemas"]["Avatar"];
      /** @description The currency of the MonetaryAccountBank as an ISO 4217 formatted currency code. */
      currency?: string;
      /** @description The description of the MonetaryAccountBank. Defaults to 'bunq account'. */
      description?: string;
      /** @description The daily spending limit Amount of the MonetaryAccountBank. Defaults to 1000 EUR. Currency must match the MonetaryAccountBank's currency. Limited to 10000 EUR. */
      daily_limit?: components["schemas"]["Amount"];
      /** @description The maximum Amount the MonetaryAccountBank can be 'in the red'. */
      overdraft_limit?: components["schemas"]["Amount"];
      /** @description The current available balance Amount of the MonetaryAccountBank. */
      balance?: components["schemas"]["Amount"];
      /** @description The Aliases for the MonetaryAccountBank. */
      alias?: readonly components["schemas"]["Pointer"][];
      /** @description The MonetaryAccountBank's public UUID. */
      public_uuid?: string;
      /** @description The status of the MonetaryAccountBank. Can be: ACTIVE, BLOCKED, CANCELLED or PENDING_REOPEN */
      status?: string;
      /** @description The sub-status of the MonetaryAccountBank providing extra information regarding the status. Will be NONE for ACTIVE or PENDING_REOPEN, COMPLETELY or ONLY_ACCEPTING_INCOMING for BLOCKED and REDEMPTION_INVOLUNTARY, REDEMPTION_VOLUNTARY or PERMANENT for CANCELLED. */
      sub_status?: string;
      /** @description The reason for voluntarily cancelling (closing) the MonetaryAccountBank, can only be OTHER. */
      reason?: string;
      /** @description The optional free-form reason for voluntarily cancelling (closing) the MonetaryAccountBank. Can be any user provided message. */
      reason_description?: string;
      /** @description The id of the User who owns the MonetaryAccountBank. */
      user_id?: number;
      /** @description The profile of the account. */
      monetary_account_profile?: components["schemas"]["MonetaryAccountProfile"];
      /** @description The legal name of the user / company using this monetary account. */
      display_name?: string;
      /** @description The settings of the MonetaryAccountBank. */
      setting?: components["schemas"]["MonetaryAccountSetting"];
      /** @description The ids of the AutoSave. */
      all_auto_save_id?: readonly components["schemas"]["BunqId"][];
    };
    MonetaryAccountBankUpdate: {
      /** @description The id of the created item */
      Id?: components["schemas"]["BunqId"];
    };
    MonetaryAccountCard: Record<string, never>;
    MonetaryAccountCardListing: {
      /** @description The id of the MonetaryAccountCard. */
      id?: number;
      /** @description The timestamp of the MonetaryAccountCard's creation. */
      created?: string;
      /** @description The timestamp of the MonetaryAccountCard's last update. */
      updated?: string;
      /** @description The currency of the MonetaryAccountCard as an ISO 4217 formatted currency code. */
      currency?: string;
      /** @description The description of the MonetaryAccountCard. Defaults to 'prepaid credit card'. */
      description?: string;
      /** @description The daily spending limit Amount of the MonetaryAccountCard. */
      daily_limit?: components["schemas"]["Amount"];
      /** @description The current available balance Amount of the MonetaryAccountCard. */
      balance?: components["schemas"]["Amount"];
      /** @description The Aliases for the MonetaryAccountCard. */
      alias?: readonly components["schemas"]["Pointer"][];
      /** @description The MonetaryAccountCard's public UUID. */
      public_uuid?: string;
      /** @description The status of the MonetaryAccountCard. */
      status?: string;
      /** @description The sub-status of the MonetaryAccountCard providing extra information regarding the status. */
      sub_status?: string;
      /** @description The id of the User who owns the MonetaryAccountCard. */
      user_id?: number;
    };
    MonetaryAccountCardRead: {
      /** @description The id of the MonetaryAccountCard. */
      id?: number;
      /** @description The timestamp of the MonetaryAccountCard's creation. */
      created?: string;
      /** @description The timestamp of the MonetaryAccountCard's last update. */
      updated?: string;
      /** @description The currency of the MonetaryAccountCard as an ISO 4217 formatted currency code. */
      currency?: string;
      /** @description The description of the MonetaryAccountCard. Defaults to 'prepaid credit card'. */
      description?: string;
      /** @description The daily spending limit Amount of the MonetaryAccountCard. */
      daily_limit?: components["schemas"]["Amount"];
      /** @description The current available balance Amount of the MonetaryAccountCard. */
      balance?: components["schemas"]["Amount"];
      /** @description The Aliases for the MonetaryAccountCard. */
      alias?: readonly components["schemas"]["Pointer"][];
      /** @description The MonetaryAccountCard's public UUID. */
      public_uuid?: string;
      /** @description The status of the MonetaryAccountCard. */
      status?: string;
      /** @description The sub-status of the MonetaryAccountCard providing extra information regarding the status. */
      sub_status?: string;
      /** @description The id of the User who owns the MonetaryAccountCard. */
      user_id?: number;
    };
    MonetaryAccountCardUpdate: {
      /** @description The id of the created item */
      Id?: components["schemas"]["BunqId"];
    };
    MonetaryAccountExternal: {
      /** @description The currency of the MonetaryAccountExternal as an ISO 4217 formatted currency code. */
      currency?: string;
      /** @description The service the MonetaryAccountExternal is connected with. */
      service: string;
      /** @description The description of the MonetaryAccountExternal. Defaults to 'bunq account'. */
      description?: string;
      /** @description The daily spending limit Amount of the MonetaryAccountExternal. Defaults to 1000 EUR. Currency must match the MonetaryAccountExternal's currency. Limited to 10000 EUR. */
      daily_limit?: components["schemas"]["Amount"];
      /** @description The UUID of the Avatar of the MonetaryAccountExternal. */
      avatar_uuid?: string;
      /** @description The status of the MonetaryAccountExternal. Can be: ACTIVE, BLOCKED, CANCELLED or PENDING_REOPEN */
      status?: string;
      /** @description The sub-status of the MonetaryAccountExternal providing extra information regarding the status. Will be NONE for ACTIVE or PENDING_REOPEN, COMPLETELY or ONLY_ACCEPTING_INCOMING for BLOCKED and REDEMPTION_INVOLUNTARY, REDEMPTION_VOLUNTARY or PERMANENT for CANCELLED. */
      sub_status?: string;
      /** @description The reason for voluntarily cancelling (closing) the MonetaryAccountExternal, can only be OTHER. */
      reason?: string;
      /** @description The optional free-form reason for voluntarily cancelling (closing) the MonetaryAccountExternal. Can be any user provided message. */
      reason_description?: string;
      /** @description The legal name of the user / company using this monetary account. */
      display_name?: string;
      /** @description The settings of the MonetaryAccountExternal. */
      setting?: components["schemas"]["MonetaryAccountSetting"];
      /** @description The id of the MonetaryAccountExternal. */
      id?: number;
      /** @description The timestamp of the MonetaryAccountExternal's creation. */
      created?: string;
      /** @description The timestamp of the MonetaryAccountExternal's last update. */
      updated?: string;
      /** @description The Avatar of the MonetaryAccountExternal. */
      avatar?: components["schemas"]["Avatar"];
      /** @description The maximum Amount the MonetaryAccountExternal can be 'in the red'. */
      overdraft_limit?: components["schemas"]["Amount"];
      /** @description The current available balance Amount of the MonetaryAccountExternal. */
      balance?: components["schemas"]["Amount"];
      /** @description The Aliases for the MonetaryAccountExternal. */
      alias?: readonly components["schemas"]["Pointer"][];
      /** @description The MonetaryAccountExternal's public UUID. */
      public_uuid?: string;
      /** @description The id of the User who owns the MonetaryAccountExternal. */
      user_id?: number;
      /** @description The profile of the account. */
      monetary_account_profile?: components["schemas"]["MonetaryAccountProfile"];
      /** @description The ids of the AutoSave. */
      all_auto_save_id?: readonly components["schemas"]["BunqId"][];
    };
    MonetaryAccountExternalCreate: {
      /** @description The id of the created item */
      Id?: components["schemas"]["BunqId"];
    };
    MonetaryAccountExternalListing: {
      /** @description The id of the MonetaryAccountExternal. */
      id?: number;
      /** @description The timestamp of the MonetaryAccountExternal's creation. */
      created?: string;
      /** @description The timestamp of the MonetaryAccountExternal's last update. */
      updated?: string;
      /** @description The Avatar of the MonetaryAccountExternal. */
      avatar?: components["schemas"]["Avatar"];
      /** @description The currency of the MonetaryAccountExternal as an ISO 4217 formatted currency code. */
      currency?: string;
      /** @description The description of the MonetaryAccountExternal. Defaults to 'bunq account'. */
      description?: string;
      /** @description The daily spending limit Amount of the MonetaryAccountExternal. Defaults to 1000 EUR. Currency must match the MonetaryAccountExternal's currency. Limited to 10000 EUR. */
      daily_limit?: components["schemas"]["Amount"];
      /** @description The maximum Amount the MonetaryAccountExternal can be 'in the red'. */
      overdraft_limit?: components["schemas"]["Amount"];
      /** @description The current available balance Amount of the MonetaryAccountExternal. */
      balance?: components["schemas"]["Amount"];
      /** @description The Aliases for the MonetaryAccountExternal. */
      alias?: readonly components["schemas"]["Pointer"][];
      /** @description The MonetaryAccountExternal's public UUID. */
      public_uuid?: string;
      /** @description The status of the MonetaryAccountExternal. Can be: ACTIVE, BLOCKED, CANCELLED or PENDING_REOPEN */
      status?: string;
      /** @description The sub-status of the MonetaryAccountExternal providing extra information regarding the status. Will be NONE for ACTIVE or PENDING_REOPEN, COMPLETELY or ONLY_ACCEPTING_INCOMING for BLOCKED and REDEMPTION_INVOLUNTARY, REDEMPTION_VOLUNTARY or PERMANENT for CANCELLED. */
      sub_status?: string;
      /** @description The reason for voluntarily cancelling (closing) the MonetaryAccountExternal, can only be OTHER. */
      reason?: string;
      /** @description The optional free-form reason for voluntarily cancelling (closing) the MonetaryAccountExternal. Can be any user provided message. */
      reason_description?: string;
      /** @description The id of the User who owns the MonetaryAccountExternal. */
      user_id?: number;
      /** @description The profile of the account. */
      monetary_account_profile?: components["schemas"]["MonetaryAccountProfile"];
      /** @description The legal name of the user / company using this monetary account. */
      display_name?: string;
      /** @description The settings of the MonetaryAccountExternal. */
      setting?: components["schemas"]["MonetaryAccountSetting"];
      /** @description The ids of the AutoSave. */
      all_auto_save_id?: readonly components["schemas"]["BunqId"][];
    };
    MonetaryAccountExternalRead: {
      /** @description The id of the MonetaryAccountExternal. */
      id?: number;
      /** @description The timestamp of the MonetaryAccountExternal's creation. */
      created?: string;
      /** @description The timestamp of the MonetaryAccountExternal's last update. */
      updated?: string;
      /** @description The Avatar of the MonetaryAccountExternal. */
      avatar?: components["schemas"]["Avatar"];
      /** @description The currency of the MonetaryAccountExternal as an ISO 4217 formatted currency code. */
      currency?: string;
      /** @description The description of the MonetaryAccountExternal. Defaults to 'bunq account'. */
      description?: string;
      /** @description The daily spending limit Amount of the MonetaryAccountExternal. Defaults to 1000 EUR. Currency must match the MonetaryAccountExternal's currency. Limited to 10000 EUR. */
      daily_limit?: components["schemas"]["Amount"];
      /** @description The maximum Amount the MonetaryAccountExternal can be 'in the red'. */
      overdraft_limit?: components["schemas"]["Amount"];
      /** @description The current available balance Amount of the MonetaryAccountExternal. */
      balance?: components["schemas"]["Amount"];
      /** @description The Aliases for the MonetaryAccountExternal. */
      alias?: readonly components["schemas"]["Pointer"][];
      /** @description The MonetaryAccountExternal's public UUID. */
      public_uuid?: string;
      /** @description The status of the MonetaryAccountExternal. Can be: ACTIVE, BLOCKED, CANCELLED or PENDING_REOPEN */
      status?: string;
      /** @description The sub-status of the MonetaryAccountExternal providing extra information regarding the status. Will be NONE for ACTIVE or PENDING_REOPEN, COMPLETELY or ONLY_ACCEPTING_INCOMING for BLOCKED and REDEMPTION_INVOLUNTARY, REDEMPTION_VOLUNTARY or PERMANENT for CANCELLED. */
      sub_status?: string;
      /** @description The reason for voluntarily cancelling (closing) the MonetaryAccountExternal, can only be OTHER. */
      reason?: string;
      /** @description The optional free-form reason for voluntarily cancelling (closing) the MonetaryAccountExternal. Can be any user provided message. */
      reason_description?: string;
      /** @description The id of the User who owns the MonetaryAccountExternal. */
      user_id?: number;
      /** @description The profile of the account. */
      monetary_account_profile?: components["schemas"]["MonetaryAccountProfile"];
      /** @description The legal name of the user / company using this monetary account. */
      display_name?: string;
      /** @description The settings of the MonetaryAccountExternal. */
      setting?: components["schemas"]["MonetaryAccountSetting"];
      /** @description The ids of the AutoSave. */
      all_auto_save_id?: readonly components["schemas"]["BunqId"][];
    };
    MonetaryAccountExternalSavings: {
      /** @description The currency of the MonetaryAccountExternalSavings as an ISO 4217 formatted currency code. */
      currency?: string;
      /** @description The service the MonetaryAccountExternalSavings is connected with. */
      service: string;
      /** @description The description of the MonetaryAccountExternalSavings. Defaults to 'bunq account'. */
      description?: string;
      /** @description The daily spending limit Amount of the MonetaryAccountExternalSavings. Defaults to 1000 EUR. Currency must match the MonetaryAccountExternalSavings's currency. Limited to 10000 EUR. */
      daily_limit?: components["schemas"]["Amount"];
      /** @description The UUID of the Avatar of the MonetaryAccountExternalSavings. */
      avatar_uuid?: string;
      /** @description The status of the MonetaryAccountExternalSavings. Can be: ACTIVE, BLOCKED, CANCELLED or PENDING_REOPEN */
      status?: string;
      /** @description The sub-status of the MonetaryAccountExternalSavings providing extra information regarding the status. Will be NONE for ACTIVE or PENDING_REOPEN, COMPLETELY or ONLY_ACCEPTING_INCOMING for BLOCKED and REDEMPTION_INVOLUNTARY, REDEMPTION_VOLUNTARY or PERMANENT for CANCELLED. */
      sub_status?: string;
      /** @description The reason for voluntarily cancelling (closing) the MonetaryAccountExternalSavings, can only be OTHER. */
      reason?: string;
      /** @description The optional free-form reason for voluntarily cancelling (closing) the MonetaryAccountExternalSavings. Can be any user provided message. */
      reason_description?: string;
      /** @description The legal name of the user / company using this monetary account. */
      display_name?: string;
      /** @description The settings of the MonetaryAccountExternalSavings. */
      setting?: components["schemas"]["MonetaryAccountSetting"];
      /** @description The Savings Goal set for this MonetaryAccountExternalSavings. */
      savings_goal?: components["schemas"]["Amount"];
      /** @description The id of the MonetaryAccountExternalSavings. */
      id?: number;
      /** @description The timestamp of the MonetaryAccountExternalSavings's creation. */
      created?: string;
      /** @description The timestamp of the MonetaryAccountExternalSavings's last update. */
      updated?: string;
      /** @description The Avatar of the MonetaryAccountExternalSavings. */
      avatar?: components["schemas"]["Avatar"];
      /** @description The current available balance Amount of the MonetaryAccountExternalSavings. */
      balance?: components["schemas"]["Amount"];
      /** @description The Aliases for the MonetaryAccountExternalSavings. */
      alias?: readonly components["schemas"]["Pointer"][];
      /** @description The MonetaryAccountExternalSavings's public UUID. */
      public_uuid?: string;
      /** @description The id of the User who owns the MonetaryAccountExternalSavings. */
      user_id?: number;
      /** @description The profile of the account. */
      monetary_account_profile?: components["schemas"]["MonetaryAccountProfile"];
      /** @description The ids of the AutoSave. */
      all_auto_save_id?: readonly components["schemas"]["BunqId"][];
      /** @description The progress in percentages for the Savings Goal set for this MonetaryAccountExternalSavings. */
      savings_goal_progress?: number;
      /** @description The number of payments that can be made from this savings account */
      number_of_payment_remaining?: string;
    };
    MonetaryAccountExternalSavingsCreate: {
      /** @description The id of the created item */
      Id?: components["schemas"]["BunqId"];
    };
    MonetaryAccountExternalSavingsListing: {
      /** @description The id of the MonetaryAccountExternalSavings. */
      id?: number;
      /** @description The timestamp of the MonetaryAccountExternalSavings's creation. */
      created?: string;
      /** @description The timestamp of the MonetaryAccountExternalSavings's last update. */
      updated?: string;
      /** @description The Avatar of the MonetaryAccountExternalSavings. */
      avatar?: components["schemas"]["Avatar"];
      /** @description The currency of the MonetaryAccountExternalSavings as an ISO 4217 formatted currency code. */
      currency?: string;
      /** @description The description of the MonetaryAccountExternalSavings. Defaults to 'bunq account'. */
      description?: string;
      /** @description The daily spending limit Amount of the MonetaryAccountExternalSavings. Defaults to 1000 EUR. Currency must match the MonetaryAccountExternalSavings's currency. Limited to 10000 EUR. */
      daily_limit?: components["schemas"]["Amount"];
      /** @description The current available balance Amount of the MonetaryAccountExternalSavings. */
      balance?: components["schemas"]["Amount"];
      /** @description The Aliases for the MonetaryAccountExternalSavings. */
      alias?: readonly components["schemas"]["Pointer"][];
      /** @description The MonetaryAccountExternalSavings's public UUID. */
      public_uuid?: string;
      /** @description The status of the MonetaryAccountExternalSavings. Can be: ACTIVE, BLOCKED, CANCELLED or PENDING_REOPEN */
      status?: string;
      /** @description The sub-status of the MonetaryAccountExternalSavings providing extra information regarding the status. Will be NONE for ACTIVE or PENDING_REOPEN, COMPLETELY or ONLY_ACCEPTING_INCOMING for BLOCKED and REDEMPTION_INVOLUNTARY, REDEMPTION_VOLUNTARY or PERMANENT for CANCELLED. */
      sub_status?: string;
      /** @description The reason for voluntarily cancelling (closing) the MonetaryAccountExternalSavings, can only be OTHER. */
      reason?: string;
      /** @description The optional free-form reason for voluntarily cancelling (closing) the MonetaryAccountExternalSavings. Can be any user provided message. */
      reason_description?: string;
      /** @description The id of the User who owns the MonetaryAccountExternalSavings. */
      user_id?: number;
      /** @description The profile of the account. */
      monetary_account_profile?: components["schemas"]["MonetaryAccountProfile"];
      /** @description The legal name of the user / company using this monetary account. */
      display_name?: string;
      /** @description The settings of the MonetaryAccountExternalSavings. */
      setting?: components["schemas"]["MonetaryAccountSetting"];
      /** @description The ids of the AutoSave. */
      all_auto_save_id?: readonly components["schemas"]["BunqId"][];
      /** @description The Savings Goal set for this MonetaryAccountExternalSavings. */
      savings_goal?: components["schemas"]["Amount"];
      /** @description The progress in percentages for the Savings Goal set for this MonetaryAccountExternalSavings. */
      savings_goal_progress?: number;
      /** @description The number of payments that can be made from this savings account */
      number_of_payment_remaining?: string;
    };
    MonetaryAccountExternalSavingsRead: {
      /** @description The id of the MonetaryAccountExternalSavings. */
      id?: number;
      /** @description The timestamp of the MonetaryAccountExternalSavings's creation. */
      created?: string;
      /** @description The timestamp of the MonetaryAccountExternalSavings's last update. */
      updated?: string;
      /** @description The Avatar of the MonetaryAccountExternalSavings. */
      avatar?: components["schemas"]["Avatar"];
      /** @description The currency of the MonetaryAccountExternalSavings as an ISO 4217 formatted currency code. */
      currency?: string;
      /** @description The description of the MonetaryAccountExternalSavings. Defaults to 'bunq account'. */
      description?: string;
      /** @description The daily spending limit Amount of the MonetaryAccountExternalSavings. Defaults to 1000 EUR. Currency must match the MonetaryAccountExternalSavings's currency. Limited to 10000 EUR. */
      daily_limit?: components["schemas"]["Amount"];
      /** @description The current available balance Amount of the MonetaryAccountExternalSavings. */
      balance?: components["schemas"]["Amount"];
      /** @description The Aliases for the MonetaryAccountExternalSavings. */
      alias?: readonly components["schemas"]["Pointer"][];
      /** @description The MonetaryAccountExternalSavings's public UUID. */
      public_uuid?: string;
      /** @description The status of the MonetaryAccountExternalSavings. Can be: ACTIVE, BLOCKED, CANCELLED or PENDING_REOPEN */
      status?: string;
      /** @description The sub-status of the MonetaryAccountExternalSavings providing extra information regarding the status. Will be NONE for ACTIVE or PENDING_REOPEN, COMPLETELY or ONLY_ACCEPTING_INCOMING for BLOCKED and REDEMPTION_INVOLUNTARY, REDEMPTION_VOLUNTARY or PERMANENT for CANCELLED. */
      sub_status?: string;
      /** @description The reason for voluntarily cancelling (closing) the MonetaryAccountExternalSavings, can only be OTHER. */
      reason?: string;
      /** @description The optional free-form reason for voluntarily cancelling (closing) the MonetaryAccountExternalSavings. Can be any user provided message. */
      reason_description?: string;
      /** @description The id of the User who owns the MonetaryAccountExternalSavings. */
      user_id?: number;
      /** @description The profile of the account. */
      monetary_account_profile?: components["schemas"]["MonetaryAccountProfile"];
      /** @description The legal name of the user / company using this monetary account. */
      display_name?: string;
      /** @description The settings of the MonetaryAccountExternalSavings. */
      setting?: components["schemas"]["MonetaryAccountSetting"];
      /** @description The ids of the AutoSave. */
      all_auto_save_id?: readonly components["schemas"]["BunqId"][];
      /** @description The Savings Goal set for this MonetaryAccountExternalSavings. */
      savings_goal?: components["schemas"]["Amount"];
      /** @description The progress in percentages for the Savings Goal set for this MonetaryAccountExternalSavings. */
      savings_goal_progress?: number;
      /** @description The number of payments that can be made from this savings account */
      number_of_payment_remaining?: string;
    };
    MonetaryAccountExternalSavingsUpdate: {
      /** @description The id of the created item */
      Id?: components["schemas"]["BunqId"];
    };
    MonetaryAccountExternalUpdate: {
      /** @description The id of the created item */
      Id?: components["schemas"]["BunqId"];
    };
    MonetaryAccountInvestment: {
      /** @description The currency of the MonetaryAccountInvestment as an ISO 4217 formatted currency code. */
      currency?: string;
      /** @description The provider of the investment service. */
      provider: string;
      /** @description The description of the MonetaryAccountInvestment. Defaults to 'bunq account'. */
      description?: string;
      /** @description The daily spending limit Amount of the MonetaryAccountInvestment. Defaults to 1000 EUR. Currency must match the MonetaryAccountInvestment's currency. Limited to 10000 EUR. */
      daily_limit?: components["schemas"]["Amount"];
      /** @description The UUID of the Avatar of the MonetaryAccountInvestment. */
      avatar_uuid?: string;
      /** @description The status of the MonetaryAccountInvestment. Can be: ACTIVE, BLOCKED, CANCELLED or PENDING_REOPEN */
      status?: string;
      /** @description The sub-status of the MonetaryAccountInvestment providing extra information regarding the status. Will be NONE for ACTIVE or PENDING_REOPEN, COMPLETELY or ONLY_ACCEPTING_INCOMING for BLOCKED and REDEMPTION_INVOLUNTARY, REDEMPTION_VOLUNTARY or PERMANENT for CANCELLED. */
      sub_status?: string;
      /** @description The reason for voluntarily cancelling (closing) the MonetaryAccountInvestment, can only be OTHER. */
      reason?: string;
      /** @description The optional free-form reason for voluntarily cancelling (closing) the MonetaryAccountInvestment. Can be any user provided message. */
      reason_description?: string;
      /** @description The legal name of the user / company using this monetary account. */
      display_name?: string;
      /** @description The settings of the MonetaryAccountInvestment. */
      setting?: components["schemas"]["MonetaryAccountSetting"];
      /** @description The Birdee investment portfolio. */
      birdee_investment_portfolio?: components["schemas"]["BirdeeInvestmentPortfolio"];
      /** @description The id of the MonetaryAccountInvestment. */
      id?: number;
      /** @description The timestamp of the MonetaryAccountInvestment's creation. */
      created?: string;
      /** @description The timestamp of the MonetaryAccountInvestment's last update. */
      updated?: string;
      /** @description The Avatar of the MonetaryAccountInvestment. */
      avatar?: components["schemas"]["Avatar"];
      /** @description The current available balance Amount of the MonetaryAccountInvestment. */
      balance?: components["schemas"]["Amount"];
      /** @description The Aliases for the MonetaryAccountInvestment. */
      alias?: readonly components["schemas"]["Pointer"][];
      /** @description The MonetaryAccountInvestment's public UUID. */
      public_uuid?: string;
      /** @description The id of the User who owns the MonetaryAccountInvestment. */
      user_id?: number;
      /** @description The profile of the account. */
      monetary_account_profile?: components["schemas"]["MonetaryAccountProfile"];
      /** @description The ids of the AutoSave. */
      all_auto_save_id?: readonly components["schemas"]["BunqId"][];
    };
    MonetaryAccountJoint: {
      /** @description The currency of the MonetaryAccountJoint as an ISO 4217 formatted currency code. */
      currency?: string;
      /** @description The description of the MonetaryAccountJoint. Defaults to 'bunq account'. */
      description?: string;
      /** @description The daily spending limit Amount of the MonetaryAccountJoint. Defaults to 1000 EUR. Currency must match the MonetaryAccountJoint's currency. Limited to 10000 EUR. */
      daily_limit?: components["schemas"]["Amount"];
      /** @description The maximum Amount the MonetaryAccountJoint can be 'in the red'. */
      overdraft_limit?: components["schemas"]["Amount"];
      /** @description The Aliases for the MonetaryAccountJoint. */
      alias?: components["schemas"]["Pointer"][];
      /** @description The UUID of the Avatar of the MonetaryAccountJoint. */
      avatar_uuid?: string;
      /** @description The status of the MonetaryAccountJoint. Can be: ACTIVE, BLOCKED, CANCELLED or PENDING_REOPEN */
      status?: string;
      /** @description The sub-status of the MonetaryAccountJoint providing extra information regarding the status. Will be NONE for ACTIVE or PENDING_REOPEN, COMPLETELY or ONLY_ACCEPTING_INCOMING for BLOCKED and REDEMPTION_INVOLUNTARY, REDEMPTION_VOLUNTARY or PERMANENT for CANCELLED. */
      sub_status?: string;
      /** @description The reason for voluntarily cancelling (closing) the MonetaryAccountJoint, can only be OTHER. */
      reason?: string;
      /** @description The optional free-form reason for voluntarily cancelling (closing) the MonetaryAccountJoint. Can be any user provided message. */
      reason_description?: string;
      /** @description The users the account will be joint with. */
      all_co_owner?: components["schemas"]["CoOwner"][];
      /** @description The settings of the MonetaryAccountJoint. */
      setting?: components["schemas"]["MonetaryAccountSetting"];
      /** @description The id of the MonetaryAccountJoint. */
      id?: number;
      /** @description The timestamp of the MonetaryAccountJoint's creation. */
      created?: string;
      /** @description The timestamp of the MonetaryAccountJoint's last update. */
      updated?: string;
      /** @description The Avatar of the MonetaryAccountJoint. */
      avatar?: components["schemas"]["Avatar"];
      /** @description The current available balance Amount of the MonetaryAccountJoint. */
      balance?: components["schemas"]["Amount"];
      /** @description The MonetaryAccountJoint's public UUID. */
      public_uuid?: string;
      /** @description The id of the User who owns the MonetaryAccountJoint. */
      user_id?: number;
      /** @description The profile of the account. */
      monetary_account_profile?: components["schemas"]["MonetaryAccountProfile"];
      /** @description The ids of the AutoSave. */
      all_auto_save_id?: readonly components["schemas"]["BunqId"][];
    };
    MonetaryAccountJointCreate: {
      /** @description The id of the created item */
      Id?: components["schemas"]["BunqId"];
    };
    MonetaryAccountJointListing: {
      /** @description The id of the MonetaryAccountJoint. */
      id?: number;
      /** @description The timestamp of the MonetaryAccountJoint's creation. */
      created?: string;
      /** @description The timestamp of the MonetaryAccountJoint's last update. */
      updated?: string;
      /** @description The Avatar of the MonetaryAccountJoint. */
      avatar?: components["schemas"]["Avatar"];
      /** @description The currency of the MonetaryAccountJoint as an ISO 4217 formatted currency code. */
      currency?: string;
      /** @description The description of the MonetaryAccountJoint. Defaults to 'bunq account'. */
      description?: string;
      /** @description The daily spending limit Amount of the MonetaryAccountJoint. Defaults to 1000 EUR. Currency must match the MonetaryAccountJoint's currency. Limited to 10000 EUR. */
      daily_limit?: components["schemas"]["Amount"];
      /** @description The maximum Amount the MonetaryAccountJoint can be 'in the red'. */
      overdraft_limit?: components["schemas"]["Amount"];
      /** @description The current available balance Amount of the MonetaryAccountJoint. */
      balance?: components["schemas"]["Amount"];
      /** @description The Aliases for the MonetaryAccountJoint. */
      alias?: readonly components["schemas"]["Pointer"][];
      /** @description The MonetaryAccountJoint's public UUID. */
      public_uuid?: string;
      /** @description The status of the MonetaryAccountJoint. Can be: ACTIVE, BLOCKED, CANCELLED or PENDING_REOPEN */
      status?: string;
      /** @description The sub-status of the MonetaryAccountJoint providing extra information regarding the status. Will be NONE for ACTIVE or PENDING_REOPEN, COMPLETELY or ONLY_ACCEPTING_INCOMING for BLOCKED and REDEMPTION_INVOLUNTARY, REDEMPTION_VOLUNTARY or PERMANENT for CANCELLED. */
      sub_status?: string;
      /** @description The reason for voluntarily cancelling (closing) the MonetaryAccountJoint, can only be OTHER. */
      reason?: string;
      /** @description The optional free-form reason for voluntarily cancelling (closing) the MonetaryAccountJoint. Can be any user provided message. */
      reason_description?: string;
      /** @description The users the account will be joint with. */
      all_co_owner?: readonly components["schemas"]["CoOwner"][];
      /** @description The id of the User who owns the MonetaryAccountJoint. */
      user_id?: number;
      /** @description The profile of the account. */
      monetary_account_profile?: components["schemas"]["MonetaryAccountProfile"];
      /** @description The settings of the MonetaryAccountJoint. */
      setting?: components["schemas"]["MonetaryAccountSetting"];
      /** @description The ids of the AutoSave. */
      all_auto_save_id?: readonly components["schemas"]["BunqId"][];
    };
    MonetaryAccountJointRead: {
      /** @description The id of the MonetaryAccountJoint. */
      id?: number;
      /** @description The timestamp of the MonetaryAccountJoint's creation. */
      created?: string;
      /** @description The timestamp of the MonetaryAccountJoint's last update. */
      updated?: string;
      /** @description The Avatar of the MonetaryAccountJoint. */
      avatar?: components["schemas"]["Avatar"];
      /** @description The currency of the MonetaryAccountJoint as an ISO 4217 formatted currency code. */
      currency?: string;
      /** @description The description of the MonetaryAccountJoint. Defaults to 'bunq account'. */
      description?: string;
      /** @description The daily spending limit Amount of the MonetaryAccountJoint. Defaults to 1000 EUR. Currency must match the MonetaryAccountJoint's currency. Limited to 10000 EUR. */
      daily_limit?: components["schemas"]["Amount"];
      /** @description The maximum Amount the MonetaryAccountJoint can be 'in the red'. */
      overdraft_limit?: components["schemas"]["Amount"];
      /** @description The current available balance Amount of the MonetaryAccountJoint. */
      balance?: components["schemas"]["Amount"];
      /** @description The Aliases for the MonetaryAccountJoint. */
      alias?: readonly components["schemas"]["Pointer"][];
      /** @description The MonetaryAccountJoint's public UUID. */
      public_uuid?: string;
      /** @description The status of the MonetaryAccountJoint. Can be: ACTIVE, BLOCKED, CANCELLED or PENDING_REOPEN */
      status?: string;
      /** @description The sub-status of the MonetaryAccountJoint providing extra information regarding the status. Will be NONE for ACTIVE or PENDING_REOPEN, COMPLETELY or ONLY_ACCEPTING_INCOMING for BLOCKED and REDEMPTION_INVOLUNTARY, REDEMPTION_VOLUNTARY or PERMANENT for CANCELLED. */
      sub_status?: string;
      /** @description The reason for voluntarily cancelling (closing) the MonetaryAccountJoint, can only be OTHER. */
      reason?: string;
      /** @description The optional free-form reason for voluntarily cancelling (closing) the MonetaryAccountJoint. Can be any user provided message. */
      reason_description?: string;
      /** @description The users the account will be joint with. */
      all_co_owner?: readonly components["schemas"]["CoOwner"][];
      /** @description The id of the User who owns the MonetaryAccountJoint. */
      user_id?: number;
      /** @description The profile of the account. */
      monetary_account_profile?: components["schemas"]["MonetaryAccountProfile"];
      /** @description The settings of the MonetaryAccountJoint. */
      setting?: components["schemas"]["MonetaryAccountSetting"];
      /** @description The ids of the AutoSave. */
      all_auto_save_id?: readonly components["schemas"]["BunqId"][];
    };
    MonetaryAccountJointUpdate: {
      /** @description The id of the created item */
      Id?: components["schemas"]["BunqId"];
    };
    MonetaryAccountLight: {
      /** @description The currency of the MonetaryAccountLight as an ISO 4217 formatted currency code. */
      currency?: string;
      /** @description The description of the MonetaryAccountLight. Defaults to 'bunq account'. */
      description?: string;
      /** @description The daily spending limit Amount of the MonetaryAccountLight. Defaults to 1000 EUR. Currency must match the MonetaryAccountLight's currency. Limited to 10000 EUR. */
      daily_limit?: components["schemas"]["Amount"];
      /** @description The UUID of the Avatar of the MonetaryAccountLight. */
      avatar_uuid?: string;
      /** @description The status of the MonetaryAccountLight. Can be: ACTIVE, BLOCKED, CANCELLED or PENDING_REOPEN */
      status?: string;
      /** @description The sub-status of the MonetaryAccountLight providing extra information regarding the status. Will be NONE for ACTIVE or PENDING_REOPEN, COMPLETELY or ONLY_ACCEPTING_INCOMING for BLOCKED and REDEMPTION_INVOLUNTARY, REDEMPTION_VOLUNTARY or PERMANENT for CANCELLED. */
      sub_status?: string;
      /** @description The reason for voluntarily cancelling (closing) the MonetaryAccountBank, can only be OTHER. */
      reason?: string;
      /** @description The optional free-form reason for voluntarily cancelling (closing) the MonetaryAccountBank. Can be any user provided message. */
      reason_description?: string;
      /** @description The settings of the MonetaryAccountLight. */
      setting?: components["schemas"]["MonetaryAccountSetting"];
      /** @description The id of the MonetaryAccountLight. */
      id?: number;
      /** @description The timestamp of the MonetaryAccountLight's creation. */
      created?: string;
      /** @description The timestamp of the MonetaryAccountLight's last update. */
      updated?: string;
      /** @description The Avatar of the MonetaryAccountLight. */
      avatar?: components["schemas"]["Avatar"];
      /** @description The current available balance Amount of the MonetaryAccountLight. */
      balance?: components["schemas"]["Amount"];
      /** @description The Aliases for the MonetaryAccountLight. */
      alias?: readonly components["schemas"]["Pointer"][];
      /** @description The MonetaryAccountLight's public UUID. */
      public_uuid?: string;
      /** @description The id of the User who owns the MonetaryAccountLight. */
      user_id?: number;
      /** @description The maximum balance Amount of the MonetaryAccountLight. */
      balance_maximum?: components["schemas"]["Amount"];
      /** @description The amount of the monthly budget used. */
      budget_month_used?: components["schemas"]["Amount"];
      /** @description The total amount of the monthly budget. */
      budget_month_maximum?: components["schemas"]["Amount"];
      /** @description The amount of the yearly budget used. */
      budget_year_used?: components["schemas"]["Amount"];
      /** @description The total amount of the yearly budget. */
      budget_year_maximum?: components["schemas"]["Amount"];
      /** @description The amount of the yearly withdrawal budget used. */
      budget_withdrawal_year_used?: components["schemas"]["Amount"];
      /** @description The total amount of the yearly withdrawal budget. */
      budget_withdrawal_year_maximum?: components["schemas"]["Amount"];
    };
    MonetaryAccountListing: {
      MonetaryAccountBank?: components["schemas"]["MonetaryAccountBank"];
      MonetaryAccountJoint?: components["schemas"]["MonetaryAccountJoint"];
      MonetaryAccountLight?: components["schemas"]["MonetaryAccountLight"];
      MonetaryAccountSavings?: components["schemas"]["MonetaryAccountSavings"];
      MonetaryAccountExternal?: components["schemas"]["MonetaryAccountExternal"];
      MonetaryAccountInvestment?: components["schemas"]["MonetaryAccountInvestment"];
      MonetaryAccountExternalSavings?: components["schemas"]["MonetaryAccountExternalSavings"];
    };
    MonetaryAccountProfile: {
      /** @description The profile settings for triggering the fill of a monetary account. */
      profile_fill?: components["schemas"]["MonetaryAccountProfileFill"];
      /** @description The profile settings for moving excesses to a savings account */
      profile_drain?: components["schemas"]["MonetaryAccountProfileDrain"];
    };
    MonetaryAccountProfileDrain: {
      /** @description The status of the profile. */
      status?: string;
      /** @description The goal balance. */
      balance_preferred?: components["schemas"]["Amount"];
      /** @description The high threshold balance. */
      balance_threshold_high?: components["schemas"]["Amount"];
      /** @description The savings monetary account. */
      savings_account_alias?: components["schemas"]["LabelMonetaryAccount"];
    };
    MonetaryAccountProfileFill: {
      /** @description The status of the profile. */
      status?: string;
      /** @description The goal balance. */
      balance_preferred?: components["schemas"]["Amount"];
      /** @description The low threshold balance. */
      balance_threshold_low?: components["schemas"]["Amount"];
      /** @description The bank the fill is supposed to happen from, with BIC and bank name. */
      issuer?: components["schemas"]["Issuer"];
    };
    MonetaryAccountRead: {
      MonetaryAccountBank?: components["schemas"]["MonetaryAccountBank"];
      MonetaryAccountJoint?: components["schemas"]["MonetaryAccountJoint"];
      MonetaryAccountLight?: components["schemas"]["MonetaryAccountLight"];
      MonetaryAccountSavings?: components["schemas"]["MonetaryAccountSavings"];
      MonetaryAccountExternal?: components["schemas"]["MonetaryAccountExternal"];
      MonetaryAccountInvestment?: components["schemas"]["MonetaryAccountInvestment"];
      MonetaryAccountExternalSavings?: components["schemas"]["MonetaryAccountExternalSavings"];
    };
    MonetaryAccountSavings: {
      /** @description The currency of the MonetaryAccountSavings as an ISO 4217 formatted currency code. */
      currency?: string;
      /** @description The description of the MonetaryAccountSavings. Defaults to 'bunq account'. */
      description?: string;
      /** @description The daily spending limit Amount of the MonetaryAccountSavings. Defaults to 1000 EUR. Currency must match the MonetaryAccountSavings's currency. Limited to 10000 EUR. */
      daily_limit?: components["schemas"]["Amount"];
      /** @description The UUID of the Avatar of the MonetaryAccountSavings. */
      avatar_uuid?: string;
      /** @description The status of the MonetaryAccountSavings. Can be: ACTIVE, BLOCKED, CANCELLED or PENDING_REOPEN */
      status?: string;
      /** @description The sub-status of the MonetaryAccountSavings providing extra information regarding the status. Will be NONE for ACTIVE or PENDING_REOPEN, COMPLETELY or ONLY_ACCEPTING_INCOMING for BLOCKED and REDEMPTION_INVOLUNTARY, REDEMPTION_VOLUNTARY or PERMANENT for CANCELLED. */
      sub_status?: string;
      /** @description The reason for voluntarily cancelling (closing) the MonetaryAccountSavings, can only be OTHER. */
      reason?: string;
      /** @description The optional free-form reason for voluntarily cancelling (closing) the MonetaryAccountSavings. Can be any user provided message. */
      reason_description?: string;
      /** @description The users the account will be joint with. */
      all_co_owner?: components["schemas"]["CoOwner"][];
      /** @description The settings of the MonetaryAccountSavings. */
      setting?: components["schemas"]["MonetaryAccountSetting"];
      /** @description The Savings Goal set for this MonetaryAccountSavings. */
      savings_goal?: components["schemas"]["Amount"];
      /** @description The id of the MonetaryAccountSavings. */
      id?: number;
      /** @description The timestamp of the MonetaryAccountSavings's creation. */
      created?: string;
      /** @description The timestamp of the MonetaryAccountSavings's last update. */
      updated?: string;
      /** @description The Avatar of the MonetaryAccountSavings. */
      avatar?: components["schemas"]["Avatar"];
      /** @description The current available balance Amount of the MonetaryAccountSavings. */
      balance?: components["schemas"]["Amount"];
      /** @description The Aliases for the MonetaryAccountSavings. */
      alias?: readonly components["schemas"]["Pointer"][];
      /** @description The MonetaryAccountSavings's public UUID. */
      public_uuid?: string;
      /** @description The id of the User who owns the MonetaryAccountSavings. */
      user_id?: number;
      /** @description The profile of the account. */
      monetary_account_profile?: components["schemas"]["MonetaryAccountProfile"];
      /** @description The progress in percentages for the Savings Goal set for this MonetaryAccountSavings. */
      savings_goal_progress?: number;
      /** @description The number of payments that can be made from this savings account */
      number_of_payment_remaining?: string;
      /** @description The ids of the AutoSave. */
      all_auto_save_id?: readonly components["schemas"]["BunqId"][];
    };
    MonetaryAccountSavingsCreate: {
      /** @description The id of the created item */
      Id?: components["schemas"]["BunqId"];
    };
    MonetaryAccountSavingsListing: {
      /** @description The id of the MonetaryAccountSavings. */
      id?: number;
      /** @description The timestamp of the MonetaryAccountSavings's creation. */
      created?: string;
      /** @description The timestamp of the MonetaryAccountSavings's last update. */
      updated?: string;
      /** @description The Avatar of the MonetaryAccountSavings. */
      avatar?: components["schemas"]["Avatar"];
      /** @description The currency of the MonetaryAccountSavings as an ISO 4217 formatted currency code. */
      currency?: string;
      /** @description The description of the MonetaryAccountSavings. Defaults to 'bunq account'. */
      description?: string;
      /** @description The daily spending limit Amount of the MonetaryAccountSavings. Defaults to 1000 EUR. Currency must match the MonetaryAccountSavings's currency. Limited to 10000 EUR. */
      daily_limit?: components["schemas"]["Amount"];
      /** @description The current available balance Amount of the MonetaryAccountSavings. */
      balance?: components["schemas"]["Amount"];
      /** @description The Aliases for the MonetaryAccountSavings. */
      alias?: readonly components["schemas"]["Pointer"][];
      /** @description The MonetaryAccountSavings's public UUID. */
      public_uuid?: string;
      /** @description The status of the MonetaryAccountSavings. Can be: ACTIVE, BLOCKED, CANCELLED or PENDING_REOPEN */
      status?: string;
      /** @description The sub-status of the MonetaryAccountSavings providing extra information regarding the status. Will be NONE for ACTIVE or PENDING_REOPEN, COMPLETELY or ONLY_ACCEPTING_INCOMING for BLOCKED and REDEMPTION_INVOLUNTARY, REDEMPTION_VOLUNTARY or PERMANENT for CANCELLED. */
      sub_status?: string;
      /** @description The reason for voluntarily cancelling (closing) the MonetaryAccountSavings, can only be OTHER. */
      reason?: string;
      /** @description The optional free-form reason for voluntarily cancelling (closing) the MonetaryAccountSavings. Can be any user provided message. */
      reason_description?: string;
      /** @description The users the account will be joint with. */
      all_co_owner?: readonly components["schemas"]["CoOwner"][];
      /** @description The id of the User who owns the MonetaryAccountSavings. */
      user_id?: number;
      /** @description The profile of the account. */
      monetary_account_profile?: components["schemas"]["MonetaryAccountProfile"];
      /** @description The settings of the MonetaryAccountSavings. */
      setting?: components["schemas"]["MonetaryAccountSetting"];
      /** @description The Savings Goal set for this MonetaryAccountSavings. */
      savings_goal?: components["schemas"]["Amount"];
      /** @description The progress in percentages for the Savings Goal set for this MonetaryAccountSavings. */
      savings_goal_progress?: number;
      /** @description The number of payments that can be made from this savings account */
      number_of_payment_remaining?: string;
      /** @description The ids of the AutoSave. */
      all_auto_save_id?: readonly components["schemas"]["BunqId"][];
    };
    MonetaryAccountSavingsRead: {
      /** @description The id of the MonetaryAccountSavings. */
      id?: number;
      /** @description The timestamp of the MonetaryAccountSavings's creation. */
      created?: string;
      /** @description The timestamp of the MonetaryAccountSavings's last update. */
      updated?: string;
      /** @description The Avatar of the MonetaryAccountSavings. */
      avatar?: components["schemas"]["Avatar"];
      /** @description The currency of the MonetaryAccountSavings as an ISO 4217 formatted currency code. */
      currency?: string;
      /** @description The description of the MonetaryAccountSavings. Defaults to 'bunq account'. */
      description?: string;
      /** @description The daily spending limit Amount of the MonetaryAccountSavings. Defaults to 1000 EUR. Currency must match the MonetaryAccountSavings's currency. Limited to 10000 EUR. */
      daily_limit?: components["schemas"]["Amount"];
      /** @description The current available balance Amount of the MonetaryAccountSavings. */
      balance?: components["schemas"]["Amount"];
      /** @description The Aliases for the MonetaryAccountSavings. */
      alias?: readonly components["schemas"]["Pointer"][];
      /** @description The MonetaryAccountSavings's public UUID. */
      public_uuid?: string;
      /** @description The status of the MonetaryAccountSavings. Can be: ACTIVE, BLOCKED, CANCELLED or PENDING_REOPEN */
      status?: string;
      /** @description The sub-status of the MonetaryAccountSavings providing extra information regarding the status. Will be NONE for ACTIVE or PENDING_REOPEN, COMPLETELY or ONLY_ACCEPTING_INCOMING for BLOCKED and REDEMPTION_INVOLUNTARY, REDEMPTION_VOLUNTARY or PERMANENT for CANCELLED. */
      sub_status?: string;
      /** @description The reason for voluntarily cancelling (closing) the MonetaryAccountSavings, can only be OTHER. */
      reason?: string;
      /** @description The optional free-form reason for voluntarily cancelling (closing) the MonetaryAccountSavings. Can be any user provided message. */
      reason_description?: string;
      /** @description The users the account will be joint with. */
      all_co_owner?: readonly components["schemas"]["CoOwner"][];
      /** @description The id of the User who owns the MonetaryAccountSavings. */
      user_id?: number;
      /** @description The profile of the account. */
      monetary_account_profile?: components["schemas"]["MonetaryAccountProfile"];
      /** @description The settings of the MonetaryAccountSavings. */
      setting?: components["schemas"]["MonetaryAccountSetting"];
      /** @description The Savings Goal set for this MonetaryAccountSavings. */
      savings_goal?: components["schemas"]["Amount"];
      /** @description The progress in percentages for the Savings Goal set for this MonetaryAccountSavings. */
      savings_goal_progress?: number;
      /** @description The number of payments that can be made from this savings account */
      number_of_payment_remaining?: string;
      /** @description The ids of the AutoSave. */
      all_auto_save_id?: readonly components["schemas"]["BunqId"][];
    };
    MonetaryAccountSavingsUpdate: {
      /** @description The id of the created item */
      Id?: components["schemas"]["BunqId"];
    };
    MonetaryAccountSetting: {
      /** @description The color chosen for the MonetaryAccount. */
      color?: string;
      /** @description The icon chosen for the MonetaryAccount. */
      icon?: string;
      /** @description The status of the avatar. Can be either AVATAR_DEFAULT, AVATAR_CUSTOM or AVATAR_UNDETERMINED. */
      default_avatar_status?: string;
      /** @description The chat restriction. Possible values are ALLOW_INCOMING or BLOCK_INCOMING */
      restriction_chat?: string;
      /** @description The preference for this monetary account on whether to automatically accept or reject expiring SDDs. */
      sdd_expiration_action?: string;
    };
    NoteAttachmentAdyenCardTransaction: {
      /** @description Optional description of the attachment. */
      description?: string;
      /** @description The reference to the uploaded file to attach to this note. */
      attachment_id: number;
    };
    NoteAttachmentAdyenCardTransactionCreate: {
      /** @description The id of the created item */
      Id?: components["schemas"]["BunqId"];
    };
    NoteAttachmentAdyenCardTransactionDelete: Record<string, never>;
    NoteAttachmentAdyenCardTransactionListing: {
      /** @description The id of the note. */
      id?: number;
      /** @description The timestamp of the note's creation. */
      created?: string;
      /** @description The timestamp of the note's last update. */
      updated?: string;
      /** @description The label of the user who created this note. */
      label_user_creator?: components["schemas"]["LabelUser"];
      /** @description Optional description of the attachment. */
      description?: string;
      /** @description The attachment attached to the note. */
      attachment?: readonly components["schemas"]["AttachmentMonetaryAccountPayment"][];
    };
    NoteAttachmentAdyenCardTransactionRead: {
      /** @description The id of the note. */
      id?: number;
      /** @description The timestamp of the note's creation. */
      created?: string;
      /** @description The timestamp of the note's last update. */
      updated?: string;
      /** @description The label of the user who created this note. */
      label_user_creator?: components["schemas"]["LabelUser"];
      /** @description Optional description of the attachment. */
      description?: string;
      /** @description The attachment attached to the note. */
      attachment?: readonly components["schemas"]["AttachmentMonetaryAccountPayment"][];
    };
    NoteAttachmentAdyenCardTransactionUpdate: {
      /** @description The id of the created item */
      Id?: components["schemas"]["BunqId"];
    };
    NoteAttachmentBankSwitchServiceNetherlandsIncomingPayment: {
      /** @description Optional description of the attachment. */
      description?: string;
      /** @description The reference to the uploaded file to attach to this note. */
      attachment_id: number;
    };
    NoteAttachmentBankSwitchServiceNetherlandsIncomingPaymentCreate: {
      /** @description The id of the created item */
      Id?: components["schemas"]["BunqId"];
    };
    NoteAttachmentBankSwitchServiceNetherlandsIncomingPaymentDelete: Record<string, never>;
    NoteAttachmentBankSwitchServiceNetherlandsIncomingPaymentListing: {
      /** @description The id of the note. */
      id?: number;
      /** @description The timestamp of the note's creation. */
      created?: string;
      /** @description The timestamp of the note's last update. */
      updated?: string;
      /** @description The label of the user who created this note. */
      label_user_creator?: components["schemas"]["LabelUser"];
      /** @description Optional description of the attachment. */
      description?: string;
      /** @description The attachment attached to the note. */
      attachment?: readonly components["schemas"]["AttachmentMonetaryAccountPayment"][];
    };
    NoteAttachmentBankSwitchServiceNetherlandsIncomingPaymentRead: {
      /** @description The id of the note. */
      id?: number;
      /** @description The timestamp of the note's creation. */
      created?: string;
      /** @description The timestamp of the note's last update. */
      updated?: string;
      /** @description The label of the user who created this note. */
      label_user_creator?: components["schemas"]["LabelUser"];
      /** @description Optional description of the attachment. */
      description?: string;
      /** @description The attachment attached to the note. */
      attachment?: readonly components["schemas"]["AttachmentMonetaryAccountPayment"][];
    };
    NoteAttachmentBankSwitchServiceNetherlandsIncomingPaymentUpdate: {
      /** @description The id of the created item */
      Id?: components["schemas"]["BunqId"];
    };
    NoteAttachmentBunqMeFundraiserResult: {
      /** @description Optional description of the attachment. */
      description?: string;
      /** @description The reference to the uploaded file to attach to this note. */
      attachment_id: number;
    };
    NoteAttachmentBunqMeFundraiserResultCreate: {
      /** @description The id of the created item */
      Id?: components["schemas"]["BunqId"];
    };
    NoteAttachmentBunqMeFundraiserResultDelete: Record<string, never>;
    NoteAttachmentBunqMeFundraiserResultListing: {
      /** @description The id of the note. */
      id?: number;
      /** @description The timestamp of the note's creation. */
      created?: string;
      /** @description The timestamp of the note's last update. */
      updated?: string;
      /** @description The label of the user who created this note. */
      label_user_creator?: components["schemas"]["LabelUser"];
      /** @description Optional description of the attachment. */
      description?: string;
      /** @description The attachment attached to the note. */
      attachment?: readonly components["schemas"]["AttachmentMonetaryAccountPayment"][];
    };
    NoteAttachmentBunqMeFundraiserResultRead: {
      /** @description The id of the note. */
      id?: number;
      /** @description The timestamp of the note's creation. */
      created?: string;
      /** @description The timestamp of the note's last update. */
      updated?: string;
      /** @description The label of the user who created this note. */
      label_user_creator?: components["schemas"]["LabelUser"];
      /** @description Optional description of the attachment. */
      description?: string;
      /** @description The attachment attached to the note. */
      attachment?: readonly components["schemas"]["AttachmentMonetaryAccountPayment"][];
    };
    NoteAttachmentBunqMeFundraiserResultUpdate: {
      /** @description The id of the created item */
      Id?: components["schemas"]["BunqId"];
    };
    NoteAttachmentDraftPayment: {
      /** @description Optional description of the attachment. */
      description?: string;
      /** @description The reference to the uploaded file to attach to this note. */
      attachment_id: number;
    };
    NoteAttachmentDraftPaymentCreate: {
      /** @description The id of the created item */
      Id?: components["schemas"]["BunqId"];
    };
    NoteAttachmentDraftPaymentDelete: Record<string, never>;
    NoteAttachmentDraftPaymentListing: {
      /** @description The id of the note. */
      id?: number;
      /** @description The timestamp of the note's creation. */
      created?: string;
      /** @description The timestamp of the note's last update. */
      updated?: string;
      /** @description The label of the user who created this note. */
      label_user_creator?: components["schemas"]["LabelUser"];
      /** @description Optional description of the attachment. */
      description?: string;
      /** @description The attachment attached to the note. */
      attachment?: readonly components["schemas"]["AttachmentMonetaryAccountPayment"][];
    };
    NoteAttachmentDraftPaymentRead: {
      /** @description The id of the note. */
      id?: number;
      /** @description The timestamp of the note's creation. */
      created?: string;
      /** @description The timestamp of the note's last update. */
      updated?: string;
      /** @description The label of the user who created this note. */
      label_user_creator?: components["schemas"]["LabelUser"];
      /** @description Optional description of the attachment. */
      description?: string;
      /** @description The attachment attached to the note. */
      attachment?: readonly components["schemas"]["AttachmentMonetaryAccountPayment"][];
    };
    NoteAttachmentDraftPaymentUpdate: {
      /** @description The id of the created item */
      Id?: components["schemas"]["BunqId"];
    };
    NoteAttachmentIdealMerchantTransaction: {
      /** @description Optional description of the attachment. */
      description?: string;
      /** @description The reference to the uploaded file to attach to this note. */
      attachment_id: number;
    };
    NoteAttachmentIdealMerchantTransactionCreate: {
      /** @description The id of the created item */
      Id?: components["schemas"]["BunqId"];
    };
    NoteAttachmentIdealMerchantTransactionDelete: Record<string, never>;
    NoteAttachmentIdealMerchantTransactionListing: {
      /** @description The id of the note. */
      id?: number;
      /** @description The timestamp of the note's creation. */
      created?: string;
      /** @description The timestamp of the note's last update. */
      updated?: string;
      /** @description The label of the user who created this note. */
      label_user_creator?: components["schemas"]["LabelUser"];
      /** @description Optional description of the attachment. */
      description?: string;
      /** @description The attachment attached to the note. */
      attachment?: readonly components["schemas"]["AttachmentMonetaryAccountPayment"][];
    };
    NoteAttachmentIdealMerchantTransactionRead: {
      /** @description The id of the note. */
      id?: number;
      /** @description The timestamp of the note's creation. */
      created?: string;
      /** @description The timestamp of the note's last update. */
      updated?: string;
      /** @description The label of the user who created this note. */
      label_user_creator?: components["schemas"]["LabelUser"];
      /** @description Optional description of the attachment. */
      description?: string;
      /** @description The attachment attached to the note. */
      attachment?: readonly components["schemas"]["AttachmentMonetaryAccountPayment"][];
    };
    NoteAttachmentIdealMerchantTransactionUpdate: {
      /** @description The id of the created item */
      Id?: components["schemas"]["BunqId"];
    };
    NoteAttachmentMasterCardAction: {
      /** @description Optional description of the attachment. */
      description?: string;
      /** @description The reference to the uploaded file to attach to this note. */
      attachment_id: number;
    };
    NoteAttachmentMasterCardActionCreate: {
      /** @description The id of the created item */
      Id?: components["schemas"]["BunqId"];
    };
    NoteAttachmentMasterCardActionDelete: Record<string, never>;
    NoteAttachmentMasterCardActionListing: {
      /** @description The id of the note. */
      id?: number;
      /** @description The timestamp of the note's creation. */
      created?: string;
      /** @description The timestamp of the note's last update. */
      updated?: string;
      /** @description The label of the user who created this note. */
      label_user_creator?: components["schemas"]["LabelUser"];
      /** @description Optional description of the attachment. */
      description?: string;
      /** @description The attachment attached to the note. */
      attachment?: readonly components["schemas"]["AttachmentMonetaryAccountPayment"][];
    };
    NoteAttachmentMasterCardActionRead: {
      /** @description The id of the note. */
      id?: number;
      /** @description The timestamp of the note's creation. */
      created?: string;
      /** @description The timestamp of the note's last update. */
      updated?: string;
      /** @description The label of the user who created this note. */
      label_user_creator?: components["schemas"]["LabelUser"];
      /** @description Optional description of the attachment. */
      description?: string;
      /** @description The attachment attached to the note. */
      attachment?: readonly components["schemas"]["AttachmentMonetaryAccountPayment"][];
    };
    NoteAttachmentMasterCardActionUpdate: {
      /** @description The id of the created item */
      Id?: components["schemas"]["BunqId"];
    };
    NoteAttachmentPayment: {
      /** @description Optional description of the attachment. */
      description?: string;
      /** @description The reference to the uploaded file to attach to this note. */
      attachment_id: number;
    };
    NoteAttachmentPaymentBatch: {
      /** @description Optional description of the attachment. */
      description?: string;
      /** @description The reference to the uploaded file to attach to this note. */
      attachment_id: number;
    };
    NoteAttachmentPaymentBatchCreate: {
      /** @description The id of the created item */
      Id?: components["schemas"]["BunqId"];
    };
    NoteAttachmentPaymentBatchDelete: Record<string, never>;
    NoteAttachmentPaymentBatchListing: {
      /** @description The id of the note. */
      id?: number;
      /** @description The timestamp of the note's creation. */
      created?: string;
      /** @description The timestamp of the note's last update. */
      updated?: string;
      /** @description The label of the user who created this note. */
      label_user_creator?: components["schemas"]["LabelUser"];
      /** @description Optional description of the attachment. */
      description?: string;
      /** @description The attachment attached to the note. */
      attachment?: readonly components["schemas"]["AttachmentMonetaryAccountPayment"][];
    };
    NoteAttachmentPaymentBatchRead: {
      /** @description The id of the note. */
      id?: number;
      /** @description The timestamp of the note's creation. */
      created?: string;
      /** @description The timestamp of the note's last update. */
      updated?: string;
      /** @description The label of the user who created this note. */
      label_user_creator?: components["schemas"]["LabelUser"];
      /** @description Optional description of the attachment. */
      description?: string;
      /** @description The attachment attached to the note. */
      attachment?: readonly components["schemas"]["AttachmentMonetaryAccountPayment"][];
    };
    NoteAttachmentPaymentBatchUpdate: {
      /** @description The id of the created item */
      Id?: components["schemas"]["BunqId"];
    };
    NoteAttachmentPaymentCreate: {
      /** @description The id of the created item */
      Id?: components["schemas"]["BunqId"];
    };
    NoteAttachmentPaymentDelete: Record<string, never>;
    NoteAttachmentPaymentListing: {
      /** @description The id of the note. */
      id?: number;
      /** @description The timestamp of the note's creation. */
      created?: string;
      /** @description The timestamp of the note's last update. */
      updated?: string;
      /** @description The label of the user who created this note. */
      label_user_creator?: components["schemas"]["LabelUser"];
      /** @description Optional description of the attachment. */
      description?: string;
      /** @description The attachment attached to the note. */
      attachment?: readonly components["schemas"]["AttachmentMonetaryAccountPayment"][];
    };
    NoteAttachmentPaymentRead: {
      /** @description The id of the note. */
      id?: number;
      /** @description The timestamp of the note's creation. */
      created?: string;
      /** @description The timestamp of the note's last update. */
      updated?: string;
      /** @description The label of the user who created this note. */
      label_user_creator?: components["schemas"]["LabelUser"];
      /** @description Optional description of the attachment. */
      description?: string;
      /** @description The attachment attached to the note. */
      attachment?: readonly components["schemas"]["AttachmentMonetaryAccountPayment"][];
    };
    NoteAttachmentPaymentUpdate: {
      /** @description The id of the created item */
      Id?: components["schemas"]["BunqId"];
    };
    NoteAttachmentRequestInquiry: {
      /** @description Optional description of the attachment. */
      description?: string;
      /** @description The reference to the uploaded file to attach to this note. */
      attachment_id: number;
    };
    NoteAttachmentRequestInquiryBatch: {
      /** @description Optional description of the attachment. */
      description?: string;
      /** @description The reference to the uploaded file to attach to this note. */
      attachment_id: number;
    };
    NoteAttachmentRequestInquiryBatchCreate: {
      /** @description The id of the created item */
      Id?: components["schemas"]["BunqId"];
    };
    NoteAttachmentRequestInquiryBatchDelete: Record<string, never>;
    NoteAttachmentRequestInquiryBatchListing: {
      /** @description The id of the note. */
      id?: number;
      /** @description The timestamp of the note's creation. */
      created?: string;
      /** @description The timestamp of the note's last update. */
      updated?: string;
      /** @description The label of the user who created this note. */
      label_user_creator?: components["schemas"]["LabelUser"];
      /** @description Optional description of the attachment. */
      description?: string;
      /** @description The attachment attached to the note. */
      attachment?: readonly components["schemas"]["AttachmentMonetaryAccountPayment"][];
    };
    NoteAttachmentRequestInquiryBatchRead: {
      /** @description The id of the note. */
      id?: number;
      /** @description The timestamp of the note's creation. */
      created?: string;
      /** @description The timestamp of the note's last update. */
      updated?: string;
      /** @description The label of the user who created this note. */
      label_user_creator?: components["schemas"]["LabelUser"];
      /** @description Optional description of the attachment. */
      description?: string;
      /** @description The attachment attached to the note. */
      attachment?: readonly components["schemas"]["AttachmentMonetaryAccountPayment"][];
    };
    NoteAttachmentRequestInquiryBatchUpdate: {
      /** @description The id of the created item */
      Id?: components["schemas"]["BunqId"];
    };
    NoteAttachmentRequestInquiryCreate: {
      /** @description The id of the created item */
      Id?: components["schemas"]["BunqId"];
    };
    NoteAttachmentRequestInquiryDelete: Record<string, never>;
    NoteAttachmentRequestInquiryListing: {
      /** @description The id of the note. */
      id?: number;
      /** @description The timestamp of the note's creation. */
      created?: string;
      /** @description The timestamp of the note's last update. */
      updated?: string;
      /** @description The label of the user who created this note. */
      label_user_creator?: components["schemas"]["LabelUser"];
      /** @description Optional description of the attachment. */
      description?: string;
      /** @description The attachment attached to the note. */
      attachment?: readonly components["schemas"]["AttachmentMonetaryAccountPayment"][];
    };
    NoteAttachmentRequestInquiryRead: {
      /** @description The id of the note. */
      id?: number;
      /** @description The timestamp of the note's creation. */
      created?: string;
      /** @description The timestamp of the note's last update. */
      updated?: string;
      /** @description The label of the user who created this note. */
      label_user_creator?: components["schemas"]["LabelUser"];
      /** @description Optional description of the attachment. */
      description?: string;
      /** @description The attachment attached to the note. */
      attachment?: readonly components["schemas"]["AttachmentMonetaryAccountPayment"][];
    };
    NoteAttachmentRequestInquiryUpdate: {
      /** @description The id of the created item */
      Id?: components["schemas"]["BunqId"];
    };
    NoteAttachmentRequestResponse: {
      /** @description Optional description of the attachment. */
      description?: string;
      /** @description The reference to the uploaded file to attach to this note. */
      attachment_id: number;
    };
    NoteAttachmentRequestResponseCreate: {
      /** @description The id of the created item */
      Id?: components["schemas"]["BunqId"];
    };
    NoteAttachmentRequestResponseDelete: Record<string, never>;
    NoteAttachmentRequestResponseListing: {
      /** @description The id of the note. */
      id?: number;
      /** @description The timestamp of the note's creation. */
      created?: string;
      /** @description The timestamp of the note's last update. */
      updated?: string;
      /** @description The label of the user who created this note. */
      label_user_creator?: components["schemas"]["LabelUser"];
      /** @description Optional description of the attachment. */
      description?: string;
      /** @description The attachment attached to the note. */
      attachment?: readonly components["schemas"]["AttachmentMonetaryAccountPayment"][];
    };
    NoteAttachmentRequestResponseRead: {
      /** @description The id of the note. */
      id?: number;
      /** @description The timestamp of the note's creation. */
      created?: string;
      /** @description The timestamp of the note's last update. */
      updated?: string;
      /** @description The label of the user who created this note. */
      label_user_creator?: components["schemas"]["LabelUser"];
      /** @description Optional description of the attachment. */
      description?: string;
      /** @description The attachment attached to the note. */
      attachment?: readonly components["schemas"]["AttachmentMonetaryAccountPayment"][];
    };
    NoteAttachmentRequestResponseUpdate: {
      /** @description The id of the created item */
      Id?: components["schemas"]["BunqId"];
    };
    NoteAttachmentScheduleInstance: {
      /** @description Optional description of the attachment. */
      description?: string;
      /** @description The reference to the uploaded file to attach to this note. */
      attachment_id: number;
    };
    NoteAttachmentScheduleInstanceCreate: {
      /** @description The id of the created item */
      Id?: components["schemas"]["BunqId"];
    };
    NoteAttachmentScheduleInstanceDelete: Record<string, never>;
    NoteAttachmentScheduleInstanceListing: {
      /** @description The id of the note. */
      id?: number;
      /** @description The timestamp of the note's creation. */
      created?: string;
      /** @description The timestamp of the note's last update. */
      updated?: string;
      /** @description The label of the user who created this note. */
      label_user_creator?: components["schemas"]["LabelUser"];
      /** @description Optional description of the attachment. */
      description?: string;
      /** @description The attachment attached to the note. */
      attachment?: readonly components["schemas"]["AttachmentMonetaryAccountPayment"][];
    };
    NoteAttachmentScheduleInstanceRead: {
      /** @description The id of the note. */
      id?: number;
      /** @description The timestamp of the note's creation. */
      created?: string;
      /** @description The timestamp of the note's last update. */
      updated?: string;
      /** @description The label of the user who created this note. */
      label_user_creator?: components["schemas"]["LabelUser"];
      /** @description Optional description of the attachment. */
      description?: string;
      /** @description The attachment attached to the note. */
      attachment?: readonly components["schemas"]["AttachmentMonetaryAccountPayment"][];
    };
    NoteAttachmentScheduleInstanceUpdate: {
      /** @description The id of the created item */
      Id?: components["schemas"]["BunqId"];
    };
    NoteAttachmentSchedulePayment: {
      /** @description Optional description of the attachment. */
      description?: string;
      /** @description The reference to the uploaded file to attach to this note. */
      attachment_id: number;
    };
    NoteAttachmentSchedulePaymentBatch: {
      /** @description Optional description of the attachment. */
      description?: string;
      /** @description The reference to the uploaded file to attach to this note. */
      attachment_id: number;
    };
    NoteAttachmentSchedulePaymentBatchCreate: {
      /** @description The id of the created item */
      Id?: components["schemas"]["BunqId"];
    };
    NoteAttachmentSchedulePaymentBatchDelete: Record<string, never>;
    NoteAttachmentSchedulePaymentBatchListing: {
      /** @description The id of the note. */
      id?: number;
      /** @description The timestamp of the note's creation. */
      created?: string;
      /** @description The timestamp of the note's last update. */
      updated?: string;
      /** @description The label of the user who created this note. */
      label_user_creator?: components["schemas"]["LabelUser"];
      /** @description Optional description of the attachment. */
      description?: string;
      /** @description The attachment attached to the note. */
      attachment?: readonly components["schemas"]["AttachmentMonetaryAccountPayment"][];
    };
    NoteAttachmentSchedulePaymentBatchRead: {
      /** @description The id of the note. */
      id?: number;
      /** @description The timestamp of the note's creation. */
      created?: string;
      /** @description The timestamp of the note's last update. */
      updated?: string;
      /** @description The label of the user who created this note. */
      label_user_creator?: components["schemas"]["LabelUser"];
      /** @description Optional description of the attachment. */
      description?: string;
      /** @description The attachment attached to the note. */
      attachment?: readonly components["schemas"]["AttachmentMonetaryAccountPayment"][];
    };
    NoteAttachmentSchedulePaymentBatchUpdate: {
      /** @description The id of the created item */
      Id?: components["schemas"]["BunqId"];
    };
    NoteAttachmentSchedulePaymentCreate: {
      /** @description The id of the created item */
      Id?: components["schemas"]["BunqId"];
    };
    NoteAttachmentSchedulePaymentDelete: Record<string, never>;
    NoteAttachmentSchedulePaymentListing: {
      /** @description The id of the note. */
      id?: number;
      /** @description The timestamp of the note's creation. */
      created?: string;
      /** @description The timestamp of the note's last update. */
      updated?: string;
      /** @description The label of the user who created this note. */
      label_user_creator?: components["schemas"]["LabelUser"];
      /** @description Optional description of the attachment. */
      description?: string;
      /** @description The attachment attached to the note. */
      attachment?: readonly components["schemas"]["AttachmentMonetaryAccountPayment"][];
    };
    NoteAttachmentSchedulePaymentRead: {
      /** @description The id of the note. */
      id?: number;
      /** @description The timestamp of the note's creation. */
      created?: string;
      /** @description The timestamp of the note's last update. */
      updated?: string;
      /** @description The label of the user who created this note. */
      label_user_creator?: components["schemas"]["LabelUser"];
      /** @description Optional description of the attachment. */
      description?: string;
      /** @description The attachment attached to the note. */
      attachment?: readonly components["schemas"]["AttachmentMonetaryAccountPayment"][];
    };
    NoteAttachmentSchedulePaymentUpdate: {
      /** @description The id of the created item */
      Id?: components["schemas"]["BunqId"];
    };
    NoteAttachmentSofortMerchantTransaction: {
      /** @description Optional description of the attachment. */
      description?: string;
      /** @description The reference to the uploaded file to attach to this note. */
      attachment_id: number;
    };
    NoteAttachmentSofortMerchantTransactionCreate: {
      /** @description The id of the created item */
      Id?: components["schemas"]["BunqId"];
    };
    NoteAttachmentSofortMerchantTransactionDelete: Record<string, never>;
    NoteAttachmentSofortMerchantTransactionListing: {
      /** @description The id of the note. */
      id?: number;
      /** @description The timestamp of the note's creation. */
      created?: string;
      /** @description The timestamp of the note's last update. */
      updated?: string;
      /** @description The label of the user who created this note. */
      label_user_creator?: components["schemas"]["LabelUser"];
      /** @description Optional description of the attachment. */
      description?: string;
      /** @description The attachment attached to the note. */
      attachment?: readonly components["schemas"]["AttachmentMonetaryAccountPayment"][];
    };
    NoteAttachmentSofortMerchantTransactionRead: {
      /** @description The id of the note. */
      id?: number;
      /** @description The timestamp of the note's creation. */
      created?: string;
      /** @description The timestamp of the note's last update. */
      updated?: string;
      /** @description The label of the user who created this note. */
      label_user_creator?: components["schemas"]["LabelUser"];
      /** @description Optional description of the attachment. */
      description?: string;
      /** @description The attachment attached to the note. */
      attachment?: readonly components["schemas"]["AttachmentMonetaryAccountPayment"][];
    };
    NoteAttachmentSofortMerchantTransactionUpdate: {
      /** @description The id of the created item */
      Id?: components["schemas"]["BunqId"];
    };
    NoteAttachmentWhitelistResult: {
      /** @description Optional description of the attachment. */
      description?: string;
      /** @description The reference to the uploaded file to attach to this note. */
      attachment_id: number;
    };
    NoteAttachmentWhitelistResultCreate: {
      /** @description The id of the created item */
      Id?: components["schemas"]["BunqId"];
    };
    NoteAttachmentWhitelistResultDelete: Record<string, never>;
    NoteAttachmentWhitelistResultListing: {
      /** @description The id of the note. */
      id?: number;
      /** @description The timestamp of the note's creation. */
      created?: string;
      /** @description The timestamp of the note's last update. */
      updated?: string;
      /** @description The label of the user who created this note. */
      label_user_creator?: components["schemas"]["LabelUser"];
      /** @description Optional description of the attachment. */
      description?: string;
      /** @description The attachment attached to the note. */
      attachment?: readonly components["schemas"]["AttachmentMonetaryAccountPayment"][];
    };
    NoteAttachmentWhitelistResultRead: {
      /** @description The id of the note. */
      id?: number;
      /** @description The timestamp of the note's creation. */
      created?: string;
      /** @description The timestamp of the note's last update. */
      updated?: string;
      /** @description The label of the user who created this note. */
      label_user_creator?: components["schemas"]["LabelUser"];
      /** @description Optional description of the attachment. */
      description?: string;
      /** @description The attachment attached to the note. */
      attachment?: readonly components["schemas"]["AttachmentMonetaryAccountPayment"][];
    };
    NoteAttachmentWhitelistResultUpdate: {
      /** @description The id of the created item */
      Id?: components["schemas"]["BunqId"];
    };
    NoteTextAdyenCardTransaction: {
      /** @description The content of the note. */
      content?: string;
    };
    NoteTextAdyenCardTransactionCreate: {
      /** @description The id of the created item */
      Id?: components["schemas"]["BunqId"];
    };
    NoteTextAdyenCardTransactionDelete: Record<string, never>;
    NoteTextAdyenCardTransactionListing: {
      /** @description The id of the note. */
      id?: number;
      /** @description The timestamp of the note's creation. */
      created?: string;
      /** @description The timestamp of the note's last update. */
      updated?: string;
      /** @description The label of the user who created this note. */
      label_user_creator?: components["schemas"]["LabelUser"];
      /** @description The content of the note. */
      content?: string;
    };
    NoteTextAdyenCardTransactionRead: {
      /** @description The id of the note. */
      id?: number;
      /** @description The timestamp of the note's creation. */
      created?: string;
      /** @description The timestamp of the note's last update. */
      updated?: string;
      /** @description The label of the user who created this note. */
      label_user_creator?: components["schemas"]["LabelUser"];
      /** @description The content of the note. */
      content?: string;
    };
    NoteTextAdyenCardTransactionUpdate: {
      /** @description The id of the created item */
      Id?: components["schemas"]["BunqId"];
    };
    NoteTextBankSwitchServiceNetherlandsIncomingPayment: {
      /** @description The content of the note. */
      content?: string;
    };
    NoteTextBankSwitchServiceNetherlandsIncomingPaymentCreate: {
      /** @description The id of the created item */
      Id?: components["schemas"]["BunqId"];
    };
    NoteTextBankSwitchServiceNetherlandsIncomingPaymentDelete: Record<string, never>;
    NoteTextBankSwitchServiceNetherlandsIncomingPaymentListing: {
      /** @description The id of the note. */
      id?: number;
      /** @description The timestamp of the note's creation. */
      created?: string;
      /** @description The timestamp of the note's last update. */
      updated?: string;
      /** @description The label of the user who created this note. */
      label_user_creator?: components["schemas"]["LabelUser"];
      /** @description The content of the note. */
      content?: string;
    };
    NoteTextBankSwitchServiceNetherlandsIncomingPaymentRead: {
      /** @description The id of the note. */
      id?: number;
      /** @description The timestamp of the note's creation. */
      created?: string;
      /** @description The timestamp of the note's last update. */
      updated?: string;
      /** @description The label of the user who created this note. */
      label_user_creator?: components["schemas"]["LabelUser"];
      /** @description The content of the note. */
      content?: string;
    };
    NoteTextBankSwitchServiceNetherlandsIncomingPaymentUpdate: {
      /** @description The id of the created item */
      Id?: components["schemas"]["BunqId"];
    };
    NoteTextBunqMeFundraiserResult: {
      /** @description The content of the note. */
      content?: string;
    };
    NoteTextBunqMeFundraiserResultCreate: {
      /** @description The id of the created item */
      Id?: components["schemas"]["BunqId"];
    };
    NoteTextBunqMeFundraiserResultDelete: Record<string, never>;
    NoteTextBunqMeFundraiserResultListing: {
      /** @description The id of the note. */
      id?: number;
      /** @description The timestamp of the note's creation. */
      created?: string;
      /** @description The timestamp of the note's last update. */
      updated?: string;
      /** @description The label of the user who created this note. */
      label_user_creator?: components["schemas"]["LabelUser"];
      /** @description The content of the note. */
      content?: string;
    };
    NoteTextBunqMeFundraiserResultRead: {
      /** @description The id of the note. */
      id?: number;
      /** @description The timestamp of the note's creation. */
      created?: string;
      /** @description The timestamp of the note's last update. */
      updated?: string;
      /** @description The label of the user who created this note. */
      label_user_creator?: components["schemas"]["LabelUser"];
      /** @description The content of the note. */
      content?: string;
    };
    NoteTextBunqMeFundraiserResultUpdate: {
      /** @description The id of the created item */
      Id?: components["schemas"]["BunqId"];
    };
    NoteTextDraftPayment: {
      /** @description The content of the note. */
      content?: string;
    };
    NoteTextDraftPaymentCreate: {
      /** @description The id of the created item */
      Id?: components["schemas"]["BunqId"];
    };
    NoteTextDraftPaymentDelete: Record<string, never>;
    NoteTextDraftPaymentListing: {
      /** @description The id of the note. */
      id?: number;
      /** @description The timestamp of the note's creation. */
      created?: string;
      /** @description The timestamp of the note's last update. */
      updated?: string;
      /** @description The label of the user who created this note. */
      label_user_creator?: components["schemas"]["LabelUser"];
      /** @description The content of the note. */
      content?: string;
    };
    NoteTextDraftPaymentRead: {
      /** @description The id of the note. */
      id?: number;
      /** @description The timestamp of the note's creation. */
      created?: string;
      /** @description The timestamp of the note's last update. */
      updated?: string;
      /** @description The label of the user who created this note. */
      label_user_creator?: components["schemas"]["LabelUser"];
      /** @description The content of the note. */
      content?: string;
    };
    NoteTextDraftPaymentUpdate: {
      /** @description The id of the created item */
      Id?: components["schemas"]["BunqId"];
    };
    NoteTextIdealMerchantTransaction: {
      /** @description The content of the note. */
      content?: string;
    };
    NoteTextIdealMerchantTransactionCreate: {
      /** @description The id of the created item */
      Id?: components["schemas"]["BunqId"];
    };
    NoteTextIdealMerchantTransactionDelete: Record<string, never>;
    NoteTextIdealMerchantTransactionListing: {
      /** @description The id of the note. */
      id?: number;
      /** @description The timestamp of the note's creation. */
      created?: string;
      /** @description The timestamp of the note's last update. */
      updated?: string;
      /** @description The label of the user who created this note. */
      label_user_creator?: components["schemas"]["LabelUser"];
      /** @description The content of the note. */
      content?: string;
    };
    NoteTextIdealMerchantTransactionRead: {
      /** @description The id of the note. */
      id?: number;
      /** @description The timestamp of the note's creation. */
      created?: string;
      /** @description The timestamp of the note's last update. */
      updated?: string;
      /** @description The label of the user who created this note. */
      label_user_creator?: components["schemas"]["LabelUser"];
      /** @description The content of the note. */
      content?: string;
    };
    NoteTextIdealMerchantTransactionUpdate: {
      /** @description The id of the created item */
      Id?: components["schemas"]["BunqId"];
    };
    NoteTextMasterCardAction: {
      /** @description The content of the note. */
      content?: string;
    };
    NoteTextMasterCardActionCreate: {
      /** @description The id of the created item */
      Id?: components["schemas"]["BunqId"];
    };
    NoteTextMasterCardActionDelete: Record<string, never>;
    NoteTextMasterCardActionListing: {
      /** @description The id of the note. */
      id?: number;
      /** @description The timestamp of the note's creation. */
      created?: string;
      /** @description The timestamp of the note's last update. */
      updated?: string;
      /** @description The label of the user who created this note. */
      label_user_creator?: components["schemas"]["LabelUser"];
      /** @description The content of the note. */
      content?: string;
    };
    NoteTextMasterCardActionRead: {
      /** @description The id of the note. */
      id?: number;
      /** @description The timestamp of the note's creation. */
      created?: string;
      /** @description The timestamp of the note's last update. */
      updated?: string;
      /** @description The label of the user who created this note. */
      label_user_creator?: components["schemas"]["LabelUser"];
      /** @description The content of the note. */
      content?: string;
    };
    NoteTextMasterCardActionUpdate: {
      /** @description The id of the created item */
      Id?: components["schemas"]["BunqId"];
    };
    NoteTextPayment: {
      /** @description The content of the note. */
      content?: string;
    };
    NoteTextPaymentBatch: {
      /** @description The content of the note. */
      content?: string;
    };
    NoteTextPaymentBatchCreate: {
      /** @description The id of the created item */
      Id?: components["schemas"]["BunqId"];
    };
    NoteTextPaymentBatchDelete: Record<string, never>;
    NoteTextPaymentBatchListing: {
      /** @description The id of the note. */
      id?: number;
      /** @description The timestamp of the note's creation. */
      created?: string;
      /** @description The timestamp of the note's last update. */
      updated?: string;
      /** @description The label of the user who created this note. */
      label_user_creator?: components["schemas"]["LabelUser"];
      /** @description The content of the note. */
      content?: string;
    };
    NoteTextPaymentBatchRead: {
      /** @description The id of the note. */
      id?: number;
      /** @description The timestamp of the note's creation. */
      created?: string;
      /** @description The timestamp of the note's last update. */
      updated?: string;
      /** @description The label of the user who created this note. */
      label_user_creator?: components["schemas"]["LabelUser"];
      /** @description The content of the note. */
      content?: string;
    };
    NoteTextPaymentBatchUpdate: {
      /** @description The id of the created item */
      Id?: components["schemas"]["BunqId"];
    };
    NoteTextPaymentCreate: {
      /** @description The id of the created item */
      Id?: components["schemas"]["BunqId"];
    };
    NoteTextPaymentDelete: Record<string, never>;
    NoteTextPaymentListing: {
      /** @description The id of the note. */
      id?: number;
      /** @description The timestamp of the note's creation. */
      created?: string;
      /** @description The timestamp of the note's last update. */
      updated?: string;
      /** @description The label of the user who created this note. */
      label_user_creator?: components["schemas"]["LabelUser"];
      /** @description The content of the note. */
      content?: string;
    };
    NoteTextPaymentRead: {
      /** @description The id of the note. */
      id?: number;
      /** @description The timestamp of the note's creation. */
      created?: string;
      /** @description The timestamp of the note's last update. */
      updated?: string;
      /** @description The label of the user who created this note. */
      label_user_creator?: components["schemas"]["LabelUser"];
      /** @description The content of the note. */
      content?: string;
    };
    NoteTextPaymentUpdate: {
      /** @description The id of the created item */
      Id?: components["schemas"]["BunqId"];
    };
    NoteTextRequestInquiry: {
      /** @description The content of the note. */
      content?: string;
    };
    NoteTextRequestInquiryBatch: {
      /** @description The content of the note. */
      content?: string;
    };
    NoteTextRequestInquiryBatchCreate: {
      /** @description The id of the created item */
      Id?: components["schemas"]["BunqId"];
    };
    NoteTextRequestInquiryBatchDelete: Record<string, never>;
    NoteTextRequestInquiryBatchListing: {
      /** @description The id of the note. */
      id?: number;
      /** @description The timestamp of the note's creation. */
      created?: string;
      /** @description The timestamp of the note's last update. */
      updated?: string;
      /** @description The label of the user who created this note. */
      label_user_creator?: components["schemas"]["LabelUser"];
      /** @description The content of the note. */
      content?: string;
    };
    NoteTextRequestInquiryBatchRead: {
      /** @description The id of the note. */
      id?: number;
      /** @description The timestamp of the note's creation. */
      created?: string;
      /** @description The timestamp of the note's last update. */
      updated?: string;
      /** @description The label of the user who created this note. */
      label_user_creator?: components["schemas"]["LabelUser"];
      /** @description The content of the note. */
      content?: string;
    };
    NoteTextRequestInquiryBatchUpdate: {
      /** @description The id of the created item */
      Id?: components["schemas"]["BunqId"];
    };
    NoteTextRequestInquiryCreate: {
      /** @description The id of the created item */
      Id?: components["schemas"]["BunqId"];
    };
    NoteTextRequestInquiryDelete: Record<string, never>;
    NoteTextRequestInquiryListing: {
      /** @description The id of the note. */
      id?: number;
      /** @description The timestamp of the note's creation. */
      created?: string;
      /** @description The timestamp of the note's last update. */
      updated?: string;
      /** @description The label of the user who created this note. */
      label_user_creator?: components["schemas"]["LabelUser"];
      /** @description The content of the note. */
      content?: string;
    };
    NoteTextRequestInquiryRead: {
      /** @description The id of the note. */
      id?: number;
      /** @description The timestamp of the note's creation. */
      created?: string;
      /** @description The timestamp of the note's last update. */
      updated?: string;
      /** @description The label of the user who created this note. */
      label_user_creator?: components["schemas"]["LabelUser"];
      /** @description The content of the note. */
      content?: string;
    };
    NoteTextRequestInquiryUpdate: {
      /** @description The id of the created item */
      Id?: components["schemas"]["BunqId"];
    };
    NoteTextRequestResponse: {
      /** @description The content of the note. */
      content?: string;
    };
    NoteTextRequestResponseCreate: {
      /** @description The id of the created item */
      Id?: components["schemas"]["BunqId"];
    };
    NoteTextRequestResponseDelete: Record<string, never>;
    NoteTextRequestResponseListing: {
      /** @description The id of the note. */
      id?: number;
      /** @description The timestamp of the note's creation. */
      created?: string;
      /** @description The timestamp of the note's last update. */
      updated?: string;
      /** @description The label of the user who created this note. */
      label_user_creator?: components["schemas"]["LabelUser"];
      /** @description The content of the note. */
      content?: string;
    };
    NoteTextRequestResponseRead: {
      /** @description The id of the note. */
      id?: number;
      /** @description The timestamp of the note's creation. */
      created?: string;
      /** @description The timestamp of the note's last update. */
      updated?: string;
      /** @description The label of the user who created this note. */
      label_user_creator?: components["schemas"]["LabelUser"];
      /** @description The content of the note. */
      content?: string;
    };
    NoteTextRequestResponseUpdate: {
      /** @description The id of the created item */
      Id?: components["schemas"]["BunqId"];
    };
    NoteTextScheduleInstance: {
      /** @description The content of the note. */
      content?: string;
    };
    NoteTextScheduleInstanceCreate: {
      /** @description The id of the created item */
      Id?: components["schemas"]["BunqId"];
    };
    NoteTextScheduleInstanceDelete: Record<string, never>;
    NoteTextScheduleInstanceListing: {
      /** @description The id of the note. */
      id?: number;
      /** @description The timestamp of the note's creation. */
      created?: string;
      /** @description The timestamp of the note's last update. */
      updated?: string;
      /** @description The label of the user who created this note. */
      label_user_creator?: components["schemas"]["LabelUser"];
      /** @description The content of the note. */
      content?: string;
    };
    NoteTextScheduleInstanceRead: {
      /** @description The id of the note. */
      id?: number;
      /** @description The timestamp of the note's creation. */
      created?: string;
      /** @description The timestamp of the note's last update. */
      updated?: string;
      /** @description The label of the user who created this note. */
      label_user_creator?: components["schemas"]["LabelUser"];
      /** @description The content of the note. */
      content?: string;
    };
    NoteTextScheduleInstanceUpdate: {
      /** @description The id of the created item */
      Id?: components["schemas"]["BunqId"];
    };
    NoteTextSchedulePayment: {
      /** @description The content of the note. */
      content?: string;
    };
    NoteTextSchedulePaymentBatch: {
      /** @description The content of the note. */
      content?: string;
    };
    NoteTextSchedulePaymentBatchCreate: {
      /** @description The id of the created item */
      Id?: components["schemas"]["BunqId"];
    };
    NoteTextSchedulePaymentBatchDelete: Record<string, never>;
    NoteTextSchedulePaymentBatchListing: {
      /** @description The id of the note. */
      id?: number;
      /** @description The timestamp of the note's creation. */
      created?: string;
      /** @description The timestamp of the note's last update. */
      updated?: string;
      /** @description The label of the user who created this note. */
      label_user_creator?: components["schemas"]["LabelUser"];
      /** @description The content of the note. */
      content?: string;
    };
    NoteTextSchedulePaymentBatchRead: {
      /** @description The id of the note. */
      id?: number;
      /** @description The timestamp of the note's creation. */
      created?: string;
      /** @description The timestamp of the note's last update. */
      updated?: string;
      /** @description The label of the user who created this note. */
      label_user_creator?: components["schemas"]["LabelUser"];
      /** @description The content of the note. */
      content?: string;
    };
    NoteTextSchedulePaymentBatchUpdate: {
      /** @description The id of the created item */
      Id?: components["schemas"]["BunqId"];
    };
    NoteTextSchedulePaymentCreate: {
      /** @description The id of the created item */
      Id?: components["schemas"]["BunqId"];
    };
    NoteTextSchedulePaymentDelete: Record<string, never>;
    NoteTextSchedulePaymentListing: {
      /** @description The id of the note. */
      id?: number;
      /** @description The timestamp of the note's creation. */
      created?: string;
      /** @description The timestamp of the note's last update. */
      updated?: string;
      /** @description The label of the user who created this note. */
      label_user_creator?: components["schemas"]["LabelUser"];
      /** @description The content of the note. */
      content?: string;
    };
    NoteTextSchedulePaymentRead: {
      /** @description The id of the note. */
      id?: number;
      /** @description The timestamp of the note's creation. */
      created?: string;
      /** @description The timestamp of the note's last update. */
      updated?: string;
      /** @description The label of the user who created this note. */
      label_user_creator?: components["schemas"]["LabelUser"];
      /** @description The content of the note. */
      content?: string;
    };
    NoteTextSchedulePaymentUpdate: {
      /** @description The id of the created item */
      Id?: components["schemas"]["BunqId"];
    };
    NoteTextSofortMerchantTransaction: {
      /** @description The content of the note. */
      content?: string;
    };
    NoteTextSofortMerchantTransactionCreate: {
      /** @description The id of the created item */
      Id?: components["schemas"]["BunqId"];
    };
    NoteTextSofortMerchantTransactionDelete: Record<string, never>;
    NoteTextSofortMerchantTransactionListing: {
      /** @description The id of the note. */
      id?: number;
      /** @description The timestamp of the note's creation. */
      created?: string;
      /** @description The timestamp of the note's last update. */
      updated?: string;
      /** @description The label of the user who created this note. */
      label_user_creator?: components["schemas"]["LabelUser"];
      /** @description The content of the note. */
      content?: string;
    };
    NoteTextSofortMerchantTransactionRead: {
      /** @description The id of the note. */
      id?: number;
      /** @description The timestamp of the note's creation. */
      created?: string;
      /** @description The timestamp of the note's last update. */
      updated?: string;
      /** @description The label of the user who created this note. */
      label_user_creator?: components["schemas"]["LabelUser"];
      /** @description The content of the note. */
      content?: string;
    };
    NoteTextSofortMerchantTransactionUpdate: {
      /** @description The id of the created item */
      Id?: components["schemas"]["BunqId"];
    };
    NoteTextWhitelistResult: {
      /** @description The content of the note. */
      content?: string;
    };
    NoteTextWhitelistResultCreate: {
      /** @description The id of the created item */
      Id?: components["schemas"]["BunqId"];
    };
    NoteTextWhitelistResultDelete: Record<string, never>;
    NoteTextWhitelistResultListing: {
      /** @description The id of the note. */
      id?: number;
      /** @description The timestamp of the note's creation. */
      created?: string;
      /** @description The timestamp of the note's last update. */
      updated?: string;
      /** @description The label of the user who created this note. */
      label_user_creator?: components["schemas"]["LabelUser"];
      /** @description The content of the note. */
      content?: string;
    };
    NoteTextWhitelistResultRead: {
      /** @description The id of the note. */
      id?: number;
      /** @description The timestamp of the note's creation. */
      created?: string;
      /** @description The timestamp of the note's last update. */
      updated?: string;
      /** @description The label of the user who created this note. */
      label_user_creator?: components["schemas"]["LabelUser"];
      /** @description The content of the note. */
      content?: string;
    };
    NoteTextWhitelistResultUpdate: {
      /** @description The id of the created item */
      Id?: components["schemas"]["BunqId"];
    };
    NotificationFilter: {
      /** @description The delivery method via which notifications that match this notification filter will be delivered. Possible choices are PUSH for delivery via push notification and URL for delivery via URL callback. */
      notification_delivery_method?: string;
      /** @description The target of notifications that match this notification filter. For URL notification filters this is the URL to which the callback will be made. For PUSH notifications filters this should always be null. */
      notification_target?: string;
      /** @description The notification category that will match this notification filter. Possible choices are BILLING, CARD_TRANSACTION_FAILED, CARD_TRANSACTION_SUCCESSFUL, CHAT, DRAFT_PAYMENT, IDEAL, SOFORT, MONETARY_ACCOUNT_PROFILE, MUTATION, PAYMENT, PROMOTION, REQUEST, SCHEDULE_RESULT, SCHEDULE_STATUS, SHARE, SUPPORT, TAB_RESULT, USER_APPROVAL. */
      category?: string;
    };
    NotificationFilterEmail: {
      /** @description The types of notifications that will result in a email notification for this user. */
      notification_filters?: components["schemas"]["NotificationFilterEmail"][];
    };
    NotificationFilterEmailCreate: {
      /** @description The id of the created item */
      Id?: components["schemas"]["BunqId"];
    };
    NotificationFilterEmailListing: {
      /** @description The types of notifications that will result in a email notification for this user. */
      notification_filters?: readonly components["schemas"]["NotificationFilterEmail"][];
    };
    NotificationFilterFailure: {
      /** @description The IDs to retry. */
      notification_filter_failed_ids: string;
    };
    NotificationFilterFailureCreate: {
      /** @description The id of the created item */
      Id?: components["schemas"]["BunqId"];
    };
    NotificationFilterFailureListing: {
      /** @description The types of notifications that will result in a url notification for this user. */
      notification_filters?: readonly components["schemas"]["NotificationFilter"][];
      /** @description The category of the failed notification. */
      category?: string;
      /** @description The event type of the failed notification. */
      event_type?: string;
      /** @description The object id used to generate the body of the notification. */
      object_id?: number;
      /** @description The exception bunq encountered when processing the callback. */
      exception_message?: string;
      /** @description The response code (or null) received from the endpoint. */
      response_code?: number;
    };
    NotificationFilterPush: {
      /** @description The types of notifications that will result in a push notification for this user. */
      notification_filters?: components["schemas"]["NotificationFilterPush"][];
    };
    NotificationFilterPushCreate: {
      /** @description The id of the created item */
      Id?: components["schemas"]["BunqId"];
    };
    NotificationFilterPushListing: {
      /** @description The types of notifications that will result in a push notification for this user. */
      notification_filters?: readonly components["schemas"]["NotificationFilterPush"][];
    };
    NotificationFilterUrl: {
      /** @description The types of notifications that will result in a url notification for this user. */
      notification_filters?: components["schemas"]["NotificationFilterUrl"][];
    };
    NotificationFilterUrlCreate: {
      /** @description The id of the created item */
      Id?: components["schemas"]["BunqId"];
    };
    NotificationFilterUrlListing: {
      /** @description The types of notifications that will result in a url notification for this user. */
      notification_filters?: readonly components["schemas"]["NotificationFilterUrl"][];
    };
    NotificationFilterUrlMonetaryAccount: {
      /** @description The types of notifications that will result in a url notification for this monetary account. */
      notification_filters?: components["schemas"]["NotificationFilterUrl"][];
    };
    NotificationFilterUrlMonetaryAccountCreate: {
      /** @description The id of the created item */
      Id?: components["schemas"]["BunqId"];
    };
    NotificationFilterUrlMonetaryAccountListing: {
      /** @description The types of notifications that will result in a url notification for this monetary account. */
      notification_filters?: readonly components["schemas"]["NotificationFilterUrl"][];
    };
    OauthCallbackUrl: {
      /** @description The URL for this callback. */
      url: string;
    };
    OauthCallbackUrlCreate: {
      /** @description The id of the created item */
      Id?: components["schemas"]["BunqId"];
    };
    OauthCallbackUrlDelete: Record<string, never>;
    OauthCallbackUrlListing: {
      /** @description The URL for this callback. */
      url?: string;
    };
    OauthCallbackUrlRead: {
      /** @description The URL for this callback. */
      url?: string;
    };
    OauthCallbackUrlUpdate: {
      /** @description The id of the created item */
      Id?: components["schemas"]["BunqId"];
    };
    OauthClient: {
      /** @description The status of the Oauth Client, can be ACTIVE or CANCELLED. */
      status?: string;
    };
    OauthClientCreate: {
      /** @description The id of the created item */
      Id?: components["schemas"]["BunqId"];
    };
    OauthClientListing: {
      /** @description Id of the client. */
      id?: number;
      /** @description The status of the pack group, can be ACTIVE, CANCELLED or CANCELLED_PENDING. */
      status?: string;
      /** @description The display name of this Oauth Client */
      display_name?: string;
      /** @description The Client ID associated with this Oauth Client */
      client_id?: string;
      /** @description Secret associated with this Oauth Client */
      secret?: string;
      /** @description The callback URLs which are bound to this Oauth Client */
      callback_url?: readonly components["schemas"]["OauthCallbackUrl"][];
    };
    OauthClientRead: {
      /** @description Id of the client. */
      id?: number;
      /** @description The status of the pack group, can be ACTIVE, CANCELLED or CANCELLED_PENDING. */
      status?: string;
      /** @description The display name of this Oauth Client */
      display_name?: string;
      /** @description The Client ID associated with this Oauth Client */
      client_id?: string;
      /** @description Secret associated with this Oauth Client */
      secret?: string;
      /** @description The callback URLs which are bound to this Oauth Client */
      callback_url?: readonly components["schemas"]["OauthCallbackUrl"][];
    };
    OauthClientUpdate: {
      /** @description The id of the created item */
      Id?: components["schemas"]["BunqId"];
    };
    Payment: {
      /** @description The Amount transferred by the Payment. Will be negative for outgoing Payments and positive for incoming Payments (relative to the MonetaryAccount indicated by monetary_account_id). */
      amount?: components["schemas"]["Amount"];
      /** @description The LabelMonetaryAccount containing the public information of the other (counterparty) side of the Payment. */
      counterparty_alias?: components["schemas"]["LabelMonetaryAccount"];
      /** @description The description for the Payment. Maximum 140 characters for Payments to external IBANs, 9000 characters for Payments to only other bunq MonetaryAccounts. */
      description?: string;
      /** @description The Attachments attached to the Payment. */
      attachment?: components["schemas"]["AttachmentMonetaryAccountPayment"][];
      /** @description Optional data included with the Payment specific to the merchant. */
      merchant_reference?: string;
      /** @description Whether or not sending a bunq.to payment is allowed. */
      allow_bunqto?: boolean;
      /** @description The id of the created Payment. */
      id?: number;
      /** @description The timestamp when the Payment was done. */
      created?: string;
      /** @description The timestamp when the Payment was last updated (will be updated when chat messages are received). */
      updated?: string;
      /** @description The id of the MonetaryAccount the Payment was made to or from (depending on whether this is an incoming or outgoing Payment). */
      monetary_account_id?: number;
      /** @description The LabelMonetaryAccount containing the public information of 'this' (party) side of the Payment. */
      alias?: components["schemas"]["LabelMonetaryAccount"];
      /** @description The type of Payment, can be BUNQ, EBA_SCT, EBA_SDD, IDEAL, SWIFT or FIS (card). */
      type?: string;
      /** @description The sub-type of the Payment, can be PAYMENT, WITHDRAWAL, REVERSAL, REQUEST, BILLING, SCT, SDD or NLO. */
      sub_type?: string;
      /** @description The status of the bunq.to payment. */
      bunqto_status?: string;
      /** @description The sub status of the bunq.to payment. */
      bunqto_sub_status?: string;
      /** @description The status of the bunq.to payment. */
      bunqto_share_url?: string;
      /** @description When bunq.to payment is about to expire. */
      bunqto_expiry?: string;
      /** @description The timestamp of when the bunq.to payment was responded to. */
      bunqto_time_responded?: string;
      /** @description The id of the PaymentBatch if this Payment was part of one. */
      batch_id?: number;
      /** @description The id of the JobScheduled if the Payment was scheduled. */
      scheduled_id?: number;
      /** @description A shipping Address provided with the Payment, currently unused. */
      address_shipping?: components["schemas"]["Address"];
      /** @description A billing Address provided with the Payment, currently unused. */
      address_billing?: components["schemas"]["Address"];
      /** @description The Geolocation where the Payment was done from. */
      geolocation?: components["schemas"]["Geolocation"];
      /** @description The reference to the object used for split the bill. Can be RequestInquiry or RequestInquiryBatch */
      request_reference_split_the_bill?: readonly components["schemas"]["RequestInquiryReference"][];
      /** @description The new balance of the monetary account after the mutation. */
      balance_after_mutation?: components["schemas"]["Amount"];
      /** @description A reference to the PaymentAutoAllocateInstance if it exists. */
      payment_auto_allocate_instance?: components["schemas"]["PaymentAutoAllocateInstance"];
    };
    PaymentAutoAllocate: {
      /** @description The payment that should be used to define the triggers for the payment auto allocate. */
      payment_id: number;
      /** @description Whether a payment should be sorted ONCE or RECURRING. */
      type: string;
      /** @description The definition of how the money should be allocated. */
      definition: components["schemas"]["PaymentAutoAllocateDefinition"][];
    };
    PaymentAutoAllocateCreate: {
      /** @description The id of the created item */
      Id?: components["schemas"]["BunqId"];
    };
    PaymentAutoAllocateDefinition: {
      /** @description The type of definition. */
      type: string;
      /** @description The alias of the party we are allocating the money to. */
      counterparty_alias?: components["schemas"]["Pointer"];
      /** @description The description for the payment. */
      description?: string;
      /** @description The amount to allocate. */
      amount?: components["schemas"]["Amount"];
      /** @description The percentage of the triggering payment's amount to allocate. */
      fraction?: number;
      /** @description The id of the PaymentAutoAllocateDefinition. */
      id?: number;
      /** @description The timestamp when the PaymentAutoAllocateDefinition was created. */
      created?: string;
      /** @description The timestamp when the PaymentAutoAllocateDefinition was last updated. */
      updated?: string;
    };
    PaymentAutoAllocateDefinitionListing: {
      /** @description The id of the PaymentAutoAllocateDefinition. */
      id?: number;
      /** @description The timestamp when the PaymentAutoAllocateDefinition was created. */
      created?: string;
      /** @description The timestamp when the PaymentAutoAllocateDefinition was last updated. */
      updated?: string;
      /** @description The alias of the party we are allocating the money to. */
      counterparty_alias?: components["schemas"]["Pointer"];
      /** @description The description for the payment. */
      description?: string;
      /** @description The amount to allocate. */
      amount?: components["schemas"]["Amount"];
      /** @description The percentage of the triggering payment's amount to allocate. */
      fraction?: number;
    };
    PaymentAutoAllocateDelete: Record<string, never>;
    PaymentAutoAllocateInstance: {
      /** @description The id of the PaymentAutoAllocateInstance. */
      id?: number;
      /** @description The timestamp when the PaymentAutoAllocateInstance was created. */
      created?: string;
      /** @description The timestamp when the PaymentAutoAllocateInstance was last updated. */
      updated?: string;
      /** @description The ID of the payment auto allocate this instance belongs to. */
      payment_auto_allocate_id?: number;
      /** @description The status of the payment auto allocate instance. SUCCEEDED or FAILED. */
      status?: string;
      /** @description The error message, if the payment auto allocating failed. */
      error_message?: readonly components["schemas"]["Error"][];
      /** @description The payment batch allocating all the payments. */
      payment_batch?: components["schemas"]["PaymentBatch"];
      /** @description The ID of the payment that triggered the allocating of the payments. */
      payment_id?: number;
    };
    PaymentAutoAllocateInstanceListing: {
      /** @description The id of the PaymentAutoAllocateInstance. */
      id?: number;
      /** @description The timestamp when the PaymentAutoAllocateInstance was created. */
      created?: string;
      /** @description The timestamp when the PaymentAutoAllocateInstance was last updated. */
      updated?: string;
      /** @description The ID of the payment auto allocate this instance belongs to. */
      payment_auto_allocate_id?: number;
      /** @description The status of the payment auto allocate instance. SUCCEEDED or FAILED. */
      status?: string;
      /** @description The error message, if the payment auto allocating failed. */
      error_message?: readonly components["schemas"]["Error"][];
      /** @description The payment batch allocating all the payments. */
      payment_batch?: components["schemas"]["PaymentBatch"];
      /** @description The ID of the payment that triggered the allocating of the payments. */
      payment_id?: number;
    };
    PaymentAutoAllocateInstanceRead: {
      /** @description The id of the PaymentAutoAllocateInstance. */
      id?: number;
      /** @description The timestamp when the PaymentAutoAllocateInstance was created. */
      created?: string;
      /** @description The timestamp when the PaymentAutoAllocateInstance was last updated. */
      updated?: string;
      /** @description The ID of the payment auto allocate this instance belongs to. */
      payment_auto_allocate_id?: number;
      /** @description The status of the payment auto allocate instance. SUCCEEDED or FAILED. */
      status?: string;
      /** @description The error message, if the payment auto allocating failed. */
      error_message?: readonly components["schemas"]["Error"][];
      /** @description The payment batch allocating all the payments. */
      payment_batch?: components["schemas"]["PaymentBatch"];
      /** @description The ID of the payment that triggered the allocating of the payments. */
      payment_id?: number;
    };
    PaymentAutoAllocateListing: {
      /** @description The id of the PaymentAutoAllocate. */
      id?: number;
      /** @description The timestamp when the PaymentAutoAllocate was created. */
      created?: string;
      /** @description The timestamp when the PaymentAutoAllocate was last updated. */
      updated?: string;
      /** @description The type. */
      type?: string;
      /** @description The status. */
      status?: string;
      /** @description The amount on which this payment auto allocate will be triggered. */
      trigger_amount?: components["schemas"]["Amount"];
      /** @description DEPRECATED: superseded by `payment_original` and `payment_latest` */
      payment?: components["schemas"]["Payment"];
      /** @description The payment that was used to define the triggers for this payment auto allocate. */
      payment_original?: components["schemas"]["Payment"];
      /** @description The latest payment allocated using this payment auto allocate. */
      payment_latest?: components["schemas"]["Payment"];
    };
    PaymentAutoAllocateRead: {
      /** @description The id of the PaymentAutoAllocate. */
      id?: number;
      /** @description The timestamp when the PaymentAutoAllocate was created. */
      created?: string;
      /** @description The timestamp when the PaymentAutoAllocate was last updated. */
      updated?: string;
      /** @description The type. */
      type?: string;
      /** @description The status. */
      status?: string;
      /** @description The amount on which this payment auto allocate will be triggered. */
      trigger_amount?: components["schemas"]["Amount"];
      /** @description DEPRECATED: superseded by `payment_original` and `payment_latest` */
      payment?: components["schemas"]["Payment"];
      /** @description The payment that was used to define the triggers for this payment auto allocate. */
      payment_original?: components["schemas"]["Payment"];
      /** @description The latest payment allocated using this payment auto allocate. */
      payment_latest?: components["schemas"]["Payment"];
    };
    PaymentAutoAllocateUpdate: {
      /** @description The id of the created item */
      Id?: components["schemas"]["BunqId"];
    };
    PaymentAutoAllocateUserListing: {
      PaymentAutoAllocate?: components["schemas"]["PaymentAutoAllocate"];
    };
    PaymentBatch: {
      /** @description The list of mutations that were made. */
      payments?: components["schemas"]["PaymentBatchAnchoredPayment"];
    };
    PaymentBatchAnchoredPayment: {
      Payment?: readonly components["schemas"]["Payment"][];
    };
    PaymentBatchCreate: {
      /** @description The id of the created item */
      Id?: components["schemas"]["BunqId"];
    };
    PaymentBatchListing: {
      /** @description The list of mutations that were made. */
      payments?: components["schemas"]["PaymentBatchAnchoredPayment"];
    };
    PaymentBatchRead: {
      /** @description The list of mutations that were made. */
      payments?: components["schemas"]["PaymentBatchAnchoredPayment"];
    };
    PaymentBatchUpdate: {
      /** @description The id of the created item */
      Id?: components["schemas"]["BunqId"];
    };
    PaymentCreate: {
      /** @description The id of the created Payment. */
      id?: number;
    };
    PaymentListing: {
      /** @description The id of the created Payment. */
      id?: number;
      /** @description The timestamp when the Payment was done. */
      created?: string;
      /** @description The timestamp when the Payment was last updated (will be updated when chat messages are received). */
      updated?: string;
      /** @description The id of the MonetaryAccount the Payment was made to or from (depending on whether this is an incoming or outgoing Payment). */
      monetary_account_id?: number;
      /** @description The Amount transferred by the Payment. Will be negative for outgoing Payments and positive for incoming Payments (relative to the MonetaryAccount indicated by monetary_account_id). */
      amount?: components["schemas"]["Amount"];
      /** @description The LabelMonetaryAccount containing the public information of 'this' (party) side of the Payment. */
      alias?: components["schemas"]["LabelMonetaryAccount"];
      /** @description The LabelMonetaryAccount containing the public information of the other (counterparty) side of the Payment. */
      counterparty_alias?: components["schemas"]["LabelMonetaryAccount"];
      /** @description The description for the Payment. Maximum 140 characters for Payments to external IBANs, 9000 characters for Payments to only other bunq MonetaryAccounts. */
      description?: string;
      /** @description The type of Payment, can be BUNQ, EBA_SCT, EBA_SDD, IDEAL, SWIFT or FIS (card). */
      type?: string;
      /** @description The sub-type of the Payment, can be PAYMENT, WITHDRAWAL, REVERSAL, REQUEST, BILLING, SCT, SDD or NLO. */
      sub_type?: string;
      /** @description The status of the bunq.to payment. */
      bunqto_status?: string;
      /** @description The sub status of the bunq.to payment. */
      bunqto_sub_status?: string;
      /** @description The status of the bunq.to payment. */
      bunqto_share_url?: string;
      /** @description When bunq.to payment is about to expire. */
      bunqto_expiry?: string;
      /** @description The timestamp of when the bunq.to payment was responded to. */
      bunqto_time_responded?: string;
      /** @description The Attachments attached to the Payment. */
      attachment?: readonly components["schemas"]["AttachmentMonetaryAccountPayment"][];
      /** @description Optional data included with the Payment specific to the merchant. */
      merchant_reference?: string;
      /** @description The id of the PaymentBatch if this Payment was part of one. */
      batch_id?: number;
      /** @description The id of the JobScheduled if the Payment was scheduled. */
      scheduled_id?: number;
      /** @description A shipping Address provided with the Payment, currently unused. */
      address_shipping?: components["schemas"]["Address"];
      /** @description A billing Address provided with the Payment, currently unused. */
      address_billing?: components["schemas"]["Address"];
      /** @description The Geolocation where the Payment was done from. */
      geolocation?: components["schemas"]["Geolocation"];
      /** @description The reference to the object used for split the bill. Can be RequestInquiry or RequestInquiryBatch */
      request_reference_split_the_bill?: readonly components["schemas"]["RequestInquiryReference"][];
      /** @description The new balance of the monetary account after the mutation. */
      balance_after_mutation?: components["schemas"]["Amount"];
      /** @description A reference to the PaymentAutoAllocateInstance if it exists. */
      payment_auto_allocate_instance?: components["schemas"]["PaymentAutoAllocateInstance"];
    };
    PaymentRead: {
      /** @description The id of the created Payment. */
      id?: number;
      /** @description The timestamp when the Payment was done. */
      created?: string;
      /** @description The timestamp when the Payment was last updated (will be updated when chat messages are received). */
      updated?: string;
      /** @description The id of the MonetaryAccount the Payment was made to or from (depending on whether this is an incoming or outgoing Payment). */
      monetary_account_id?: number;
      /** @description The Amount transferred by the Payment. Will be negative for outgoing Payments and positive for incoming Payments (relative to the MonetaryAccount indicated by monetary_account_id). */
      amount?: components["schemas"]["Amount"];
      /** @description The LabelMonetaryAccount containing the public information of 'this' (party) side of the Payment. */
      alias?: components["schemas"]["LabelMonetaryAccount"];
      /** @description The LabelMonetaryAccount containing the public information of the other (counterparty) side of the Payment. */
      counterparty_alias?: components["schemas"]["LabelMonetaryAccount"];
      /** @description The description for the Payment. Maximum 140 characters for Payments to external IBANs, 9000 characters for Payments to only other bunq MonetaryAccounts. */
      description?: string;
      /** @description The type of Payment, can be BUNQ, EBA_SCT, EBA_SDD, IDEAL, SWIFT or FIS (card). */
      type?: string;
      /** @description The sub-type of the Payment, can be PAYMENT, WITHDRAWAL, REVERSAL, REQUEST, BILLING, SCT, SDD or NLO. */
      sub_type?: string;
      /** @description The status of the bunq.to payment. */
      bunqto_status?: string;
      /** @description The sub status of the bunq.to payment. */
      bunqto_sub_status?: string;
      /** @description The status of the bunq.to payment. */
      bunqto_share_url?: string;
      /** @description When bunq.to payment is about to expire. */
      bunqto_expiry?: string;
      /** @description The timestamp of when the bunq.to payment was responded to. */
      bunqto_time_responded?: string;
      /** @description The Attachments attached to the Payment. */
      attachment?: readonly components["schemas"]["AttachmentMonetaryAccountPayment"][];
      /** @description Optional data included with the Payment specific to the merchant. */
      merchant_reference?: string;
      /** @description The id of the PaymentBatch if this Payment was part of one. */
      batch_id?: number;
      /** @description The id of the JobScheduled if the Payment was scheduled. */
      scheduled_id?: number;
      /** @description A shipping Address provided with the Payment, currently unused. */
      address_shipping?: components["schemas"]["Address"];
      /** @description A billing Address provided with the Payment, currently unused. */
      address_billing?: components["schemas"]["Address"];
      /** @description The Geolocation where the Payment was done from. */
      geolocation?: components["schemas"]["Geolocation"];
      /** @description The reference to the object used for split the bill. Can be RequestInquiry or RequestInquiryBatch */
      request_reference_split_the_bill?: readonly components["schemas"]["RequestInquiryReference"][];
      /** @description The new balance of the monetary account after the mutation. */
      balance_after_mutation?: components["schemas"]["Amount"];
      /** @description A reference to the PaymentAutoAllocateInstance if it exists. */
      payment_auto_allocate_instance?: components["schemas"]["PaymentAutoAllocateInstance"];
    };
    PaymentServiceProviderCredential: {
      /** @description Payment Services Directive 2 compatible QSEAL certificate */
      client_payment_service_provider_certificate: string;
      /** @description Intermediate and root certificate belonging to the provided certificate. */
      client_payment_service_provider_certificate_chain: string;
      /** @description The Base64 encoded signature of the public key provided during installation and with the installation token appended as a nonce. Signed with the private key belonging to the QSEAL certificate. */
      client_public_key_signature: string;
    };
    PaymentServiceProviderCredentialCreate: {
      /** @description The id of the created item */
      Id?: components["schemas"]["BunqId"];
    };
    PaymentServiceProviderCredentialRead: {
      /** @description The id of the credential. */
      id?: number;
      /** @description The timestamp of the credential object's creation. */
      created?: string;
      /** @description The timestamp of the credential object's last update. */
      updated?: string;
      /** @description The status of the credential. */
      status?: string;
      /** @description When the status is PENDING_FIRST_USE: when the credential expires. */
      expiry_time?: string;
      /** @description When the status is PENDING_FIRST_USE: the value of the token. */
      token_value?: string;
      /** @description When the status is ACTIVE: the details of the device that may use the credential. */
      permitted_device?: components["schemas"]["PermittedDevice"];
    };
    PaymentServiceProviderDraftPayment: {
      /** @description The IBAN of the sender. */
      sender_iban: string;
      /** @description The name of the sender. */
      sender_name?: string;
      /** @description The IBAN of the counterparty. */
      counterparty_iban: string;
      /** @description The name of the counterparty. */
      counterparty_name: string;
      /** @description Description of the payment. */
      description: string;
      /** @description The Amount to transfer with the Payment. Must be bigger than 0. */
      amount: components["schemas"]["Amount"];
      /** @description The new status of the Draft Payment. Can only be set to REJECTED or CANCELLED by update. */
      status?: string;
    };
    PaymentServiceProviderDraftPaymentCreate: {
      /** @description The id of the created item */
      Id?: components["schemas"]["BunqId"];
    };
    PaymentServiceProviderDraftPaymentListing: {
      /** @description The sender IBAN. */
      sender_iban?: string;
      /** @description The sender IBAN. */
      receiver_iban?: string;
      /** @description The amount of the draft payment */
      amount?: components["schemas"]["Amount"];
      /** @description The status of the draft payment */
      status?: string;
    };
    PaymentServiceProviderDraftPaymentRead: {
      /** @description The sender IBAN. */
      sender_iban?: string;
      /** @description The sender IBAN. */
      receiver_iban?: string;
      /** @description The amount of the draft payment */
      amount?: components["schemas"]["Amount"];
      /** @description The status of the draft payment */
      status?: string;
    };
    PaymentServiceProviderDraftPaymentUpdate: {
      /** @description The id of the created item */
      Id?: components["schemas"]["BunqId"];
    };
    PaymentServiceProviderIssuerTransaction: {
      /** @description The counter party this transaction should be sent to. */
      counterparty_alias: components["schemas"]["Pointer"];
      /** @description The money amount of this transaction */
      amount: components["schemas"]["Amount"];
      /** @description The description of this transaction, to be shown to the user and to the counter party. */
      description: string;
      /** @description The url to which the user should be redirected once the transaction is accepted or rejected. */
      url_redirect: string;
      /** @description The (optional) expiration time of the transaction. Defaults to 10 minutes. */
      time_expiry?: string;
      /** @description The status of the transaction. Can only be used for cancelling the transaction. */
      status?: string;
    };
    PaymentServiceProviderIssuerTransactionCreate: {
      /** @description The id of the created item */
      Id?: components["schemas"]["BunqId"];
    };
    PaymentServiceProviderIssuerTransactionListing: {
      /** @description The id of this transaction. */
      id?: number;
      /** @description The time this transaction was created. */
      created?: string;
      /** @description The time this transaction was last updated. */
      updated?: string;
      /** @description The public uuid used to identify this transaction. */
      public_uuid?: string;
      /** @description The counter party this transaction should be sent to. */
      counterparty_alias?: components["schemas"]["LabelMonetaryAccount"];
      /** @description The money amount of this transaction */
      amount?: components["schemas"]["Amount"];
      /** @description The description of this transaction, to be shown to the user and to the counter party. */
      description?: string;
      /** @description The url to which the user should be redirected once the transaction is accepted or rejected. */
      url_redirect?: string;
      /** @description The (optional) expiration time of the transaction. Defaults to 10 minutes. */
      time_expiry?: string;
      /** @description The status of the transaction. Can only be used for cancelling the transaction. */
      status?: string;
      /** @description The monetary account this transaction is made from. */
      alias?: components["schemas"]["LabelMonetaryAccount"];
    };
    PaymentServiceProviderIssuerTransactionRead: {
      /** @description The id of this transaction. */
      id?: number;
      /** @description The time this transaction was created. */
      created?: string;
      /** @description The time this transaction was last updated. */
      updated?: string;
      /** @description The public uuid used to identify this transaction. */
      public_uuid?: string;
      /** @description The counter party this transaction should be sent to. */
      counterparty_alias?: components["schemas"]["LabelMonetaryAccount"];
      /** @description The money amount of this transaction */
      amount?: components["schemas"]["Amount"];
      /** @description The description of this transaction, to be shown to the user and to the counter party. */
      description?: string;
      /** @description The url to which the user should be redirected once the transaction is accepted or rejected. */
      url_redirect?: string;
      /** @description The (optional) expiration time of the transaction. Defaults to 10 minutes. */
      time_expiry?: string;
      /** @description The status of the transaction. Can only be used for cancelling the transaction. */
      status?: string;
      /** @description The monetary account this transaction is made from. */
      alias?: components["schemas"]["LabelMonetaryAccount"];
    };
    PaymentServiceProviderIssuerTransactionUpdate: {
      /** @description The id of the created item */
      Id?: components["schemas"]["BunqId"];
    };
    PermittedDevice: {
      /** @description The description of the device that may use the credential. */
      description?: string;
      /** @description The IP address of the device that may use the credential. */
      ip?: string;
    };
    PermittedIp: {
      /** @description The IP address. */
      ip: string;
      /** @description The status of the IP. May be "ACTIVE" or "INACTIVE". It is only possible to make requests from "ACTIVE" IP addresses. Only "ACTIVE" IPs will be billed. */
      status?: string;
    };
    PermittedIpCreate: {
      /** @description The id of the created item */
      Id?: components["schemas"]["BunqId"];
    };
    PermittedIpListing: {
      /** @description The IP address. */
      ip?: string;
      /** @description The status of the IP. May be "ACTIVE" or "INACTIVE". It is only possible to make requests from "ACTIVE" IP addresses. Only "ACTIVE" IPs will be billed. */
      status?: string;
    };
    PermittedIpRead: {
      /** @description The IP address. */
      ip?: string;
      /** @description The status of the IP. May be "ACTIVE" or "INACTIVE". It is only possible to make requests from "ACTIVE" IP addresses. Only "ACTIVE" IPs will be billed. */
      status?: string;
    };
    PermittedIpUpdate: {
      /** @description The id of the created item */
      Id?: components["schemas"]["BunqId"];
    };
    Pointer: {
      /** @description The alias type, can be: EMAIL|PHONE_NUMBER|IBAN. */
      type?: string;
      /** @description The alias value. */
      value?: string;
      /** @description The alias name. */
      name?: string;
      /** @description The pointer service. Only required for external counterparties. */
      service?: string;
    };
    RegistryImportSplitwiseCsv: Record<string, never>;
    RegistryImportSplitwiseCsvCreate: {
      /** @description The id of the created item */
      Id?: components["schemas"]["BunqId"];
    };
    RegistryMembership: {
      /** @description The UUID of the membership. */
      uuid?: string;
      /** @description The LabelMonetaryAccount of the user who belongs to this RegistryMembership. */
      alias?: components["schemas"]["LabelMonetaryAccount"];
      /** @description The status of the RegistryMembership. */
      status?: string;
      /** @description The setting for adding automatically card transactions to the registry. (deprecated) */
      auto_add_card_transaction?: string;
      /** @description Registry membership setting. */
      setting?: components["schemas"]["RegistryMembershipSetting"];
      /** @description The original TricountId of the membership for backwards compatibility. May be used as an alternative to the UUID to identify specific memberships to allow clients to sync changes made offline before the Tricount migration. */
      membership_ticount_id?: number;
      /** @description The balance of this RegistryMembership. */
      balance?: components["schemas"]["Amount"];
      /** @description The total amount spent of this RegistryMembership. */
      total_amount_spent?: components["schemas"]["Amount"];
      /** @description The status of the settlement of the Registry. Can be PENDING or SETTLED. */
      status_settlement?: string;
      /** @description The registry id. */
      registry_id?: number;
      /** @description The registry title. */
      registry_title?: string;
      /** @description For dinner and grocery expenses. */
      registry_description?: string;
      /** @description The label of the user that sent the invite. */
      invitor?: components["schemas"]["LabelUser"];
    };
    RegistryMembershipSetting: {
      /** @description The setting for for adding automatically card transactions to the registry. */
      auto_add_card_transaction?: string;
      /** @description The time when auto add card gets active */
      time_auto_add_card_transaction_start?: string;
      /** @description The time when auto add card gets inactive */
      time_auto_add_card_transaction_end?: string;
      /** @description The ids of the cards that have been added to registry membership setting. */
      card_ids?: string[];
      /** @description The cards of which payments will be automatically added to this Registry. */
      card_labels?: readonly components["schemas"]["LabelCard"][];
    };
    RegistrySettlement: Record<string, never>;
    RegistrySettlementCreate: {
      /** @description The id of the created item */
      Id?: components["schemas"]["BunqId"];
    };
    RegistrySettlementItem: {
      /** @description The amount of the RegistrySettlementItem. */
      amount?: components["schemas"]["Amount"];
      /** @description The membership of the user that has to pay. */
      membership_paying?: components["schemas"]["RegistryMembership"];
      /** @description The membership of the user that will receive money. */
      membership_receiving?: components["schemas"]["RegistryMembership"];
      /** @description The LabelMonetaryAccount of the user that has to pay the request. */
      paying_user_alias?: components["schemas"]["LabelMonetaryAccount"];
      /** @description The LabelMonetaryAccount of the user that will receive the amount. */
      receiving_user_alias?: components["schemas"]["LabelMonetaryAccount"];
      /** @description The status of the RequestInquiry or DraftPayment for this settlement item. */
      payment_status?: string;
    };
    RegistrySettlementListing: {
      /** @description The id of the RegistrySettlement. */
      id?: number;
      /** @description The timestamp of the RegistrySettlement's creation. */
      created?: string;
      /** @description The timestamp of the RegistrySettlement's last update. */
      updated?: string;
      /** @description The timestamp of the Registry's settlement. */
      settlement_time?: string;
      /** @description The total amount spent for the RegistrySettlement. */
      total_amount_spent?: components["schemas"]["Amount"];
      /** @description The number of RegistryEntry's associated with this RegistrySettlement. */
      number_of_entries?: number;
      /** @description The membership of the user that settled the Registry. */
      settled_by_alias?: components["schemas"]["RegistryMembership"];
      /** @description The membership of the user that has settled the registry. */
      membership_settled?: components["schemas"]["RegistryMembership"];
      /** @description List of RegistrySettlementItems */
      items?: readonly components["schemas"]["RegistrySettlementItem"][];
    };
    RegistrySettlementRead: {
      /** @description The id of the RegistrySettlement. */
      id?: number;
      /** @description The timestamp of the RegistrySettlement's creation. */
      created?: string;
      /** @description The timestamp of the RegistrySettlement's last update. */
      updated?: string;
      /** @description The timestamp of the Registry's settlement. */
      settlement_time?: string;
      /** @description The total amount spent for the RegistrySettlement. */
      total_amount_spent?: components["schemas"]["Amount"];
      /** @description The number of RegistryEntry's associated with this RegistrySettlement. */
      number_of_entries?: number;
      /** @description The membership of the user that settled the Registry. */
      settled_by_alias?: components["schemas"]["RegistryMembership"];
      /** @description The membership of the user that has settled the registry. */
      membership_settled?: components["schemas"]["RegistryMembership"];
      /** @description List of RegistrySettlementItems */
      items?: readonly components["schemas"]["RegistrySettlementItem"][];
    };
    RelationUser: {
      /** @description The user's ID. */
      user_id?: string;
      /** @description The counter user's ID. */
      counter_user_id?: string;
      /** @description The user's label. */
      label_user?: components["schemas"]["LabelUser"];
      /** @description The counter user's label. */
      counter_label_user?: components["schemas"]["LabelUser"];
      /** @description The requested relation type. */
      relationship?: string;
      /** @description The request's status, only for UPDATE. */
      status?: string;
      /** @description The account status of a user */
      user_status?: string;
      /** @description The account status of a user */
      counter_user_status?: string;
    };
    RequestInquiry: {
      /** @description The requested amount. */
      amount_inquired?: components["schemas"]["Amount"];
      /** @description The LabelMonetaryAccount with the public information of the MonetaryAccount the money was requested from. */
      counterparty_alias?: components["schemas"]["LabelMonetaryAccount"];
      /** @description The description of the inquiry. */
      description?: string;
      /** @description The attachments attached to the payment. */
      attachment?: components["schemas"]["BunqId"][];
      /** @description The client's custom reference that was attached to the request and the mutation. */
      merchant_reference?: string;
      /** @description The status of the request. */
      status?: string;
      /** @description The minimum age the user accepting the RequestInquiry must have. */
      minimum_age?: number;
      /** @description Whether or not an address must be provided on accept. */
      require_address?: string;
      /** @description [DEPRECATED] Whether or not the accepting user can give an extra tip on top of the requested Amount. Defaults to false. */
      want_tip?: boolean;
      /** @description [DEPRECATED] Whether or not the accepting user can choose to accept with a lower amount than requested. Defaults to false. */
      allow_amount_lower?: boolean;
      /** @description [DEPRECATED] Whether or not the accepting user can choose to accept with a higher amount than requested. Defaults to false. */
      allow_amount_higher?: boolean;
      /** @description Whether or not sending a bunq.me request is allowed. */
      allow_bunqme: boolean;
      /** @description The URL which the user is sent to after accepting or rejecting the Request. */
      redirect_url?: string;
      /** @description The ID of the associated event if the request was made using 'split the bill'. */
      event_id?: number;
      /** @description The id of the created RequestInquiry. */
      id?: number;
      /** @description The timestamp of the payment request's creation. */
      created?: string;
      /** @description The timestamp of the payment request's last update. */
      updated?: string;
      /** @description The timestamp of when the payment request was responded to. */
      time_responded?: string;
      /** @description The timestamp of when the payment request expired. */
      time_expiry?: string;
      /** @description The id of the monetary account the request response applies to. */
      monetary_account_id?: number;
      /** @description The responded amount. */
      amount_responded?: components["schemas"]["Amount"];
      /** @description The label that's displayed to the counterparty with the mutation. Includes user. */
      user_alias_created?: components["schemas"]["LabelUser"];
      /** @description The label that's displayed to the counterparty with the mutation. Includes user. */
      user_alias_revoked?: components["schemas"]["LabelUser"];
      /** @description The id of the batch if the request was part of a batch. */
      batch_id?: number;
      /** @description The id of the scheduled job if the request was scheduled. */
      scheduled_id?: number;
      /** @description The url that points to the bunq.me request. */
      bunqme_share_url?: string;
      /** @description The shipping address provided by the accepting user if an address was requested. */
      address_shipping?: components["schemas"]["Address"];
      /** @description The billing address provided by the accepting user if an address was requested. */
      address_billing?: components["schemas"]["Address"];
      /** @description The geolocation where the payment was done. */
      geolocation?: components["schemas"]["Geolocation"];
      /** @description The reference to the object used for split the bill. Can be Payment, PaymentBatch, ScheduleInstance, RequestResponse and MasterCardAction */
      reference_split_the_bill?: components["schemas"]["RequestReferenceSplitTheBillAnchorObject"];
    };
    RequestInquiryBatch: {
      /** @description The list of requests that were made. */
      request_inquiries?: components["schemas"]["RequestInquiry"][];
      /** @description The status of the request. */
      status?: string;
      /** @description The total amount originally inquired for this batch. */
      total_amount_inquired?: components["schemas"]["Amount"];
      /** @description The ID of the associated event if the request batch was made using 'split the bill'. */
      event_id?: number;
      /** @description The reference to the object used for split the bill. Can be Payment, PaymentBatch, ScheduleInstance, RequestResponse and MasterCardAction */
      reference_split_the_bill?: components["schemas"]["RequestReferenceSplitTheBillAnchorObject"];
    };
    RequestInquiryBatchCreate: {
      /** @description The id of the created item */
      Id?: components["schemas"]["BunqId"];
    };
    RequestInquiryBatchListing: {
      /** @description The list of requests that were made. */
      request_inquiries?: readonly components["schemas"]["RequestInquiry"][];
      /** @description The total amount originally inquired for this batch. */
      total_amount_inquired?: components["schemas"]["Amount"];
      /** @description The reference to the object used for split the bill. Can be Payment, PaymentBatch, ScheduleInstance, RequestResponse and MasterCardAction */
      reference_split_the_bill?: components["schemas"]["RequestReferenceSplitTheBillAnchorObject"];
    };
    RequestInquiryBatchRead: {
      /** @description The list of requests that were made. */
      request_inquiries?: readonly components["schemas"]["RequestInquiry"][];
      /** @description The total amount originally inquired for this batch. */
      total_amount_inquired?: components["schemas"]["Amount"];
      /** @description The reference to the object used for split the bill. Can be Payment, PaymentBatch, ScheduleInstance, RequestResponse and MasterCardAction */
      reference_split_the_bill?: components["schemas"]["RequestReferenceSplitTheBillAnchorObject"];
    };
    RequestInquiryBatchUpdate: {
      /** @description The id of the created item */
      Id?: components["schemas"]["BunqId"];
    };
    RequestInquiryCreate: {
      /** @description The id of the created RequestInquiry. */
      id?: number;
    };
    RequestInquiryListing: {
      /** @description The id of the created RequestInquiry. */
      id?: number;
      /** @description The timestamp of the payment request's creation. */
      created?: string;
      /** @description The timestamp of the payment request's last update. */
      updated?: string;
      /** @description The timestamp of when the payment request was responded to. */
      time_responded?: string;
      /** @description The timestamp of when the payment request expired. */
      time_expiry?: string;
      /** @description The id of the monetary account the request response applies to. */
      monetary_account_id?: number;
      /** @description The requested amount. */
      amount_inquired?: components["schemas"]["Amount"];
      /** @description The responded amount. */
      amount_responded?: components["schemas"]["Amount"];
      /** @description The label that's displayed to the counterparty with the mutation. Includes user. */
      user_alias_created?: components["schemas"]["LabelUser"];
      /** @description The label that's displayed to the counterparty with the mutation. Includes user. */
      user_alias_revoked?: components["schemas"]["LabelUser"];
      /** @description The LabelMonetaryAccount with the public information of the MonetaryAccount the money was requested from. */
      counterparty_alias?: components["schemas"]["LabelMonetaryAccount"];
      /** @description The description of the inquiry. */
      description?: string;
      /** @description The client's custom reference that was attached to the request and the mutation. */
      merchant_reference?: string;
      /** @description The attachments attached to the payment. */
      attachment?: readonly components["schemas"]["BunqId"][];
      /** @description The status of the request. */
      status?: string;
      /** @description The id of the batch if the request was part of a batch. */
      batch_id?: number;
      /** @description The id of the scheduled job if the request was scheduled. */
      scheduled_id?: number;
      /** @description The minimum age the user accepting the RequestInquiry must have. */
      minimum_age?: number;
      /** @description Whether or not an address must be provided on accept. */
      require_address?: string;
      /** @description The url that points to the bunq.me request. */
      bunqme_share_url?: string;
      /** @description The URL which the user is sent to after accepting or rejecting the Request. */
      redirect_url?: string;
      /** @description The shipping address provided by the accepting user if an address was requested. */
      address_shipping?: components["schemas"]["Address"];
      /** @description The billing address provided by the accepting user if an address was requested. */
      address_billing?: components["schemas"]["Address"];
      /** @description The geolocation where the payment was done. */
      geolocation?: components["schemas"]["Geolocation"];
      /** @description The reference to the object used for split the bill. Can be Payment, PaymentBatch, ScheduleInstance, RequestResponse and MasterCardAction */
      reference_split_the_bill?: components["schemas"]["RequestReferenceSplitTheBillAnchorObject"];
    };
    RequestInquiryRead: {
      /** @description The id of the created RequestInquiry. */
      id?: number;
      /** @description The timestamp of the payment request's creation. */
      created?: string;
      /** @description The timestamp of the payment request's last update. */
      updated?: string;
      /** @description The timestamp of when the payment request was responded to. */
      time_responded?: string;
      /** @description The timestamp of when the payment request expired. */
      time_expiry?: string;
      /** @description The id of the monetary account the request response applies to. */
      monetary_account_id?: number;
      /** @description The requested amount. */
      amount_inquired?: components["schemas"]["Amount"];
      /** @description The responded amount. */
      amount_responded?: components["schemas"]["Amount"];
      /** @description The label that's displayed to the counterparty with the mutation. Includes user. */
      user_alias_created?: components["schemas"]["LabelUser"];
      /** @description The label that's displayed to the counterparty with the mutation. Includes user. */
      user_alias_revoked?: components["schemas"]["LabelUser"];
      /** @description The LabelMonetaryAccount with the public information of the MonetaryAccount the money was requested from. */
      counterparty_alias?: components["schemas"]["LabelMonetaryAccount"];
      /** @description The description of the inquiry. */
      description?: string;
      /** @description The client's custom reference that was attached to the request and the mutation. */
      merchant_reference?: string;
      /** @description The attachments attached to the payment. */
      attachment?: readonly components["schemas"]["BunqId"][];
      /** @description The status of the request. */
      status?: string;
      /** @description The id of the batch if the request was part of a batch. */
      batch_id?: number;
      /** @description The id of the scheduled job if the request was scheduled. */
      scheduled_id?: number;
      /** @description The minimum age the user accepting the RequestInquiry must have. */
      minimum_age?: number;
      /** @description Whether or not an address must be provided on accept. */
      require_address?: string;
      /** @description The url that points to the bunq.me request. */
      bunqme_share_url?: string;
      /** @description The URL which the user is sent to after accepting or rejecting the Request. */
      redirect_url?: string;
      /** @description The shipping address provided by the accepting user if an address was requested. */
      address_shipping?: components["schemas"]["Address"];
      /** @description The billing address provided by the accepting user if an address was requested. */
      address_billing?: components["schemas"]["Address"];
      /** @description The geolocation where the payment was done. */
      geolocation?: components["schemas"]["Geolocation"];
      /** @description The reference to the object used for split the bill. Can be Payment, PaymentBatch, ScheduleInstance, RequestResponse and MasterCardAction */
      reference_split_the_bill?: components["schemas"]["RequestReferenceSplitTheBillAnchorObject"];
    };
    RequestInquiryReference: {
      /** @description The type of request inquiry. Can be RequestInquiry or RequestInquiryBatch. */
      type?: string;
      /** @description The id of the request inquiry (batch). */
      id?: number;
    };
    RequestInquiryUpdate: {
      /** @description The id of the payment request. */
      id?: number;
      /** @description The timestamp of the payment request's creation. */
      created?: string;
      /** @description The timestamp of the payment request's last update. */
      updated?: string;
      /** @description The timestamp of when the payment request was responded to. */
      time_responded?: string;
      /** @description The timestamp of when the payment request expired. */
      time_expiry?: string;
      /** @description The id of the monetary account the request response applies to. */
      monetary_account_id?: number;
      /** @description The requested amount. */
      amount_inquired?: components["schemas"]["Amount"];
      /** @description The responded amount. */
      amount_responded?: components["schemas"]["Amount"];
      /** @description The label that's displayed to the counterparty with the mutation. Includes user. */
      user_alias_created?: components["schemas"]["LabelUser"];
      /** @description The label that's displayed to the counterparty with the mutation. Includes user. */
      user_alias_revoked?: components["schemas"]["LabelUser"];
      /** @description The LabelMonetaryAccount with the public information of the MonetaryAccount the money was requested from. */
      counterparty_alias?: components["schemas"]["LabelMonetaryAccount"];
      /** @description The description of the inquiry. */
      description?: string;
      /** @description The client's custom reference that was attached to the request and the mutation. */
      merchant_reference?: string;
      /** @description The attachments attached to the payment. */
      attachment?: readonly components["schemas"]["BunqId"][];
      /** @description The status of the request. */
      status?: string;
      /** @description The id of the batch if the request was part of a batch. */
      batch_id?: number;
      /** @description The id of the scheduled job if the request was scheduled. */
      scheduled_id?: number;
      /** @description The minimum age the user accepting the RequestInquiry must have. */
      minimum_age?: number;
      /** @description Whether or not an address must be provided on accept. */
      require_address?: string;
      /** @description The shipping address provided by the accepting user if an address was requested. */
      address_shipping?: components["schemas"]["Address"];
      /** @description The billing address provided by the accepting user if an address was requested. */
      address_billing?: components["schemas"]["Address"];
      /** @description The geolocation where the payment was done. */
      geolocation?: components["schemas"]["Geolocation"];
      /** @description The reference to the object used for split the bill. Can be Payment, PaymentBatch, ScheduleInstance, RequestResponse and MasterCardAction */
      reference_split_the_bill?: components["schemas"]["RequestReferenceSplitTheBillAnchorObject"];
    };
    RequestReferenceSplitTheBillAnchorObject: {
      BillingInvoice?: components["schemas"]["Invoice"];
      DraftPayment?: components["schemas"]["DraftPayment"];
      MasterCardAction?: components["schemas"]["MasterCardAction"];
      Payment?: components["schemas"]["Payment"];
      PaymentBatch?: components["schemas"]["PaymentBatch"];
      RequestResponse?: components["schemas"]["RequestResponse"];
      ScheduleInstance?: components["schemas"]["ScheduleInstance"];
      WhitelistResult?: components["schemas"]["WhitelistResult"];
      TransferwisePayment?: components["schemas"]["TransferwiseTransfer"];
      CurrencyConversion?: components["schemas"]["CurrencyConversion"];
    };
    RequestResponse: {
      /** @description The Amount the RequestResponse was accepted with. */
      amount_responded?: components["schemas"]["Amount"];
      /** @description The status of the RequestResponse. Can be ACCEPTED, PENDING, REJECTED, REFUND_REQUESTED, REFUNDED or REVOKED. */
      status?: string;
      /** @description The shipping address provided by the accepting user if an address was requested. */
      address_shipping?: components["schemas"]["Address"];
      /** @description The billing address provided by the accepting user if an address was requested. */
      address_billing?: components["schemas"]["Address"];
      /** @description When the request is accepted on a monetary account with a different currency, a quote is expected to convert. */
      currency_conversion_quote_id?: number;
      /** @description The id of the Request Response. */
      id?: number;
      /** @description The timestamp when the Request Response was created. */
      created?: string;
      /** @description The timestamp when the Request Response was last updated (will be updated when chat messages are received). */
      updated?: string;
      /** @description The timestamp of when the RequestResponse was responded to. */
      time_responded?: string;
      /** @description The timestamp of when the RequestResponse expired or will expire. */
      time_expiry?: string;
      /** @description The timestamp of when a refund request for the RequestResponse was claimed. */
      time_refund_requested?: string;
      /** @description The timestamp of when the RequestResponse was refunded. */
      time_refunded?: string;
      /** @description The label of the user that requested the refund. */
      user_refund_requested?: components["schemas"]["LabelUser"];
      /** @description The id of the MonetaryAccount the RequestResponse was received on. */
      monetary_account_id?: number;
      /** @description The requested Amount. */
      amount_inquired?: components["schemas"]["Amount"];
      /** @description The description for the RequestResponse provided by the requesting party. Maximum 9000 characters. */
      description?: string;
      /** @description The LabelMonetaryAccount with the public information of the MonetaryAccount this RequestResponse was received on. */
      alias?: components["schemas"]["LabelMonetaryAccount"];
      /** @description The LabelMonetaryAccount with the public information of the MonetaryAccount that is requesting money with this RequestResponse. */
      counterparty_alias?: components["schemas"]["LabelMonetaryAccount"];
      /** @description The Attachments attached to the RequestResponse. */
      attachment?: readonly components["schemas"]["Attachment"][];
      /** @description The minimum age the user accepting the RequestResponse must have. */
      minimum_age?: number;
      /** @description Whether or not an address must be provided on accept. */
      require_address?: string;
      /** @description The Geolocation where the RequestResponse was created. */
      geolocation?: components["schemas"]["Geolocation"];
      /** @description The type of the RequestInquiry. Can be DIRECT_DEBIT, DIRECT_DEBIT_B2B, IDEAL, SOFORT or INTERNAL. */
      type?: string;
      /** @description The subtype of the RequestInquiry. Can be ONCE or RECURRING for DIRECT_DEBIT RequestInquiries and NONE for all other. */
      sub_type?: string;
      /** @description The URL which the user is sent to after accepting or rejecting the Request. */
      redirect_url?: string;
      /** @description The credit scheme id provided by the counterparty for DIRECT_DEBIT inquiries. */
      credit_scheme_identifier?: string;
      /** @description The mandate id provided by the counterparty for DIRECT_DEBIT inquiries. */
      mandate_identifier?: string;
      /** @description The whitelist id for this action or null. */
      eligible_whitelist_id?: number;
      /** @description The reference to the object used for split the bill. Can be RequestInquiry or RequestInquiryBatch */
      request_reference_split_the_bill?: readonly components["schemas"]["RequestInquiryReference"][];
      /** @description The ID of the latest event for the request. */
      event_id?: number;
      /** @description The ID of the monetary account this user prefers to pay the request from. */
      monetary_account_preferred_id?: number;
    };
    RequestResponseListing: {
      /** @description The id of the Request Response. */
      id?: number;
      /** @description The timestamp when the Request Response was created. */
      created?: string;
      /** @description The timestamp when the Request Response was last updated (will be updated when chat messages are received). */
      updated?: string;
      /** @description The timestamp of when the RequestResponse was responded to. */
      time_responded?: string;
      /** @description The timestamp of when the RequestResponse expired or will expire. */
      time_expiry?: string;
      /** @description The timestamp of when a refund request for the RequestResponse was claimed. */
      time_refund_requested?: string;
      /** @description The timestamp of when the RequestResponse was refunded. */
      time_refunded?: string;
      /** @description The label of the user that requested the refund. */
      user_refund_requested?: components["schemas"]["LabelUser"];
      /** @description The id of the MonetaryAccount the RequestResponse was received on. */
      monetary_account_id?: number;
      /** @description The requested Amount. */
      amount_inquired?: components["schemas"]["Amount"];
      /** @description The Amount the RequestResponse was accepted with. */
      amount_responded?: components["schemas"]["Amount"];
      /** @description The status of the RequestResponse. Can be ACCEPTED, PENDING, REJECTED, REFUND_REQUESTED, REFUNDED or REVOKED. */
      status?: string;
      /** @description The description for the RequestResponse provided by the requesting party. Maximum 9000 characters. */
      description?: string;
      /** @description The LabelMonetaryAccount with the public information of the MonetaryAccount this RequestResponse was received on. */
      alias?: components["schemas"]["LabelMonetaryAccount"];
      /** @description The LabelMonetaryAccount with the public information of the MonetaryAccount that is requesting money with this RequestResponse. */
      counterparty_alias?: components["schemas"]["LabelMonetaryAccount"];
      /** @description The Attachments attached to the RequestResponse. */
      attachment?: readonly components["schemas"]["Attachment"][];
      /** @description The minimum age the user accepting the RequestResponse must have. */
      minimum_age?: number;
      /** @description Whether or not an address must be provided on accept. */
      require_address?: string;
      /** @description The Geolocation where the RequestResponse was created. */
      geolocation?: components["schemas"]["Geolocation"];
      /** @description The type of the RequestInquiry. Can be DIRECT_DEBIT, DIRECT_DEBIT_B2B, IDEAL, SOFORT or INTERNAL. */
      type?: string;
      /** @description The subtype of the RequestInquiry. Can be ONCE or RECURRING for DIRECT_DEBIT RequestInquiries and NONE for all other. */
      sub_type?: string;
      /** @description The URL which the user is sent to after accepting or rejecting the Request. */
      redirect_url?: string;
      /** @description The billing address provided by the accepting user if an address was requested. */
      address_billing?: components["schemas"]["Address"];
      /** @description The shipping address provided by the accepting user if an address was requested. */
      address_shipping?: components["schemas"]["Address"];
      /** @description The credit scheme id provided by the counterparty for DIRECT_DEBIT inquiries. */
      credit_scheme_identifier?: string;
      /** @description The mandate id provided by the counterparty for DIRECT_DEBIT inquiries. */
      mandate_identifier?: string;
      /** @description The whitelist id for this action or null. */
      eligible_whitelist_id?: number;
      /** @description The reference to the object used for split the bill. Can be RequestInquiry or RequestInquiryBatch */
      request_reference_split_the_bill?: readonly components["schemas"]["RequestInquiryReference"][];
      /** @description The ID of the latest event for the request. */
      event_id?: number;
      /** @description The ID of the monetary account this user prefers to pay the request from. */
      monetary_account_preferred_id?: number;
    };
    RequestResponseRead: {
      /** @description The id of the Request Response. */
      id?: number;
      /** @description The timestamp when the Request Response was created. */
      created?: string;
      /** @description The timestamp when the Request Response was last updated (will be updated when chat messages are received). */
      updated?: string;
      /** @description The timestamp of when the RequestResponse was responded to. */
      time_responded?: string;
      /** @description The timestamp of when the RequestResponse expired or will expire. */
      time_expiry?: string;
      /** @description The timestamp of when a refund request for the RequestResponse was claimed. */
      time_refund_requested?: string;
      /** @description The timestamp of when the RequestResponse was refunded. */
      time_refunded?: string;
      /** @description The label of the user that requested the refund. */
      user_refund_requested?: components["schemas"]["LabelUser"];
      /** @description The id of the MonetaryAccount the RequestResponse was received on. */
      monetary_account_id?: number;
      /** @description The requested Amount. */
      amount_inquired?: components["schemas"]["Amount"];
      /** @description The Amount the RequestResponse was accepted with. */
      amount_responded?: components["schemas"]["Amount"];
      /** @description The status of the RequestResponse. Can be ACCEPTED, PENDING, REJECTED, REFUND_REQUESTED, REFUNDED or REVOKED. */
      status?: string;
      /** @description The description for the RequestResponse provided by the requesting party. Maximum 9000 characters. */
      description?: string;
      /** @description The LabelMonetaryAccount with the public information of the MonetaryAccount this RequestResponse was received on. */
      alias?: components["schemas"]["LabelMonetaryAccount"];
      /** @description The LabelMonetaryAccount with the public information of the MonetaryAccount that is requesting money with this RequestResponse. */
      counterparty_alias?: components["schemas"]["LabelMonetaryAccount"];
      /** @description The Attachments attached to the RequestResponse. */
      attachment?: readonly components["schemas"]["Attachment"][];
      /** @description The minimum age the user accepting the RequestResponse must have. */
      minimum_age?: number;
      /** @description Whether or not an address must be provided on accept. */
      require_address?: string;
      /** @description The Geolocation where the RequestResponse was created. */
      geolocation?: components["schemas"]["Geolocation"];
      /** @description The type of the RequestInquiry. Can be DIRECT_DEBIT, DIRECT_DEBIT_B2B, IDEAL, SOFORT or INTERNAL. */
      type?: string;
      /** @description The subtype of the RequestInquiry. Can be ONCE or RECURRING for DIRECT_DEBIT RequestInquiries and NONE for all other. */
      sub_type?: string;
      /** @description The URL which the user is sent to after accepting or rejecting the Request. */
      redirect_url?: string;
      /** @description The billing address provided by the accepting user if an address was requested. */
      address_billing?: components["schemas"]["Address"];
      /** @description The shipping address provided by the accepting user if an address was requested. */
      address_shipping?: components["schemas"]["Address"];
      /** @description The credit scheme id provided by the counterparty for DIRECT_DEBIT inquiries. */
      credit_scheme_identifier?: string;
      /** @description The mandate id provided by the counterparty for DIRECT_DEBIT inquiries. */
      mandate_identifier?: string;
      /** @description The whitelist id for this action or null. */
      eligible_whitelist_id?: number;
      /** @description The reference to the object used for split the bill. Can be RequestInquiry or RequestInquiryBatch */
      request_reference_split_the_bill?: readonly components["schemas"]["RequestInquiryReference"][];
      /** @description The ID of the latest event for the request. */
      event_id?: number;
      /** @description The ID of the monetary account this user prefers to pay the request from. */
      monetary_account_preferred_id?: number;
    };
    RequestResponseUpdate: {
      /** @description The id of the created item */
      Id?: components["schemas"]["BunqId"];
    };
    SandboxUserCompany: Record<string, never>;
    SandboxUserCompanyCreate: {
      /** @description The id of the created item */
      Id?: components["schemas"]["BunqId"];
    };
    SandboxUserPerson: Record<string, never>;
    SandboxUserPersonCreate: {
      /** @description The id of the created item */
      Id?: components["schemas"]["BunqId"];
    };
    Schedule: {
      /** @description The schedule start time (UTC). */
      time_start?: string;
      /** @description The schedule end time (UTC). */
      time_end?: string;
      /** @description The schedule recurrence unit, options: ONCE, HOURLY, DAILY, WEEKLY, MONTHLY, YEARLY */
      recurrence_unit?: string;
      /** @description The schedule recurrence size. For example size 4 and unit WEEKLY means the recurrence is every 4 weeks. */
      recurrence_size?: number;
      /** @description The schedule status, options: ACTIVE, FINISHED, CANCELLED. */
      status?: string;
      /** @description The scheduled object. (Payment, PaymentBatch) */
      object?: components["schemas"]["ScheduleAnchorObject"];
    };
    ScheduleAnchorObject: {
      Payment?: components["schemas"]["Payment"];
      PaymentBatch?: components["schemas"]["PaymentBatch"];
    };
    ScheduleInstance: {
      /** @description The state of the scheduleInstance. (FINISHED_SUCCESSFULLY, RETRY, FAILED_USER_ERROR) */
      state?: string;
      /** @description The schedule start time (UTC). */
      time_start?: string;
      /** @description The schedule end time (UTC). */
      time_end?: string;
      /** @description The message when the scheduled instance has run and failed due to user error. */
      error_message?: readonly components["schemas"]["Error"][];
      /** @description The scheduled object. (Payment, PaymentBatch) */
      scheduled_object?: components["schemas"]["ScheduleAnchorObject"];
      /** @description The result object of this schedule instance. (Payment, PaymentBatch) */
      result_object?: components["schemas"]["ScheduleInstanceAnchorObject"];
      /** @description The reference to the object used for split the bill. Can be RequestInquiry or RequestInquiryBatch */
      request_reference_split_the_bill?: readonly components["schemas"]["RequestInquiryReference"][];
    };
    ScheduleInstanceAnchorObject: {
      Payment?: components["schemas"]["Payment"];
      PaymentBatch?: components["schemas"]["PaymentBatch"];
    };
    ScheduleInstanceListing: {
      /** @description The state of the scheduleInstance. (FINISHED_SUCCESSFULLY, RETRY, FAILED_USER_ERROR) */
      state?: string;
      /** @description The schedule start time (UTC). */
      time_start?: string;
      /** @description The schedule end time (UTC). */
      time_end?: string;
      /** @description The message when the scheduled instance has run and failed due to user error. */
      error_message?: readonly components["schemas"]["Error"][];
      /** @description The scheduled object. (Payment, PaymentBatch) */
      scheduled_object?: components["schemas"]["ScheduleAnchorObject"];
      /** @description The result object of this schedule instance. (Payment, PaymentBatch) */
      result_object?: components["schemas"]["ScheduleInstanceAnchorObject"];
      /** @description The reference to the object used for split the bill. Can be RequestInquiry or RequestInquiryBatch */
      request_reference_split_the_bill?: readonly components["schemas"]["RequestInquiryReference"][];
    };
    ScheduleInstanceRead: {
      /** @description The state of the scheduleInstance. (FINISHED_SUCCESSFULLY, RETRY, FAILED_USER_ERROR) */
      state?: string;
      /** @description The schedule start time (UTC). */
      time_start?: string;
      /** @description The schedule end time (UTC). */
      time_end?: string;
      /** @description The message when the scheduled instance has run and failed due to user error. */
      error_message?: readonly components["schemas"]["Error"][];
      /** @description The scheduled object. (Payment, PaymentBatch) */
      scheduled_object?: components["schemas"]["ScheduleAnchorObject"];
      /** @description The result object of this schedule instance. (Payment, PaymentBatch) */
      result_object?: components["schemas"]["ScheduleInstanceAnchorObject"];
      /** @description The reference to the object used for split the bill. Can be RequestInquiry or RequestInquiryBatch */
      request_reference_split_the_bill?: readonly components["schemas"]["RequestInquiryReference"][];
    };
    ScheduleInstanceUpdate: {
      /** @description The id of the created item */
      Id?: components["schemas"]["BunqId"];
    };
    ScheduleListing: {
      /** @description The schedule start time (UTC). */
      time_start?: string;
      /** @description The schedule end time (UTC). */
      time_end?: string;
      /** @description The schedule recurrence unit, options: ONCE, HOURLY, DAILY, WEEKLY, MONTHLY, YEARLY */
      recurrence_unit?: string;
      /** @description The schedule recurrence size. For example size 4 and unit WEEKLY means the recurrence is every 4 weeks. */
      recurrence_size?: number;
      /** @description The schedule status, options: ACTIVE, FINISHED, CANCELLED. */
      status?: string;
      /** @description The scheduled object. (Payment, PaymentBatch) */
      object?: components["schemas"]["ScheduleAnchorObject"];
    };
    SchedulePayment: {
      /** @description The payment details. */
      payment?: components["schemas"]["SchedulePaymentEntry"];
      /** @description The schedule details. */
      schedule?: components["schemas"]["Schedule"];
      /** @description The schedule status, options: ACTIVE, FINISHED, CANCELLED. */
      status?: string;
    };
    SchedulePaymentBatch: {
      /** @description The payment details. */
      payments?: components["schemas"]["SchedulePaymentEntry"][];
      /** @description The schedule details. */
      schedule?: components["schemas"]["Schedule"];
    };
    SchedulePaymentBatchCreate: {
      /** @description The id of the created item */
      Id?: components["schemas"]["BunqId"];
    };
    SchedulePaymentBatchDelete: Record<string, never>;
    SchedulePaymentBatchRead: {
      /** @description The payment details. */
      payments?: readonly components["schemas"]["SchedulePaymentEntry"][];
      /** @description The schedule details. */
      schedule?: components["schemas"]["Schedule"];
    };
    SchedulePaymentBatchUpdate: {
      /** @description The id of the created item */
      Id?: components["schemas"]["BunqId"];
    };
    SchedulePaymentCreate: {
      /** @description The id of the created item */
      Id?: components["schemas"]["BunqId"];
    };
    SchedulePaymentDelete: Record<string, never>;
    SchedulePaymentEntry: {
      /** @description The Amount transferred by the Payment. Will be negative for outgoing Payments and positive for incoming Payments (relative to the MonetaryAccount indicated by monetary_account_id). */
      amount?: components["schemas"]["Amount"];
      /** @description The LabelMonetaryAccount containing the public information of the other (counterparty) side of the Payment. */
      counterparty_alias?: components["schemas"]["LabelMonetaryAccount"];
      /** @description The description for the Payment. Maximum 140 characters for Payments to external IBANs, 9000 characters for Payments to only other bunq MonetaryAccounts. */
      description?: string;
      /** @description The Attachments attached to the Payment. */
      attachment?: components["schemas"]["AttachmentMonetaryAccountPayment"][];
      /** @description Optional data included with the Payment specific to the merchant. */
      merchant_reference?: string;
      /** @description Whether or not sending a bunq.to payment is allowed. */
      allow_bunqto?: boolean;
      /** @description The LabelMonetaryAccount containing the public information of 'this' (party) side of the Payment. */
      alias?: components["schemas"]["LabelMonetaryAccount"];
    };
    SchedulePaymentListing: {
      /** @description The payment details. */
      payment?: components["schemas"]["SchedulePaymentEntry"];
      /** @description The schedule details. */
      schedule?: components["schemas"]["Schedule"];
      /** @description The schedule status, options: ACTIVE, FINISHED, CANCELLED. */
      status?: string;
    };
    SchedulePaymentRead: {
      /** @description The payment details. */
      payment?: components["schemas"]["SchedulePaymentEntry"];
      /** @description The schedule details. */
      schedule?: components["schemas"]["Schedule"];
      /** @description The schedule status, options: ACTIVE, FINISHED, CANCELLED. */
      status?: string;
    };
    SchedulePaymentUpdate: {
      /** @description The id of the created item */
      Id?: components["schemas"]["BunqId"];
    };
    ScheduleRead: {
      /** @description The schedule start time (UTC). */
      time_start?: string;
      /** @description The schedule end time (UTC). */
      time_end?: string;
      /** @description The schedule recurrence unit, options: ONCE, HOURLY, DAILY, WEEKLY, MONTHLY, YEARLY */
      recurrence_unit?: string;
      /** @description The schedule recurrence size. For example size 4 and unit WEEKLY means the recurrence is every 4 weeks. */
      recurrence_size?: number;
      /** @description The schedule status, options: ACTIVE, FINISHED, CANCELLED. */
      status?: string;
      /** @description The scheduled object. (Payment, PaymentBatch) */
      object?: components["schemas"]["ScheduleAnchorObject"];
    };
    ScheduleUserListing: Record<string, never>;
    ServerError: Record<string, never>;
    ServerErrorCreate: {
      /** @description The id of the created item */
      Id?: components["schemas"]["BunqId"];
    };
    SessionDelete: Record<string, never>;
    SessionServer: {
      /** @description The API key of the user you want to login. If your API key has not been used before, it will be bound to the ip address of this DeviceServer. */
      secret: string;
    };
    SessionServerCreate: {
      /** @description The Id object of the created Session. */
      Id?: components["schemas"]["BunqId"];
      /** @description The token object of this Session. */
      Token?: components["schemas"]["SessionServerToken"];
      /** @description The UserCompany object that is logged in with this Session. */
      UserCompany?: components["schemas"]["UserCompany"];
      /** @description The UserPerson object that is logged in with this Session. */
      UserPerson?: components["schemas"]["UserPerson"];
      /** @description The UserApiKey object that is logged in with this Session. */
      UserApiKey?: components["schemas"]["UserApiKey"];
      /** @description The UserPaymentServiceProvider object that is logged in with this Session. */
      UserPaymentServiceProvider?: components["schemas"]["UserPaymentServiceProvider"];
    };
    SessionServerToken: {
      /** @description The id of the Token. */
      id?: number;
      /** @description The Session token is the token the client has to provide in the "X-Bunq-Client-Authentication" header for each API call that requires a Session (only the creation of a Installation and DeviceServer don't require a Session). */
      token?: string;
    };
    ShareDetail: {
      /** @description The share details for a payment share. In the response 'payment' is replaced by 'ShareDetailPayment'. */
      payment?: components["schemas"]["ShareDetailPayment"];
      /** @description The share details for viewing a share. In the response 'read_only' is replaced by 'ShareDetailReadOnly'. */
      read_only?: components["schemas"]["ShareDetailReadOnly"];
      /** @description The share details for a draft payment share. In the response 'draft_payment' is replaced by 'ShareDetailDraftPayment'. */
      draft_payment?: components["schemas"]["ShareDetailDraftPayment"];
    };
    ShareDetailDraftPayment: {
      /** @description If set to true, the invited user will be able to make draft payments from the shared account. */
      make_draft_payments?: boolean;
      /** @description If set to true, the invited user will be able to view the account balance. */
      view_balance?: boolean;
      /** @description If set to true, the invited user will be able to view events from before the share was active. */
      view_old_events?: boolean;
      /** @description If set to true, the invited user will be able to view events starting from the time the share became active. */
      view_new_events?: boolean;
    };
    ShareDetailPayment: {
      /** @description If set to true, the invited user will be able to make payments from the shared account. */
      make_payments?: boolean;
      /** @description If set to true, the invited user will be able to make draft payments from the shared account. */
      make_draft_payments?: boolean;
      /** @description If set to true, the invited user will be able to view the account balance. */
      view_balance?: boolean;
      /** @description If set to true, the invited user will be able to view events from before the share was active. */
      view_old_events?: boolean;
      /** @description If set to true, the invited user will be able to view events starting from the time the share became active. */
      view_new_events?: boolean;
    };
    ShareDetailReadOnly: {
      /** @description If set to true, the invited user will be able to view the account balance. */
      view_balance?: boolean;
      /** @description If set to true, the invited user will be able to view events from before the share was active. */
      view_old_events?: boolean;
      /** @description If set to true, the invited user will be able to view events starting from the time the share became active. */
      view_new_events?: boolean;
    };
    ShareInviteMonetaryAccountInquiry: {
      /** @description The label of the user to share with. */
      counter_user_alias?: components["schemas"]["LabelUser"];
      /** @description Type of access that is in place. */
      access_type?: string;
      /** @description DEPRECATED: USE `access_type` INSTEAD | The id of the draft share invite bank. */
      draft_share_invite_bank_id?: number;
      /** @description DEPRECATED: USE `access_type` INSTEAD | The share details. Only one of these objects may be passed. */
      share_detail?: components["schemas"]["ShareDetail"];
      /** @description The status of the share. Can be ACTIVE, REVOKED, REJECTED. */
      status?: string;
      /** @description The relationship: COMPANY_DIRECTOR, COMPANY_EMPLOYEE, etc */
      relationship?: string;
      /** @description DEPRECATED: USE `access_type` INSTEAD | The share type, either STANDARD or MUTUAL. */
      share_type?: string;
      /** @description DEPRECATED: USE `access_type` INSTEAD | The start date of this share. */
      start_date?: string;
      /** @description DEPRECATED: USE `access_type` INSTEAD | The expiration date of this share. */
      end_date?: string;
      /** @description The label of the monetary account that's being shared. */
      alias?: components["schemas"]["LabelMonetaryAccount"];
      /** @description The user who created the share. */
      user_alias_created?: components["schemas"]["LabelUser"];
      /** @description The user who revoked the share. */
      user_alias_revoked?: components["schemas"]["LabelUser"];
      /** @description The id of the monetary account the share applies to. */
      monetary_account_id?: number;
      /** @description The id of the newly created share invite. */
      id?: number;
    };
    ShareInviteMonetaryAccountInquiryCreate: {
      /** @description The id of the newly created share invite. */
      id?: number;
    };
    ShareInviteMonetaryAccountInquiryListing: {
      /** @description The label of the monetary account that's being shared. */
      alias?: components["schemas"]["LabelMonetaryAccount"];
      /** @description The user who created the share. */
      user_alias_created?: components["schemas"]["LabelUser"];
      /** @description The user who revoked the share. */
      user_alias_revoked?: components["schemas"]["LabelUser"];
      /** @description The label of the user to share with. */
      counter_user_alias?: components["schemas"]["LabelUser"];
      /** @description The id of the monetary account the share applies to. */
      monetary_account_id?: number;
      /** @description The status of the share. Can be ACTIVE, REVOKED, REJECTED. */
      status?: string;
      /** @description Type of access that is in place. */
      access_type?: string;
      /** @description The relationship: COMPANY_DIRECTOR, COMPANY_EMPLOYEE, etc */
      relationship?: string;
      /** @description The id of the newly created share invite. */
      id?: number;
    };
    ShareInviteMonetaryAccountInquiryRead: {
      /** @description The label of the monetary account that's being shared. */
      alias?: components["schemas"]["LabelMonetaryAccount"];
      /** @description The user who created the share. */
      user_alias_created?: components["schemas"]["LabelUser"];
      /** @description The user who revoked the share. */
      user_alias_revoked?: components["schemas"]["LabelUser"];
      /** @description The label of the user to share with. */
      counter_user_alias?: components["schemas"]["LabelUser"];
      /** @description The id of the monetary account the share applies to. */
      monetary_account_id?: number;
      /** @description The status of the share. Can be ACTIVE, REVOKED, REJECTED. */
      status?: string;
      /** @description Type of access that is in place. */
      access_type?: string;
      /** @description The relationship: COMPANY_DIRECTOR, COMPANY_EMPLOYEE, etc */
      relationship?: string;
      /** @description The id of the newly created share invite. */
      id?: number;
    };
    ShareInviteMonetaryAccountInquiryUpdate: {
      /** @description The id of the created item */
      Id?: components["schemas"]["BunqId"];
    };
    ShareInviteMonetaryAccountResponse: {
      /** @description The status of the share. Can be ACTIVE, REVOKED, REJECTED. */
      status?: string;
      /** @description The card to link to the shared monetary account. Used only if share_detail is ShareDetailCardPayment. */
      card_id?: number;
      /** @description The id of the ShareInviteBankResponse. */
      id?: number;
      /** @description The timestamp of the ShareInviteBankResponse creation. */
      created?: string;
      /** @description The timestamp of the ShareInviteBankResponse last update. */
      updated?: string;
      /** @description The monetary account and user who created the share. */
      counter_alias?: components["schemas"]["LabelMonetaryAccount"];
      /** @description The user who cancelled the share if it has been revoked or rejected. */
      user_alias_cancelled?: components["schemas"]["LabelUser"];
      /** @description The id of the monetary account the ACCEPTED share applies to. null otherwise. */
      monetary_account_id?: number;
      /** @description The id of the draft share invite bank. */
      draft_share_invite_bank_id?: number;
      /** @description The share details. */
      share_detail?: components["schemas"]["ShareDetail"];
      /** @description Type of access that is wanted, one of VIEW_BALANCE, VIEW_TRANSACTION, DRAFT_PAYMENT or FULL_TRANSIENT */
      access_type?: string;
      /** @description All of the relation users towards this MA. */
      relation_user?: components["schemas"]["RelationUser"];
      /** @description The share type, either STANDARD or MUTUAL. */
      share_type?: string;
      /** @description The start date of this share. */
      start_date?: string;
      /** @description The expiration date of this share. */
      end_date?: string;
      /** @description The description of this share. It is basically the monetary account description. */
      description?: string;
    };
    ShareInviteMonetaryAccountResponseListing: {
      /** @description The id of the ShareInviteBankResponse. */
      id?: number;
      /** @description The timestamp of the ShareInviteBankResponse creation. */
      created?: string;
      /** @description The timestamp of the ShareInviteBankResponse last update. */
      updated?: string;
      /** @description The monetary account and user who created the share. */
      counter_alias?: components["schemas"]["LabelMonetaryAccount"];
      /** @description The user who cancelled the share if it has been revoked or rejected. */
      user_alias_cancelled?: components["schemas"]["LabelUser"];
      /** @description The id of the monetary account the ACCEPTED share applies to. null otherwise. */
      monetary_account_id?: number;
      /** @description The id of the draft share invite bank. */
      draft_share_invite_bank_id?: number;
      /** @description The share details. */
      share_detail?: components["schemas"]["ShareDetail"];
      /** @description Type of access that is wanted, one of VIEW_BALANCE, VIEW_TRANSACTION, DRAFT_PAYMENT or FULL_TRANSIENT */
      access_type?: string;
      /** @description The status of the share. Can be ACTIVE, REVOKED, REJECTED. */
      status?: string;
      /** @description All of the relation users towards this MA. */
      relation_user?: components["schemas"]["RelationUser"];
      /** @description The share type, either STANDARD or MUTUAL. */
      share_type?: string;
      /** @description The start date of this share. */
      start_date?: string;
      /** @description The expiration date of this share. */
      end_date?: string;
      /** @description The description of this share. It is basically the monetary account description. */
      description?: string;
    };
    ShareInviteMonetaryAccountResponseRead: {
      /** @description The id of the ShareInviteBankResponse. */
      id?: number;
      /** @description The timestamp of the ShareInviteBankResponse creation. */
      created?: string;
      /** @description The timestamp of the ShareInviteBankResponse last update. */
      updated?: string;
      /** @description The monetary account and user who created the share. */
      counter_alias?: components["schemas"]["LabelMonetaryAccount"];
      /** @description The user who cancelled the share if it has been revoked or rejected. */
      user_alias_cancelled?: components["schemas"]["LabelUser"];
      /** @description The id of the monetary account the ACCEPTED share applies to. null otherwise. */
      monetary_account_id?: number;
      /** @description The id of the draft share invite bank. */
      draft_share_invite_bank_id?: number;
      /** @description The share details. */
      share_detail?: components["schemas"]["ShareDetail"];
      /** @description Type of access that is wanted, one of VIEW_BALANCE, VIEW_TRANSACTION, DRAFT_PAYMENT or FULL_TRANSIENT */
      access_type?: string;
      /** @description The status of the share. Can be ACTIVE, REVOKED, REJECTED. */
      status?: string;
      /** @description All of the relation users towards this MA. */
      relation_user?: components["schemas"]["RelationUser"];
      /** @description The share type, either STANDARD or MUTUAL. */
      share_type?: string;
      /** @description The start date of this share. */
      start_date?: string;
      /** @description The expiration date of this share. */
      end_date?: string;
      /** @description The description of this share. It is basically the monetary account description. */
      description?: string;
    };
    ShareInviteMonetaryAccountResponseUpdate: {
      /** @description The id of the created item */
      Id?: components["schemas"]["BunqId"];
    };
    SofortMerchantTransaction: {
      /** @description The requested amount of money to add. */
      amount_requested?: components["schemas"]["Amount"];
      /** @description The BIC of the issuer. */
      issuer?: string;
      /** @description The id of the monetary account this sofort merchant transaction links to. */
      monetary_account_id?: number;
      /** @description The alias of the monetary account to add money to. */
      alias?: components["schemas"]["LabelMonetaryAccount"];
      /** @description The alias of the monetary account the money comes from. */
      counterparty_alias?: components["schemas"]["LabelMonetaryAccount"];
      /** @description In case of a successful transaction, the amount of money that will be transferred. */
      amount_guaranteed?: components["schemas"]["Amount"];
      /** @description The URL to visit to */
      issuer_authentication_url?: string;
      /** @description The status of the transaction. */
      status?: string;
      /** @description The error message of the transaction. */
      error_message?: readonly components["schemas"]["Error"][];
      /** @description The 'transaction ID' of the Sofort transaction. */
      transaction_identifier?: string;
    };
    SofortMerchantTransactionListing: {
      /** @description The id of the monetary account this sofort merchant transaction links to. */
      monetary_account_id?: number;
      /** @description The alias of the monetary account to add money to. */
      alias?: components["schemas"]["LabelMonetaryAccount"];
      /** @description The alias of the monetary account the money comes from. */
      counterparty_alias?: components["schemas"]["LabelMonetaryAccount"];
      /** @description In case of a successful transaction, the amount of money that will be transferred. */
      amount_guaranteed?: components["schemas"]["Amount"];
      /** @description The requested amount of money to add. */
      amount_requested?: components["schemas"]["Amount"];
      /** @description The BIC of the issuer. */
      issuer?: string;
      /** @description The URL to visit to */
      issuer_authentication_url?: string;
      /** @description The status of the transaction. */
      status?: string;
      /** @description The error message of the transaction. */
      error_message?: readonly components["schemas"]["Error"][];
      /** @description The 'transaction ID' of the Sofort transaction. */
      transaction_identifier?: string;
    };
    SofortMerchantTransactionRead: {
      /** @description The id of the monetary account this sofort merchant transaction links to. */
      monetary_account_id?: number;
      /** @description The alias of the monetary account to add money to. */
      alias?: components["schemas"]["LabelMonetaryAccount"];
      /** @description The alias of the monetary account the money comes from. */
      counterparty_alias?: components["schemas"]["LabelMonetaryAccount"];
      /** @description In case of a successful transaction, the amount of money that will be transferred. */
      amount_guaranteed?: components["schemas"]["Amount"];
      /** @description The requested amount of money to add. */
      amount_requested?: components["schemas"]["Amount"];
      /** @description The BIC of the issuer. */
      issuer?: string;
      /** @description The URL to visit to */
      issuer_authentication_url?: string;
      /** @description The status of the transaction. */
      status?: string;
      /** @description The error message of the transaction. */
      error_message?: readonly components["schemas"]["Error"][];
      /** @description The 'transaction ID' of the Sofort transaction. */
      transaction_identifier?: string;
    };
    TaxResident: {
      /** @description The country of the tax number. */
      country?: string;
      /** @description The tax number. */
      tax_number?: string;
      /** @description The status of the tax number. Either CONFIRMED or UNCONFIRMED. */
      status?: string;
    };
    TokenQrRequestIdeal: {
      /** @description The token passed from a site or read from a QR code. */
      token: string;
    };
    TokenQrRequestIdealCreate: {
      /** @description The id of the RequestResponse. */
      id?: number;
      /** @description The timestamp of when the RequestResponse was responded to. */
      time_responded?: string;
      /** @description The timestamp of when the RequestResponse expired or will expire. */
      time_expiry?: string;
      /** @description The id of the MonetaryAccount the RequestResponse was received on. */
      monetary_account_id?: number;
      /** @description The requested Amount. */
      amount_inquired?: components["schemas"]["Amount"];
      /** @description The Amount the RequestResponse was accepted with. */
      amount_responded?: components["schemas"]["Amount"];
      /** @description The LabelMonetaryAccount with the public information of the MonetaryAccount this RequestResponse was received on. */
      alias?: components["schemas"]["LabelMonetaryAccount"];
      /** @description The LabelMonetaryAccount with the public information of the MonetaryAccount that is requesting money with this RequestResponse. */
      counterparty_alias?: components["schemas"]["LabelMonetaryAccount"];
      /** @description The description for the RequestResponse provided by the requesting party. Maximum 9000 characters. */
      description?: string;
      /** @description The Attachments attached to the RequestResponse. */
      attachment?: readonly components["schemas"]["Attachment"][];
      /** @description The status of the created RequestResponse. Can only be PENDING. */
      status?: string;
      /** @description The minimum age the user accepting the RequestResponse must have. */
      minimum_age?: number;
      /** @description Whether or not an address must be provided on accept. */
      require_address?: string;
      /** @description The shipping address provided by the accepting user if an address was requested. */
      address_shipping?: components["schemas"]["Address"];
      /** @description The billing address provided by the accepting user if an address was requested. */
      address_billing?: components["schemas"]["Address"];
      /** @description The Geolocation where the RequestResponse was created. */
      geolocation?: components["schemas"]["Geolocation"];
      /** @description The URL which the user is sent to after accepting or rejecting the Request. */
      redirect_url?: string;
      /** @description The type of the RequestResponse. Can be only be IDEAL. */
      type?: string;
      /** @description The subtype of the RequestResponse. Can be only be NONE. */
      sub_type?: string;
      /** @description The whitelist id for this action or null. */
      eligible_whitelist_id?: number;
    };
    TokenQrRequestSofort: {
      /** @description The token passed from a site or read from a QR code. */
      token: string;
    };
    TokenQrRequestSofortCreate: {
      /** @description The id of the created item */
      Id?: components["schemas"]["BunqId"];
    };
    TransferwiseAccountQuote: {
      /** @description The country of the receiving account. */
      country?: string;
      /** @description The name of the account holder. */
      name_account_holder: string;
      /** @description The chosen recipient account type. The possible options are provided dynamically in the response endpoint. */
      type: string;
      /** @description The fields which were specified as "required" and have since been filled by the user. Always provide the full list. */
      detail?: components["schemas"]["TransferwiseRequirementField"][];
    };
    TransferwiseAccountQuoteCreate: {
      /** @description The id of the created item */
      Id?: components["schemas"]["BunqId"];
    };
    TransferwiseAccountQuoteDelete: Record<string, never>;
    TransferwiseAccountQuoteListing: {
      /** @description Transferwise's id of the account. */
      account_id?: string;
      /** @description The currency the account. */
      currency?: string;
      /** @description The country of the account. */
      country?: string;
      /** @description The name of the account holder. */
      name_account_holder?: string;
      /** @description The account number. */
      account_number?: string;
      /** @description The bank code. */
      bank_code?: string;
    };
    TransferwiseAccountQuoteRead: {
      /** @description Transferwise's id of the account. */
      account_id?: string;
      /** @description The currency the account. */
      currency?: string;
      /** @description The country of the account. */
      country?: string;
      /** @description The name of the account holder. */
      name_account_holder?: string;
      /** @description The account number. */
      account_number?: string;
      /** @description The bank code. */
      bank_code?: string;
    };
    TransferwiseAccountRequirement: {
      /** @description The country of the receiving account. */
      country?: string;
      /** @description The name of the account holder. */
      name_account_holder: string;
      /** @description The chosen recipient account type. The possible options are provided dynamically in the response endpoint. */
      type: string;
      /** @description The fields which were specified as "required" and have since been filled by the user. Always provide the full list. */
      detail?: components["schemas"]["TransferwiseRequirementField"][];
    };
    TransferwiseAccountRequirementCreate: {
      /** @description The id of the created item */
      Id?: components["schemas"]["BunqId"];
    };
    TransferwiseAccountRequirementListing: {
      /** @description A possible recipient account type. */
      type?: string;
      /** @description The label of the possible recipient account type to show to the user. */
      label?: string;
      /** @description The fields which the user needs to fill. */
      fields?: readonly components["schemas"]["TransferwiseRequirementField"][];
    };
    TransferwiseCurrencyListing: {
      /** @description The currency code. */
      currency?: string;
      /** @description The currency name. */
      name?: string;
      /** @description The country code associated with the currency. */
      country?: string;
    };
    TransferwiseQuote: {
      /** @description The source currency. */
      currency_source: string;
      /** @description The target currency. */
      currency_target: string;
      /** @description The source amount. */
      amount_source?: components["schemas"]["Amount"];
      /** @description The target amount. */
      amount_target?: components["schemas"]["Amount"];
      /** @description The id of the quote. */
      id?: number;
      /** @description The timestamp of the quote's creation. */
      created?: string;
      /** @description The timestamp of the quote's last update. */
      updated?: string;
      /** @description The expiration timestamp of the quote. */
      time_expiry?: string;
      /** @description The quote id Transferwise needs. */
      quote_id?: string;
      /** @description The fee amount. */
      amount_fee?: components["schemas"]["Amount"];
      /** @description The rate. */
      rate?: string;
      /** @description The estimated delivery time. */
      time_delivery_estimate?: string;
    };
    TransferwiseQuoteCreate: {
      /** @description The id of the created item */
      Id?: components["schemas"]["BunqId"];
    };
    TransferwiseQuoteRead: {
      /** @description The id of the quote. */
      id?: number;
      /** @description The timestamp of the quote's creation. */
      created?: string;
      /** @description The timestamp of the quote's last update. */
      updated?: string;
      /** @description The expiration timestamp of the quote. */
      time_expiry?: string;
      /** @description The quote id Transferwise needs. */
      quote_id?: string;
      /** @description The source amount. */
      amount_source?: components["schemas"]["Amount"];
      /** @description The target amount. */
      amount_target?: components["schemas"]["Amount"];
      /** @description The fee amount. */
      amount_fee?: components["schemas"]["Amount"];
      /** @description The rate. */
      rate?: string;
      /** @description The estimated delivery time. */
      time_delivery_estimate?: string;
    };
    TransferwiseQuoteTemporary: {
      /** @description The source currency. */
      currency_source: string;
      /** @description The target currency. */
      currency_target: string;
      /** @description The source amount. Required if target amount is left empty. */
      amount_source?: components["schemas"]["Amount"];
      /** @description The target amount. Required if source amount is left empty. */
      amount_target?: components["schemas"]["Amount"];
    };
    TransferwiseQuoteTemporaryCreate: {
      /** @description The id of the created item */
      Id?: components["schemas"]["BunqId"];
    };
    TransferwiseQuoteTemporaryRead: {
      /** @description The id of the quote. */
      id?: number;
      /** @description The timestamp of the note's creation. */
      created?: string;
      /** @description The timestamp of the note's last update. */
      updated?: string;
      /** @description The expiration timestamp of the quote. Will always be null for temporary quotes. */
      time_expiry?: string;
      /** @description The quote id Transferwise needs. Will always be null for temporary quotes. */
      quote_id?: string;
      /** @description The source amount. */
      amount_source?: components["schemas"]["Amount"];
      /** @description The target amount. */
      amount_target?: components["schemas"]["Amount"];
      /** @description The rate. */
      rate?: string;
    };
    TransferwiseRequirementField: {
      /** @description The name of the required field. */
      key: string;
      /** @description The value of the required field. */
      value: string;
      /** @description The descriptive label of the field. */
      name?: string;
      /** @description The field group. */
      group?: components["schemas"]["TransferwiseRequirementFieldGroup"];
    };
    TransferwiseRequirementFieldGroup: {
      /** @description The key of the field. This is the value to send as input. */
      key?: string;
      /** @description The field's input type: "text", "select" or "radio". */
      type?: string;
      /** @description The field name. */
      name?: string;
      /** @description Indicates that any changes in this field affect the requirements, if this field is changed, the requirements endpoint must be called again to recheck if there are any additional requirements. */
      refresh_requirements_on_change?: boolean;
      /** @description Whether or not the field is required. */
      required?: boolean;
      /** @description Formatting mask to guide user input. */
      display_format?: string;
      /** @description An example value for this field. */
      example?: string;
      /** @description The minimum length of the field's value. */
      min_length?: string;
      /** @description The maximum length of the field's value. */
      max_length?: string;
      /** @description A regular expression which may be used to validate the user input. */
      validation_regexp?: string;
      /** @description Details of an endpoint which may be used to validate the user input. */
      validation_async?: components["schemas"]["TransferwiseRequirementFieldGroupValidationAsync"];
      /** @description Shows which values are allowed for fields of type "select" or "radio". */
      values_allowed?: components["schemas"]["TransferwiseRequirementFieldGroupValuesAllowed"];
    };
    TransferwiseRequirementFieldGroupValidationAsync: {
      /** @description The url to be used to validate user input. */
      url?: string;
      /** @description The parameters to send when validating user input. */
      params?: components["schemas"]["TransferwiseRequirementFieldGroupValidationAsyncParams"];
    };
    TransferwiseRequirementFieldGroupValidationAsyncParams: {
      /** @description The parameter key. */
      key?: string;
      /** @description The parameter label. */
      parameter_name?: string;
      /** @description Shows whether the parameter is required or not. */
      required?: boolean;
    };
    TransferwiseRequirementFieldGroupValuesAllowed: {
      /** @description The key. */
      key?: string;
      /** @description The label. */
      name?: string;
    };
    TransferwiseTransfer: {
      /** @description The id of the monetary account the payment should be made from. */
      monetary_account_id: string;
      /** @description The id of the target account. */
      recipient_id: string;
      /** @description The LabelMonetaryAccount containing the public information of 'this' (party) side of the Payment. */
      alias?: components["schemas"]["LabelMonetaryAccount"];
      /** @description The LabelMonetaryAccount containing the public information of the other (counterparty) side of the Payment. */
      counterparty_alias?: components["schemas"]["LabelMonetaryAccount"];
      /** @description The status. */
      status?: string;
      /** @description The subStatus. */
      sub_status?: string;
      /** @description The status as Transferwise reports it. */
      status_transferwise?: string;
      /** @description A status to indicatie if Transferwise has an issue with this payment and requires more information. */
      status_transferwise_issue?: string;
      /** @description The source amount. */
      amount_source?: components["schemas"]["Amount"];
      /** @description The target amount. */
      amount_target?: components["schemas"]["Amount"];
      /** @description The rate of the payment. */
      rate?: string;
      /** @description The reference of the payment. */
      reference?: string;
      /** @description The Pay-In reference of the payment. */
      pay_in_reference?: string;
      /** @description The estimated delivery time. */
      time_delivery_estimate?: string;
      /** @description The quote details used to created the payment. */
      quote?: components["schemas"]["TransferwiseQuote"];
    };
    TransferwiseTransferCreate: {
      /** @description The id of the created item */
      Id?: components["schemas"]["BunqId"];
    };
    TransferwiseTransferListing: {
      /** @description The LabelMonetaryAccount containing the public information of 'this' (party) side of the Payment. */
      alias?: components["schemas"]["LabelMonetaryAccount"];
      /** @description The LabelMonetaryAccount containing the public information of the other (counterparty) side of the Payment. */
      counterparty_alias?: components["schemas"]["LabelMonetaryAccount"];
      /** @description The status. */
      status?: string;
      /** @description The subStatus. */
      sub_status?: string;
      /** @description The status as Transferwise reports it. */
      status_transferwise?: string;
      /** @description A status to indicatie if Transferwise has an issue with this payment and requires more information. */
      status_transferwise_issue?: string;
      /** @description The source amount. */
      amount_source?: components["schemas"]["Amount"];
      /** @description The target amount. */
      amount_target?: components["schemas"]["Amount"];
      /** @description The rate of the payment. */
      rate?: string;
      /** @description The reference of the payment. */
      reference?: string;
      /** @description The Pay-In reference of the payment. */
      pay_in_reference?: string;
      /** @description The estimated delivery time. */
      time_delivery_estimate?: string;
      /** @description The quote details used to created the payment. */
      quote?: components["schemas"]["TransferwiseQuote"];
    };
    TransferwiseTransferRead: {
      /** @description The LabelMonetaryAccount containing the public information of 'this' (party) side of the Payment. */
      alias?: components["schemas"]["LabelMonetaryAccount"];
      /** @description The LabelMonetaryAccount containing the public information of the other (counterparty) side of the Payment. */
      counterparty_alias?: components["schemas"]["LabelMonetaryAccount"];
      /** @description The status. */
      status?: string;
      /** @description The subStatus. */
      sub_status?: string;
      /** @description The status as Transferwise reports it. */
      status_transferwise?: string;
      /** @description A status to indicatie if Transferwise has an issue with this payment and requires more information. */
      status_transferwise_issue?: string;
      /** @description The source amount. */
      amount_source?: components["schemas"]["Amount"];
      /** @description The target amount. */
      amount_target?: components["schemas"]["Amount"];
      /** @description The rate of the payment. */
      rate?: string;
      /** @description The reference of the payment. */
      reference?: string;
      /** @description The Pay-In reference of the payment. */
      pay_in_reference?: string;
      /** @description The estimated delivery time. */
      time_delivery_estimate?: string;
      /** @description The quote details used to created the payment. */
      quote?: components["schemas"]["TransferwiseQuote"];
    };
    TransferwiseTransferRequirement: {
      /** @description The id of the target account. */
      recipient_id: string;
      /** @description The fields which were specified as "required" and have since been filled by the user. Always provide the full list. */
      detail?: components["schemas"]["TransferwiseRequirementField"][];
    };
    TransferwiseTransferRequirementCreate: {
      /** @description The id of the created item */
      Id?: components["schemas"]["BunqId"];
    };
    TransferwiseUser: {
      /** @description The OAuth code returned by Transferwise we should be using to gain access to the user's Transferwise account. */
      oauth_code?: string;
    };
    TransferwiseUserCreate: {
      /** @description The id of the created item */
      Id?: components["schemas"]["BunqId"];
    };
    TransferwiseUserListing: {
      /** @description The id of the TransferwiseUser. */
      id?: number;
      /** @description The timestamp of the TransferwiseUser's creation. */
      created?: string;
      /** @description The timestamp of the TransferwiseUser's last update. */
      updated?: string;
      /** @description The name the user is registered with at TransferWise. */
      name?: string;
      /** @description The email the user is registered with at TransferWise. */
      email?: string;
      /** @description The source of the user at TransferWise. */
      source?: string;
    };
    TreeProgressListing: {
      /** @description The number of trees this user and all users have planted. */
      number_of_tree?: number;
      /** @description The progress towards the next tree. */
      progress_tree_next?: number;
      /** @description URL of the invite profile. */
      url_invite_profile?: string;
      /** @description The label of the user the progress belongs to. */
      label_user?: components["schemas"]["LabelUser"];
    };
    Ubo: {
      /** @description The name of the ultimate beneficiary owner. */
      name?: string;
      /** @description The date of birth of the ultimate beneficiary owner. */
      date_of_birth?: string;
      /** @description The nationality of the ultimate beneficiary owner. */
      nationality?: string;
    };
    UserApiKey: {
      /** @description The id of the user. */
      id?: number;
      /** @description The timestamp of the user object's creation. */
      created?: string;
      /** @description The timestamp of the user object's last update. */
      updated?: string;
      /** @description The user who requested access. */
      requested_by_user?: components["schemas"]["UserApiKeyAnchoredUser"];
      /** @description The user who granted access. */
      granted_by_user?: components["schemas"]["UserApiKeyAnchoredUser"];
    };
    UserApiKeyAnchoredUser: {
      UserPerson?: components["schemas"]["UserPerson"];
      UserCompany?: components["schemas"]["UserCompany"];
      UserPaymentServiceProvider?: components["schemas"]["UserPaymentServiceProvider"];
    };
    UserBlacklistMasterCardMerchant: {
      /** @description The name of the merchant. */
      merchant_name?: string;
      /** @description The blacklisted merchant. */
      merchant_id?: string;
      /** @description Identifier of the merchant we are blacklisting. */
      merchant_identifier?: string;
      /** @description The blacklisted merchant. */
      mastercard_merchant_id?: string;
      /** @description Externally provided merchant identification. */
      external_merchant_id?: string;
      /** @description The id of the blacklist. */
      id?: number;
      /** @description The timestamp of the object's creation. */
      created?: string;
      /** @description The timestamp of the object's last update. */
      updated?: string;
      /** @description The status of the the blacklist. */
      status?: string;
      /** @description Hash of the merchant we are blacklisting. */
      merchant_hash?: string;
      merchant_avatar?: components["schemas"]["Avatar"];
    };
    UserCompany: {
      /** @description The company name. */
      name?: string;
      /** @description The company's public nick name. */
      public_nick_name?: string;
      /** @description The public UUID of the company's avatar. */
      avatar_uuid?: string;
      /** @description The company's main address. */
      address_main?: components["schemas"]["Address"];
      /** @description The company's postal address. */
      address_postal?: components["schemas"]["Address"];
      /** @description The person's preferred language. Formatted as a ISO 639-1 language code plus a ISO 3166-1 alpha-2 country code, seperated by an underscore. */
      language?: string;
      /** @description The person's preferred region. Formatted as a ISO 639-1 language code plus a ISO 3166-1 alpha-2 country code, seperated by an underscore. */
      region?: string;
      /** @description The country as an ISO 3166-1 alpha-2 country code. */
      country?: string;
      /** @description The names of the company's ultimate beneficiary owners. Minimum zero, maximum four. */
      ubo?: components["schemas"]["Ubo"][];
      /** @description The company's chamber of commerce number. */
      chamber_of_commerce_number?: string;
      /** @description The company's legal form. */
      legal_form?: string;
      /** @description The user status. Can be: ACTIVE, SIGNUP, RECOVERY. */
      status?: string;
      /** @description The user sub-status. Can be: NONE, FACE_RESET, APPROVAL, APPROVAL_DIRECTOR, APPROVAL_PARENT, APPROVAL_SUPPORT, COUNTER_IBAN, IDEAL or SUBMIT. */
      sub_status?: string;
      /** @description The setting for the session timeout of the company in seconds. */
      session_timeout?: number;
      /** @description The amount the company can pay in the session without asking for credentials. */
      daily_limit_without_confirmation_login?: components["schemas"]["Amount"];
      /** @description The id of the modified company. */
      id?: number;
      /** @description The timestamp of the company object's creation. */
      created?: string;
      /** @description The timestamp of the company object's last update. */
      updated?: string;
      /** @description The company's public UUID. */
      public_uuid?: string;
      /** @description The company's display name. */
      display_name?: string;
      /** @description The aliases of the account. */
      alias?: readonly components["schemas"]["Pointer"][];
      /** @description The type of business entity. */
      type_of_business_entity?: string;
      /** @description The sector of industry. */
      sector_of_industry?: string;
      /** @description The company's other bank account IBAN, through which we verify it. */
      counter_bank_iban?: string;
      /** @description The company's avatar. */
      avatar?: components["schemas"]["Avatar"];
      /** @description The version of the terms of service accepted by the user. */
      version_terms_of_service?: string;
      /** @description The existing bunq aliases for the company's directors. */
      directors?: readonly components["schemas"]["LabelUser"][];
      /** @description The types of notifications that will result in a push notification or URL callback for this UserCompany. */
      notification_filters?: readonly components["schemas"]["NotificationFilter"][];
      /** @description The customer profile of the company. */
      customer?: components["schemas"]["Customer"];
      /** @description The customer limits of the company. */
      customer_limit?: components["schemas"]["CustomerLimit"];
      /** @description The subscription of the company. */
      billing_contract?: readonly components["schemas"]["BillingContractSubscription"][];
      /** @description The user deny reason. */
      deny_reason?: string;
      /** @description The relations for this user. */
      relations?: readonly components["schemas"]["RelationUser"][];
      /** @description The user's tax residence numbers for different countries. */
      tax_resident?: readonly components["schemas"]["TaxResident"][];
    };
    UserCompanyNameListing: {
      /** @description All known (trade) names for a user company. */
      name_array?: readonly string[];
    };
    UserCompanyRead: {
      /** @description The id of the modified company. */
      id?: number;
      /** @description The timestamp of the company object's creation. */
      created?: string;
      /** @description The timestamp of the company object's last update. */
      updated?: string;
      /** @description The company's public UUID. */
      public_uuid?: string;
      /** @description The company name. */
      name?: string;
      /** @description The company's display name. */
      display_name?: string;
      /** @description The company's public nick name. */
      public_nick_name?: string;
      /** @description The aliases of the account. */
      alias?: readonly components["schemas"]["Pointer"][];
      /** @description The company's chamber of commerce number. */
      chamber_of_commerce_number?: string;
      /** @description The company's legal form. */
      legal_form?: string;
      /** @description The type of business entity. */
      type_of_business_entity?: string;
      /** @description The sector of industry. */
      sector_of_industry?: string;
      /** @description The company's other bank account IBAN, through which we verify it. */
      counter_bank_iban?: string;
      /** @description The company's avatar. */
      avatar?: components["schemas"]["Avatar"];
      /** @description The company's main address. */
      address_main?: components["schemas"]["Address"];
      /** @description The company's postal address. */
      address_postal?: components["schemas"]["Address"];
      /** @description The version of the terms of service accepted by the user. */
      version_terms_of_service?: string;
      /** @description The existing bunq aliases for the company's directors. */
      directors?: readonly components["schemas"]["LabelUser"][];
      /** @description The person's preferred language. Formatted as a ISO 639-1 language code plus a ISO 3166-1 alpha-2 country code, seperated by an underscore. */
      language?: string;
      /** @description The country as an ISO 3166-1 alpha-2 country code. */
      country?: string;
      /** @description The person's preferred region. Formatted as a ISO 639-1 language code plus a ISO 3166-1 alpha-2 country code, seperated by an underscore. */
      region?: string;
      /** @description The names of the company's ultimate beneficiary owners. Minimum zero, maximum four. */
      ubo?: readonly components["schemas"]["Ubo"][];
      /** @description The user status. Can be: ACTIVE, SIGNUP, RECOVERY. */
      status?: string;
      /** @description The user sub-status. Can be: NONE, FACE_RESET, APPROVAL, APPROVAL_DIRECTOR, APPROVAL_PARENT, APPROVAL_SUPPORT, COUNTER_IBAN, IDEAL or SUBMIT. */
      sub_status?: string;
      /** @description The setting for the session timeout of the company in seconds. */
      session_timeout?: number;
      /** @description The amount the company can pay in the session without asking for credentials. */
      daily_limit_without_confirmation_login?: components["schemas"]["Amount"];
      /** @description The types of notifications that will result in a push notification or URL callback for this UserCompany. */
      notification_filters?: readonly components["schemas"]["NotificationFilter"][];
      /** @description The customer profile of the company. */
      customer?: components["schemas"]["Customer"];
      /** @description The customer limits of the company. */
      customer_limit?: components["schemas"]["CustomerLimit"];
      /** @description The subscription of the company. */
      billing_contract?: readonly components["schemas"]["BillingContractSubscription"][];
      /** @description The user deny reason. */
      deny_reason?: string;
      /** @description The relations for this user. */
      relations?: readonly components["schemas"]["RelationUser"][];
      /** @description The user's tax residence numbers for different countries. */
      tax_resident?: readonly components["schemas"]["TaxResident"][];
    };
    UserCompanyUpdate: {
      /** @description The id of the modified company. */
      id?: number;
    };
    UserCredentialPasswordIpListing: {
      /** @description The id of the credential. */
      id?: number;
      /** @description The timestamp of the credential object's creation. */
      created?: string;
      /** @description The timestamp of the credential object's last update. */
      updated?: string;
      /** @description The status of the credential. */
      status?: string;
      /** @description When the status is PENDING_FIRST_USE: when the credential expires. */
      expiry_time?: string;
      /** @description When the status is PENDING_FIRST_USE: the value of the token. */
      token_value?: string;
      /** @description When the status is ACTIVE: the details of the device that may use the credential. */
      permitted_device?: components["schemas"]["PermittedDevice"];
    };
    UserCredentialPasswordIpRead: {
      /** @description The id of the credential. */
      id?: number;
      /** @description The timestamp of the credential object's creation. */
      created?: string;
      /** @description The timestamp of the credential object's last update. */
      updated?: string;
      /** @description The status of the credential. */
      status?: string;
      /** @description When the status is PENDING_FIRST_USE: when the credential expires. */
      expiry_time?: string;
      /** @description When the status is PENDING_FIRST_USE: the value of the token. */
      token_value?: string;
      /** @description When the status is ACTIVE: the details of the device that may use the credential. */
      permitted_device?: components["schemas"]["PermittedDevice"];
    };
    UserLegalNameListing: {
      /** @description All legal names that can be used by the user */
      legal_names?: readonly string[];
    };
    UserListing: {
      UserPerson?: components["schemas"]["UserPerson"];
      UserCompany?: components["schemas"]["UserCompany"];
      UserApiKey?: components["schemas"]["UserApiKey"];
      UserPaymentServiceProvider?: components["schemas"]["UserPaymentServiceProvider"];
    };
    UserPaymentServiceProvider: {
      /** @description The id of the user. */
      id?: number;
      /** @description The timestamp of the user object's creation. */
      created?: string;
      /** @description The timestamp of the user object's last update. */
      updated?: string;
      /** @description The distinguished name from the certificate used to identify this user. */
      certificate_distinguished_name?: string;
      /** @description The aliases of the user. */
      alias?: readonly components["schemas"]["Pointer"][];
      /** @description The user's avatar. */
      avatar?: components["schemas"]["Avatar"];
      /** @description The user status. The user status. Can be: ACTIVE, BLOCKED or DENIED. */
      status?: string;
      /** @description The user sub-status. Can be: NONE */
      sub_status?: string;
      /** @description The providers's public UUID. */
      public_uuid?: string;
      /** @description The display name for the provider. */
      display_name?: string;
      /** @description The public nick name for the provider. */
      public_nick_name?: string;
      /** @description The provider's language. Formatted as a ISO 639-1 language code plus a ISO 3166-1 alpha-2 country code, separated by an underscore. */
      language?: string;
      /** @description The provider's region. Formatted as a ISO 639-1 language code plus a ISO 3166-1 alpha-2 country code, separated by an underscore. */
      region?: string;
      /** @description The setting for the session timeout of the user in seconds. */
      session_timeout?: number;
    };
    UserPaymentServiceProviderRead: {
      /** @description The id of the user. */
      id?: number;
      /** @description The timestamp of the user object's creation. */
      created?: string;
      /** @description The timestamp of the user object's last update. */
      updated?: string;
      /** @description The distinguished name from the certificate used to identify this user. */
      certificate_distinguished_name?: string;
      /** @description The aliases of the user. */
      alias?: readonly components["schemas"]["Pointer"][];
      /** @description The user's avatar. */
      avatar?: components["schemas"]["Avatar"];
      /** @description The user status. The user status. Can be: ACTIVE, BLOCKED or DENIED. */
      status?: string;
      /** @description The user sub-status. Can be: NONE */
      sub_status?: string;
      /** @description The providers's public UUID. */
      public_uuid?: string;
      /** @description The display name for the provider. */
      display_name?: string;
      /** @description The public nick name for the provider. */
      public_nick_name?: string;
      /** @description The provider's language. Formatted as a ISO 639-1 language code plus a ISO 3166-1 alpha-2 country code, separated by an underscore. */
      language?: string;
      /** @description The provider's region. Formatted as a ISO 639-1 language code plus a ISO 3166-1 alpha-2 country code, separated by an underscore. */
      region?: string;
      /** @description The setting for the session timeout of the user in seconds. */
      session_timeout?: number;
    };
    UserPerson: {
      /** @description The subscription type the user should start on. */
      subscription_type?: string;
      /** @description The person's first name. */
      first_name?: string;
      /** @description The person's middle name. */
      middle_name?: string;
      /** @description The person's last name. */
      last_name?: string;
      /** @description The public nick name for the person. */
      public_nick_name?: string;
      /** @description The person's main address. */
      address_main?: components["schemas"]["Address"];
      /** @description The person's postal address. */
      address_postal?: components["schemas"]["Address"];
      /** @description The public UUID of the user's avatar. */
      avatar_uuid?: string;
      /** @description The user's tax residence numbers for different countries. */
      tax_resident?: components["schemas"]["TaxResident"][];
      /** @description The type of identification document the person registered with. */
      document_type?: string;
      /** @description The identification document number the person registered with. */
      document_number?: string;
      /** @description The country which issued the identification document the person registered with. */
      document_country_of_issuance?: string;
      /** @description The reference to the uploaded picture/scan of the front side of the identification document. */
      document_front_attachment_id?: number;
      /** @description The reference to the uploaded picture/scan of the back side of the identification document. */
      document_back_attachment_id?: number;
      /** @description The person's date of birth. Accepts ISO8601 date formats. */
      date_of_birth?: string;
      /** @description The person's nationality. Formatted as a SO 3166-1 alpha-2 country code. */
      nationality?: string;
      /** @description The person's preferred language. Formatted as a ISO 639-1 language code plus a ISO 3166-1 alpha-2 country code, seperated by an underscore. */
      language?: string;
      /** @description The person's preferred region. Formatted as a ISO 639-1 language code plus a ISO 3166-1 alpha-2 country code, seperated by an underscore. */
      region?: string;
      /** @description The person's gender. Can be MALE, FEMALE or UNKNOWN. */
      gender?: string;
      /** @description The user status. The user status. Can be: ACTIVE, BLOCKED, SIGNUP, RECOVERY, DENIED or ABORTED. */
      status?: string;
      /** @description The user sub-status. Can be: NONE, FACE_RESET, APPROVAL, APPROVAL_DIRECTOR, APPROVAL_PARENT, APPROVAL_SUPPORT, COUNTER_IBAN, IDEAL or SUBMIT. */
      sub_status?: string;
      /** @description The legal guardian of the user. Required for minors. */
      legal_guardian_alias?: components["schemas"]["Pointer"];
      /** @description The setting for the session timeout of the user in seconds. */
      session_timeout?: number;
      /** @description The amount the user can pay in the session without asking for credentials. */
      daily_limit_without_confirmation_login?: components["schemas"]["Amount"];
      /** @description The display name for the person. */
      display_name?: string;
      /** @description The type of signup track the user is following. */
      signup_track_type?: string;
      /** @description The id of the modified person object. */
      id?: number;
      /** @description The timestamp of the person object's creation. */
      created?: string;
      /** @description The timestamp of the person object's last update. */
      updated?: string;
      /** @description The person's public UUID. */
      public_uuid?: string;
      /** @description The person's legal name. */
      legal_name?: string;
      /** @description The aliases of the user. */
      alias?: readonly components["schemas"]["Pointer"][];
      /** @description The person's place of birth. */
      place_of_birth?: string;
      /** @description The person's country of birth. Formatted as a SO 3166-1 alpha-2 country code. */
      country_of_birth?: string;
      /** @description The user's avatar. */
      avatar?: components["schemas"]["Avatar"];
      /** @description The version of the terms of service accepted by the user. */
      version_terms_of_service?: string;
      /** @description The types of notifications that will result in a push notification or URL callback for this UserPerson. */
      notification_filters?: readonly components["schemas"]["NotificationFilter"][];
      /** @description The relations for this user. */
      relations?: readonly components["schemas"]["RelationUser"][];
    };
    UserPersonRead: {
      /** @description The id of the modified person object. */
      id?: number;
      /** @description The timestamp of the person object's creation. */
      created?: string;
      /** @description The timestamp of the person object's last update. */
      updated?: string;
      /** @description The person's public UUID. */
      public_uuid?: string;
      /** @description The person's first name. */
      first_name?: string;
      /** @description The person's middle name. */
      middle_name?: string;
      /** @description The person's last name. */
      last_name?: string;
      /** @description The person's legal name. */
      legal_name?: string;
      /** @description The display name for the person. */
      display_name?: string;
      /** @description The public nick name for the person. */
      public_nick_name?: string;
      /** @description The aliases of the user. */
      alias?: readonly components["schemas"]["Pointer"][];
      /** @description The user's tax residence numbers for different countries. */
      tax_resident?: readonly components["schemas"]["TaxResident"][];
      /** @description The person's main address. */
      address_main?: components["schemas"]["Address"];
      /** @description The person's postal address. */
      address_postal?: components["schemas"]["Address"];
      /** @description The person's date of birth. Accepts ISO8601 date formats. */
      date_of_birth?: string;
      /** @description The person's place of birth. */
      place_of_birth?: string;
      /** @description The person's country of birth. Formatted as a SO 3166-1 alpha-2 country code. */
      country_of_birth?: string;
      /** @description The person's nationality. Formatted as a SO 3166-1 alpha-2 country code. */
      nationality?: string;
      /** @description The person's preferred language. Formatted as a ISO 639-1 language code plus a ISO 3166-1 alpha-2 country code, seperated by an underscore. */
      language?: string;
      /** @description The person's preferred region. Formatted as a ISO 639-1 language code plus a ISO 3166-1 alpha-2 country code, seperated by an underscore. */
      region?: string;
      /** @description The person's gender. Can be MALE, FEMALE or UNKNOWN. */
      gender?: string;
      /** @description The user's avatar. */
      avatar?: components["schemas"]["Avatar"];
      /** @description The version of the terms of service accepted by the user. */
      version_terms_of_service?: string;
      /** @description The user status. The user status. Can be: ACTIVE, BLOCKED, SIGNUP, RECOVERY, DENIED or ABORTED. */
      status?: string;
      /** @description The user sub-status. Can be: NONE, FACE_RESET, APPROVAL, APPROVAL_DIRECTOR, APPROVAL_PARENT, APPROVAL_SUPPORT, COUNTER_IBAN, IDEAL or SUBMIT. */
      sub_status?: string;
      /** @description The setting for the session timeout of the user in seconds. */
      session_timeout?: number;
      /** @description The amount the user can pay in the session without asking for credentials. */
      daily_limit_without_confirmation_login?: components["schemas"]["Amount"];
      /** @description The types of notifications that will result in a push notification or URL callback for this UserPerson. */
      notification_filters?: readonly components["schemas"]["NotificationFilter"][];
      /** @description The relations for this user. */
      relations?: readonly components["schemas"]["RelationUser"][];
    };
    UserPersonUpdate: {
      /** @description The id of the modified person object. */
      id?: number;
    };
    UserRead: {
      UserPerson?: components["schemas"]["UserPerson"];
      UserCompany?: components["schemas"]["UserCompany"];
      UserApiKey?: components["schemas"]["UserApiKey"];
      UserPaymentServiceProvider?: components["schemas"]["UserPaymentServiceProvider"];
    };
    Whitelist: Record<string, never>;
    WhitelistResult: {
      /** @description The ID of the whitelist entry. */
      id?: number;
      /** @description The account from which payments will be deducted when a transaction is matched with this whitelist. */
      monetary_account_paying_id?: number;
      /** @description The status of the WhitelistResult. */
      status?: string;
      /** @description The subStatus of the WhitelistResult. */
      sub_status?: string;
      /** @description The message when the whitelist result has failed due to user error. */
      error_message?: readonly components["schemas"]["Error"][];
      /** @description The corresponding whitelist. */
      whitelist?: components["schemas"]["Whitelist"];
      /** @description The details of the external object the event was created for. */
      object?: components["schemas"]["WhitelistResultViewAnchoredObject"];
      /** @description The reference to the object used for split the bill. Can be RequestInquiry or RequestInquiryBatch */
      request_reference_split_the_bill?: readonly components["schemas"]["RequestInquiryReference"][];
    };
    WhitelistResultViewAnchoredObject: {
      /** @description The ID of the whitelist entry. */
      id?: number;
      /** @description The RequestResponse object */
      requestResponse?: components["schemas"]["RequestResponse"];
      /** @description The DraftPayment object */
      draftPayment?: components["schemas"]["DraftPayment"];
    };
    WhitelistSddListing: {
      /** @description The ID of the whitelist entry. */
      id?: number;
      /** @description The account to which payments will come in before possibly being 'redirected' by the whitelist. */
      monetary_account_incoming_id?: number;
      /** @description The account from which payments will be deducted when a transaction is matched with this whitelist. */
      monetary_account_paying_id?: number;
      /** @description The type of the SDD whitelist, can be CORE or B2B. */
      type?: string;
      /** @description The status of the whitelist. */
      status?: string;
      /** @description The credit scheme ID provided by the counterparty. */
      credit_scheme_identifier?: string;
      /** @description The mandate ID provided by the counterparty. */
      mandate_identifier?: string;
      /** @description The account to which payments will be paid. */
      counterparty_alias?: components["schemas"]["LabelMonetaryAccount"];
      /** @description The monthly maximum amount that can be deducted from the target account. */
      maximum_amount_per_month?: components["schemas"]["Amount"];
      /** @description The user who created the whitelist entry. */
      user_alias_created?: components["schemas"]["LabelUser"];
    };
    WhitelistSddMonetaryAccountPayingListing: {
      /** @description The ID of the whitelist entry. */
      id?: number;
      /** @description The account to which payments will come in before possibly being 'redirected' by the whitelist. */
      monetary_account_incoming_id?: number;
      /** @description The account from which payments will be deducted when a transaction is matched with this whitelist. */
      monetary_account_paying_id?: number;
      /** @description The type of the SDD whitelist, can be CORE or B2B. */
      type?: string;
      /** @description The status of the whitelist. */
      status?: string;
      /** @description The credit scheme ID provided by the counterparty. */
      credit_scheme_identifier?: string;
      /** @description The mandate ID provided by the counterparty. */
      mandate_identifier?: string;
      /** @description The account to which payments will be paid. */
      counterparty_alias?: components["schemas"]["LabelMonetaryAccount"];
      /** @description The monthly maximum amount that can be deducted from the target account. */
      maximum_amount_per_month?: components["schemas"]["Amount"];
      /** @description The user who created the whitelist entry. */
      user_alias_created?: components["schemas"]["LabelUser"];
    };
    WhitelistSddMonetaryAccountPayingRead: {
      /** @description The ID of the whitelist entry. */
      id?: number;
      /** @description The account to which payments will come in before possibly being 'redirected' by the whitelist. */
      monetary_account_incoming_id?: number;
      /** @description The account from which payments will be deducted when a transaction is matched with this whitelist. */
      monetary_account_paying_id?: number;
      /** @description The type of the SDD whitelist, can be CORE or B2B. */
      type?: string;
      /** @description The status of the whitelist. */
      status?: string;
      /** @description The credit scheme ID provided by the counterparty. */
      credit_scheme_identifier?: string;
      /** @description The mandate ID provided by the counterparty. */
      mandate_identifier?: string;
      /** @description The account to which payments will be paid. */
      counterparty_alias?: components["schemas"]["LabelMonetaryAccount"];
      /** @description The monthly maximum amount that can be deducted from the target account. */
      maximum_amount_per_month?: components["schemas"]["Amount"];
      /** @description The user who created the whitelist entry. */
      user_alias_created?: components["schemas"]["LabelUser"];
    };
    WhitelistSddOneOff: {
      /** @description ID of the monetary account of which you want to pay from. */
      monetary_account_paying_id: number;
      /** @description ID of the request for which you want to whitelist the originating SDD. */
      request_id: number;
      /** @description The maximum amount of money that is allowed to be deducted per month based on the whitelist. */
      maximum_amount_per_month?: components["schemas"]["Amount"];
      /** @description The maximum amount of money that is allowed to be deducted per payment based on the whitelist. */
      maximum_amount_per_payment?: components["schemas"]["Amount"];
    };
    WhitelistSddOneOffCreate: {
      /** @description The id of the created item */
      Id?: components["schemas"]["BunqId"];
    };
    WhitelistSddOneOffDelete: Record<string, never>;
    WhitelistSddOneOffListing: {
      /** @description The ID of the whitelist entry. */
      id?: number;
      /** @description The account to which payments will come in before possibly being 'redirected' by the whitelist. */
      monetary_account_incoming_id?: number;
      /** @description The account from which payments will be deducted when a transaction is matched with this whitelist. */
      monetary_account_paying_id?: number;
      /** @description The type of the SDD whitelist, can be CORE or B2B. */
      type?: string;
      /** @description The status of the whitelist. */
      status?: string;
      /** @description The credit scheme ID provided by the counterparty. */
      credit_scheme_identifier?: string;
      /** @description The account to which payments will be paid. */
      counterparty_alias?: components["schemas"]["LabelMonetaryAccount"];
      /** @description The monthly maximum amount that can be deducted from the target account. */
      maximum_amount_per_month?: components["schemas"]["Amount"];
      /** @description The maximum amount per payment that can be deducted from the target account. */
      maximum_amount_per_payment?: components["schemas"]["Amount"];
      /** @description The user who created the whitelist entry. */
      user_alias_created?: components["schemas"]["LabelUser"];
    };
    WhitelistSddOneOffRead: {
      /** @description The ID of the whitelist entry. */
      id?: number;
      /** @description The account to which payments will come in before possibly being 'redirected' by the whitelist. */
      monetary_account_incoming_id?: number;
      /** @description The account from which payments will be deducted when a transaction is matched with this whitelist. */
      monetary_account_paying_id?: number;
      /** @description The type of the SDD whitelist, can be CORE or B2B. */
      type?: string;
      /** @description The status of the whitelist. */
      status?: string;
      /** @description The credit scheme ID provided by the counterparty. */
      credit_scheme_identifier?: string;
      /** @description The account to which payments will be paid. */
      counterparty_alias?: components["schemas"]["LabelMonetaryAccount"];
      /** @description The monthly maximum amount that can be deducted from the target account. */
      maximum_amount_per_month?: components["schemas"]["Amount"];
      /** @description The maximum amount per payment that can be deducted from the target account. */
      maximum_amount_per_payment?: components["schemas"]["Amount"];
      /** @description The user who created the whitelist entry. */
      user_alias_created?: components["schemas"]["LabelUser"];
    };
    WhitelistSddOneOffUpdate: {
      /** @description The id of the created item */
      Id?: components["schemas"]["BunqId"];
    };
    WhitelistSddRead: {
      /** @description The ID of the whitelist entry. */
      id?: number;
      /** @description The account to which payments will come in before possibly being 'redirected' by the whitelist. */
      monetary_account_incoming_id?: number;
      /** @description The account from which payments will be deducted when a transaction is matched with this whitelist. */
      monetary_account_paying_id?: number;
      /** @description The type of the SDD whitelist, can be CORE or B2B. */
      type?: string;
      /** @description The status of the whitelist. */
      status?: string;
      /** @description The credit scheme ID provided by the counterparty. */
      credit_scheme_identifier?: string;
      /** @description The mandate ID provided by the counterparty. */
      mandate_identifier?: string;
      /** @description The account to which payments will be paid. */
      counterparty_alias?: components["schemas"]["LabelMonetaryAccount"];
      /** @description The monthly maximum amount that can be deducted from the target account. */
      maximum_amount_per_month?: components["schemas"]["Amount"];
      /** @description The user who created the whitelist entry. */
      user_alias_created?: components["schemas"]["LabelUser"];
    };
    WhitelistSddRecurring: {
      /** @description ID of the monetary account of which you want to pay from. */
      monetary_account_paying_id: number;
      /** @description ID of the request for which you want to whitelist the originating SDD. */
      request_id: number;
      /** @description The maximum amount of money that is allowed to be deducted per month based on the whitelist. */
      maximum_amount_per_month?: components["schemas"]["Amount"];
      /** @description The maximum amount of money that is allowed to be deducted per payment based on the whitelist. */
      maximum_amount_per_payment?: components["schemas"]["Amount"];
    };
    WhitelistSddRecurringCreate: {
      /** @description The id of the created item */
      Id?: components["schemas"]["BunqId"];
    };
    WhitelistSddRecurringDelete: Record<string, never>;
    WhitelistSddRecurringListing: {
      /** @description The ID of the whitelist entry. */
      id?: number;
      /** @description The account to which payments will come in before possibly being 'redirected' by the whitelist. */
      monetary_account_incoming_id?: number;
      /** @description The account from which payments will be deducted when a transaction is matched with this whitelist. */
      monetary_account_paying_id?: number;
      /** @description The type of the SDD whitelist, can be CORE or B2B. */
      type?: string;
      /** @description The status of the whitelist. */
      status?: string;
      /** @description The credit scheme ID provided by the counterparty. */
      credit_scheme_identifier?: string;
      /** @description The mandate ID provided by the counterparty. */
      mandate_identifier?: string;
      /** @description The account to which payments will be paid. */
      counterparty_alias?: components["schemas"]["LabelMonetaryAccount"];
      /** @description The monthly maximum amount that can be deducted from the target account. */
      maximum_amount_per_month?: components["schemas"]["Amount"];
      /** @description The maximum amount per payment that can be deducted from the target account. */
      maximum_amount_per_payment?: components["schemas"]["Amount"];
      /** @description The user who created the whitelist entry. */
      user_alias_created?: components["schemas"]["LabelUser"];
    };
    WhitelistSddRecurringRead: {
      /** @description The ID of the whitelist entry. */
      id?: number;
      /** @description The account to which payments will come in before possibly being 'redirected' by the whitelist. */
      monetary_account_incoming_id?: number;
      /** @description The account from which payments will be deducted when a transaction is matched with this whitelist. */
      monetary_account_paying_id?: number;
      /** @description The type of the SDD whitelist, can be CORE or B2B. */
      type?: string;
      /** @description The status of the whitelist. */
      status?: string;
      /** @description The credit scheme ID provided by the counterparty. */
      credit_scheme_identifier?: string;
      /** @description The mandate ID provided by the counterparty. */
      mandate_identifier?: string;
      /** @description The account to which payments will be paid. */
      counterparty_alias?: components["schemas"]["LabelMonetaryAccount"];
      /** @description The monthly maximum amount that can be deducted from the target account. */
      maximum_amount_per_month?: components["schemas"]["Amount"];
      /** @description The maximum amount per payment that can be deducted from the target account. */
      maximum_amount_per_payment?: components["schemas"]["Amount"];
      /** @description The user who created the whitelist entry. */
      user_alias_created?: components["schemas"]["LabelUser"];
    };
    WhitelistSddRecurringUpdate: {
      /** @description The id of the created item */
      Id?: components["schemas"]["BunqId"];
    };
  };
  responses: {
    /** @description This is how the error response looks like for 4XX response codes */
    GenericError: {
      headers: {
        "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
        "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
      };
      content: {
        "application/json": {
          Error?: components["schemas"]["Error"];
        };
      };
    };
  };
  parameters: {
    /** @description The standard HTTP Cache-Control header is required for all signed requests. */
    "Cache-Control"?: string;
    /** @description The User-Agent header field should contain information about the user agent originating the request. There are no restrictions on the value of this header. */
    "User-Agent": string;
    /** @description The X-Bunq-Language header must contain a preferred language indication. The value of this header is formatted as a ISO 639-1 language code plus a ISO 3166-1 alpha-2 country code, separated by an underscore. Currently only the languages en_US and nl_NL are supported. Anything else will default to en_US. */
    "X-Bunq-Language"?: string;
    /** @description The X-Bunq-Region header must contain the region (country) of the client device. The value of this header is formatted as a ISO 639-1 language code plus a ISO 3166-1 alpha-2 country code, separated by an underscore. */
    "X-Bunq-Region"?: string;
    /** @description This header must specify an ID with each request that is unique for the logged in user. There are no restrictions for the format of this ID. However, the server will respond with an error when the same ID is used again on the same DeviceServer. */
    "X-Bunq-Client-Request-Id"?: string;
    /** @description This header must specify the geolocation of the device. The format of this value is longitude latitude altitude radius country. The country is expected to be formatted of an ISO 3166-1 alpha-2 country code. When no geolocation is available or known the header must still be included but can be zero valued. */
    "X-Bunq-Geolocation"?: string;
    /** @description The signature header is required for some API calls. See the signing page for details on how to create this signature. */
    "X-Bunq-Client-Signature"?: string;
    /** @description The authentication token is used to authenticate the source of the API call. It is required by all API calls except for POST /v1/installation. It is important to note that the device and session calls are using the token from the response of the installation call, while all the other calls use the token from the response of the session-server call */
    "X-Bunq-Client-Authentication": string;
    /** @description This header should be used when uploading an Attachment's content to give it a description. */
    "X-Bunq-Attachment-Description"?: string;
  };
  requestBodies: never;
  headers: {
    /** @description This header must specify an ID with each request that is unique for the logged in user. There are no restrictions for the format of this ID. However, the server will respond with an error when the same ID is used again on the same DeviceServer. */
    "X-Bunq-Client-Request-Id": string;
    /** @description A unique ID for the response formatted as a UUID. Clients can use it to add extra protection against replay attacks. */
    "X-Bunq-Client-Response-Id": string;
    /** @description The server's signature for this response. See the signing page for details on how to verify this signature. */
    "X-Bunq-Server-Signature": string;
  };
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  /** @description Public endpoint for getting the place info. */
  READ_ActivityMapPlacePublic: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        itemId: number;
      };
    };
    responses: {
      /** @description Public endpoint for getting the place info. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["ActivityMapPlacePublicRead"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Get the available categories. */
  List_all_AdditionalTransactionInformationCategory_for_User: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
      };
    };
    responses: {
      /** @description Get the available categories. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["AdditionalTransactionInformationCategoryListing"][];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Manage user-defined categories. */
  CREATE_AdditionalTransactionInformationCategoryUserDefined_for_User: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["AdditionalTransactionInformationCategoryUserDefined"];
      };
    };
    responses: {
      /** @description Manage user-defined categories. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["AdditionalTransactionInformationCategoryUserDefinedCreate"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Create a new monetary account attachment. Create a POST request with a payload that contains the binary representation of the file, without any JSON wrapping. Make sure you define the MIME type (i.e. image/jpeg) in the Content-Type header. You are required to provide a description of the attachment using the X-Bunq-Attachment-Description header. */
  CREATE_Attachment_for_User_MonetaryAccount: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["AttachmentMonetaryAccount"];
      };
    };
    responses: {
      /** @description This call is used to upload an attachment that can be referenced to in payment requests and payments sent from a specific monetary account. Attachments supported are png, jpg and gif. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["AttachmentMonetaryAccountCreate"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Get a specific attachment. The header of the response contains the content-type of the attachment. */
  READ_Attachment_for_User: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        itemId: number;
      };
    };
    responses: {
      /** @description This call is used to upload an attachment that is accessible only by a specific user. This can be used for example to upload passport scans or other documents. Attachments supported are png, jpg and gif. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["AttachmentUserRead"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Create a new public attachment. Create a POST request with a payload that contains a binary representation of the file, without any JSON wrapping. Make sure you define the MIME type (i.e. image/jpeg, or image/png) in the Content-Type header. You are required to provide a description of the attachment using the X-Bunq-Attachment-Description header. */
  CREATE_AttachmentPublic: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["AttachmentPublic"];
      };
    };
    responses: {
      /** @description This call is used to upload an attachment that can be referenced to as an avatar (through the Avatar endpoint) or in a tab sent. Attachments supported are png, jpg and gif. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["AttachmentPublicCreate"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Get a specific attachment's metadata through its UUID. The Content-Type header of the response will describe the MIME type of the attachment file. */
  READ_AttachmentPublic: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        itemId: number;
      };
    };
    responses: {
      /** @description This call is used to upload an attachment that can be referenced to as an avatar (through the Avatar endpoint) or in a tab sent. Attachments supported are png, jpg and gif. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["AttachmentPublicRead"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Avatars are public images used to represent you or your company. Avatars are used to represent users, monetary accounts and cash registers. Avatars cannot be deleted, only replaced. Avatars can be updated after uploading the image you would like to use through AttachmentPublic. Using the attachment_public_uuid which is returned you can update your Avatar. Avatars used for cash registers and company accounts will be reviewed by bunq. */
  CREATE_Avatar: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Avatar"];
      };
    };
    responses: {
      /** @description Avatars are public images used to represent you or your company. Avatars are used to represent users, monetary accounts and cash registers. Avatars cannot be deleted, only replaced. Avatars can be updated after uploading the image you would like to use through AttachmentPublic. Using the attachment_public_uuid which is returned you can update your Avatar. Avatars used for cash registers and company accounts will be reviewed by bunq. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["AvatarCreate"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Avatars are public images used to represent you or your company. Avatars are used to represent users, monetary accounts and cash registers. Avatars cannot be deleted, only replaced. Avatars can be updated after uploading the image you would like to use through AttachmentPublic. Using the attachment_public_uuid which is returned you can update your Avatar. Avatars used for cash registers and company accounts will be reviewed by bunq. */
  READ_Avatar: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        itemId: number;
      };
    };
    responses: {
      /** @description Avatars are public images used to represent you or your company. Avatars are used to represent users, monetary accounts and cash registers. Avatars cannot be deleted, only replaced. Avatars can be updated after uploading the image you would like to use through AttachmentPublic. Using the attachment_public_uuid which is returned you can update your Avatar. Avatars used for cash registers and company accounts will be reviewed by bunq. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["AvatarRead"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Get all subscription billing contract for the authenticated user. */
  List_all_BillingContractSubscription_for_User: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
      };
    };
    responses: {
      /** @description Show the subscription billing contract for the authenticated user. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["BillingContractSubscriptionListing"][];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description bunq.me public profile of the user. */
  READ_BunqmeFundraiserProfile_for_User: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        itemId: number;
      };
    };
    responses: {
      /** @description bunq.me public profile of the user. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["BunqMeFundraiserProfileUserRead"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description bunq.me public profile of the user. */
  List_all_BunqmeFundraiserProfile_for_User: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
      };
    };
    responses: {
      /** @description bunq.me public profile of the user. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["BunqMeFundraiserProfileUserListing"][];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description bunq.me fundraiser result containing all payments. */
  READ_BunqmeFundraiserResult_for_User_MonetaryAccount: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
        itemId: number;
      };
    };
    responses: {
      /** @description bunq.me fundraiser result containing all payments. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["BunqMeFundraiserResultRead"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description bunq.me tabs allows you to create a payment request and share the link through e-mail, chat, etc. Multiple persons are able to respond to the payment request and pay through bunq, iDeal or SOFORT. */
  List_all_BunqmeTab_for_User_MonetaryAccount: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
      };
    };
    responses: {
      /** @description bunq.me tabs allows you to create a payment request and share the link through e-mail, chat, etc. Multiple persons are able to respond to the payment request and pay through bunq, iDeal or SOFORT. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["BunqMeTabListing"][];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description bunq.me tabs allows you to create a payment request and share the link through e-mail, chat, etc. Multiple persons are able to respond to the payment request and pay through bunq, iDeal or SOFORT. */
  CREATE_BunqmeTab_for_User_MonetaryAccount: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["BunqMeTab"];
      };
    };
    responses: {
      /** @description bunq.me tabs allows you to create a payment request and share the link through e-mail, chat, etc. Multiple persons are able to respond to the payment request and pay through bunq, iDeal or SOFORT. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["BunqMeTabCreate"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description bunq.me tabs allows you to create a payment request and share the link through e-mail, chat, etc. Multiple persons are able to respond to the payment request and pay through bunq, iDeal or SOFORT. */
  READ_BunqmeTab_for_User_MonetaryAccount: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
        itemId: number;
      };
    };
    responses: {
      /** @description bunq.me tabs allows you to create a payment request and share the link through e-mail, chat, etc. Multiple persons are able to respond to the payment request and pay through bunq, iDeal or SOFORT. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["BunqMeTabRead"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description bunq.me tabs allows you to create a payment request and share the link through e-mail, chat, etc. Multiple persons are able to respond to the payment request and pay through bunq, iDeal or SOFORT. */
  UPDATE_BunqmeTab_for_User_MonetaryAccount: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
        itemId: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["BunqMeTab"];
      };
    };
    responses: {
      /** @description bunq.me tabs allows you to create a payment request and share the link through e-mail, chat, etc. Multiple persons are able to respond to the payment request and pay through bunq, iDeal or SOFORT. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["BunqMeTabUpdate"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Used to view bunq.me TabResultResponse objects belonging to a tab. A TabResultResponse is an object that holds details on a tab which has been paid from the provided monetary account. */
  READ_BunqmeTabResultResponse_for_User_MonetaryAccount: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
        itemId: number;
      };
    };
    responses: {
      /** @description Used to view bunq.me TabResultResponse objects belonging to a tab. A TabResultResponse is an object that holds details on a tab which has been paid from the provided monetary account. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["BunqMeTabResultResponseRead"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Used for managing OAuth Client Callback URLs. */
  READ_CallbackUrl_for_User_OauthClient: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "oauth-clientID": number;
        itemId: number;
      };
    };
    responses: {
      /** @description Used for managing OAuth Client Callback URLs. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["OauthCallbackUrlRead"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Used for managing OAuth Client Callback URLs. */
  UPDATE_CallbackUrl_for_User_OauthClient: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "oauth-clientID": number;
        itemId: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["OauthCallbackUrl"];
      };
    };
    responses: {
      /** @description Used for managing OAuth Client Callback URLs. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["OauthCallbackUrlUpdate"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Used for managing OAuth Client Callback URLs. */
  DELETE_CallbackUrl_for_User_OauthClient: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "oauth-clientID": number;
        itemId: number;
      };
    };
    responses: {
      /** @description Used for managing OAuth Client Callback URLs. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["OauthCallbackUrlDelete"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Used for managing OAuth Client Callback URLs. */
  List_all_CallbackUrl_for_User_OauthClient: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "oauth-clientID": number;
      };
    };
    responses: {
      /** @description Used for managing OAuth Client Callback URLs. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["OauthCallbackUrlListing"][];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Used for managing OAuth Client Callback URLs. */
  CREATE_CallbackUrl_for_User_OauthClient: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "oauth-clientID": number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["OauthCallbackUrl"];
      };
    };
    responses: {
      /** @description Used for managing OAuth Client Callback URLs. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["OauthCallbackUrlCreate"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Return the details of a specific card. */
  READ_Card_for_User: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        itemId: number;
      };
    };
    responses: {
      /** @description Endpoint for retrieving details for the cards the user has access to. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["CardRead"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Update the card details. Allow to change pin code, status, limits, country permissions and the monetary account connected to the card. When the card has been received, it can be also activated through this endpoint. */
  UPDATE_Card_for_User: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        itemId: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Card"];
      };
    };
    responses: {
      /** @description Endpoint for retrieving details for the cards the user has access to. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["CardUpdate"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Return all the cards available to the user. */
  List_all_Card_for_User: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
      };
    };
    responses: {
      /** @description Endpoint for retrieving details for the cards the user has access to. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["CardListing"][];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Used to update multiple cards in a batch. */
  CREATE_CardBatch_for_User: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CardBatch"];
      };
    };
    responses: {
      /** @description Used to update multiple cards in a batch. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["CardBatchCreate"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Used to replace multiple cards in a batch. */
  CREATE_CardBatchReplace_for_User: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CardBatchReplace"];
      };
    };
    responses: {
      /** @description Used to replace multiple cards in a batch. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["CardBatchReplaceCreate"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Create a new credit card request. */
  CREATE_CardCredit_for_User: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CardCredit"];
      };
    };
    responses: {
      /** @description With bunq it is possible to order credit cards that can then be connected with each one of the monetary accounts the user has access to (including connected accounts). */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["CardCreditCreate"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Create a new debit card request. */
  CREATE_CardDebit_for_User: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CardDebit"];
      };
    };
    responses: {
      /** @description With bunq it is possible to order debit cards that can then be connected with each one of the monetary accounts the user has access to (including connected accounts). */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["CardDebitCreate"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Return all the accepted card names for a specific user. */
  List_all_CardName_for_User: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
      };
    };
    responses: {
      /** @description Endpoint for getting all the accepted card names for a user. As bunq do not allow total freedom in choosing the name that is going to be printed on the card, the following formats are accepted: Name Surname, N. Surname, N Surname or Surname. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["CardNameListing"][];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description List all the pinned certificate chain for the given user. */
  List_all_CertificatePinned_for_User: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
      };
    };
    responses: {
      /** @description This endpoint allow you to pin the certificate chains to your account. These certificate chains are used for SSL validation whenever a callback is initiated to one of your https callback urls. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["CertificatePinnedListing"][];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Pin the certificate chain. */
  CREATE_CertificatePinned_for_User: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CertificatePinned"];
      };
    };
    responses: {
      /** @description This endpoint allow you to pin the certificate chains to your account. These certificate chains are used for SSL validation whenever a callback is initiated to one of your https callback urls. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["CertificatePinnedCreate"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Get the pinned certificate chain with the specified ID. */
  READ_CertificatePinned_for_User: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        itemId: number;
      };
    };
    responses: {
      /** @description This endpoint allow you to pin the certificate chains to your account. These certificate chains are used for SSL validation whenever a callback is initiated to one of your https callback urls. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["CertificatePinnedRead"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Remove the pinned certificate chain with the specific ID. */
  DELETE_CertificatePinned_for_User: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        itemId: number;
      };
    };
    responses: {
      /** @description This endpoint allow you to pin the certificate chains to your account. These certificate chains are used for SSL validation whenever a callback is initiated to one of your https callback urls. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["CertificatePinnedDelete"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Endpoint for apps to fetch a challenge request. */
  READ_ChallengeRequest_for_User: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        itemId: number;
      };
    };
    responses: {
      /** @description Endpoint for apps to fetch a challenge request. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["MasterCardIdentityCheckChallengeRequestUserRead"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Endpoint for apps to fetch a challenge request. */
  UPDATE_ChallengeRequest_for_User: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        itemId: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["MasterCardIdentityCheckChallengeRequestUser"];
      };
    };
    responses: {
      /** @description Endpoint for apps to fetch a challenge request. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["MasterCardIdentityCheckChallengeRequestUserUpdate"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Create and manage companies. */
  List_all_Company_for_User: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
      };
    };
    responses: {
      /** @description Create and manage companies. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["CompanyListing"][];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Create and manage companies. */
  CREATE_Company_for_User: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Company"];
      };
    };
    responses: {
      /** @description Create and manage companies. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["CompanyCreate"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Create and manage companies. */
  READ_Company_for_User: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        itemId: number;
      };
    };
    responses: {
      /** @description Create and manage companies. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["CompanyRead"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Create and manage companies. */
  UPDATE_Company_for_User: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        itemId: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Company"];
      };
    };
    responses: {
      /** @description Create and manage companies. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["CompanyUpdate"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Used to confirm availability of funds on an account. */
  CREATE_ConfirmationOfFunds_for_User: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ConfirmationOfFunds"];
      };
    };
    responses: {
      /** @description Used to confirm availability of funds on an account. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["ConfirmationOfFundsCreate"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Get the raw content of a specific attachment. */
  List_all_Content_for_User_ChatConversation_Attachment: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "chat-conversationID": number;
        attachmentID: number;
      };
    };
    responses: {
      /** @description Fetch the raw content of an attachment with given ID. The raw content is the base64 of a file, without any JSON wrapping. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["AttachmentConversationContentListing"][];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Get the raw content of a specific attachment. */
  List_all_Content_for_User_MonetaryAccount_Attachment: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
        attachmentID: number;
      };
    };
    responses: {
      /** @description Fetch the raw content of a monetary account attachment with given ID. The raw content is the binary representation of a file, without any JSON wrapping. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["AttachmentMonetaryAccountContentListing"][];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Get the raw content of a specific attachment. */
  List_all_Content_for_AttachmentPublic: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        "attachment-publicUUID": string;
      };
    };
    responses: {
      /** @description Fetch the raw content of a public attachment with given ID. The raw content is the binary representation of a file, without any JSON wrapping. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["AttachmentPublicContentListing"][];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Get the raw content of a specific attachment. */
  List_all_Content_for_User_Attachment: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        attachmentID: number;
      };
    };
    responses: {
      /** @description Fetch the raw content of a user attachment with given ID. The raw content is the binary representation of a file, without any JSON wrapping. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["AttachmentUserContentListing"][];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Used to retrieve the raw content of an annual overview. */
  List_all_Content_for_User_ExportAnnualOverview: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "export-annual-overviewID": number;
      };
    };
    responses: {
      /** @description Fetch the raw content of an annual overview. The annual overview is always in PDF format. Doc won't display the response of a request to get the content of an annual overview. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["ExportAnnualOverviewContentListing"][];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Used to retrieve the raw content of an RIB. */
  List_all_Content_for_User_MonetaryAccount_ExportRib: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
        "export-ribID": number;
      };
    };
    responses: {
      /** @description Fetch the raw content of an RIB. The RIB is always in PDF format. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["ExportRibContentListing"][];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Fetch the raw content of a card statement export. The returned file format could be CSV or PDF depending on the statement format specified during the statement creation. The doc won't display the response of a request to get the content of a statement export. */
  List_all_Content_for_User_Card_ExportStatementCard: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        cardID: number;
        "export-statement-cardID": number;
      };
    };
    responses: {
      /** @description Fetch the raw content of a card statement export. The returned file format could be CSV or PDF depending on the statement format specified during the statement creation. The doc won't display the response of a request to get the content of a statement export. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["ExportStatementCardContentListing"][];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Fetch the raw content of a statement export. The returned file format could be MT940, CSV or PDF depending on the statement format specified during the statement creation. The doc won't display the response of a request to get the content of a statement export. */
  List_all_Content_for_User_MonetaryAccount_CustomerStatement: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
        "customer-statementID": number;
      };
    };
    responses: {
      /** @description Fetch the raw content of a statement export. The returned file format could be MT940, CSV or PDF depending on the statement format specified during the statement creation. The doc won't display the response of a request to get the content of a statement export. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["ExportStatementContentListing"][];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Fetch the raw content of a payment statement export. */
  List_all_Content_for_User_MonetaryAccount_Event_Statement: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
        eventID: number;
        statementID: number;
      };
    };
    responses: {
      /** @description Fetch the raw content of a payment statement export. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["ExportStatementPaymentContentListing"][];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Create a credential of a user for server authentication, or delete the credential of a user for server authentication. */
  READ_CredentialPasswordIp_for_User: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        itemId: number;
      };
    };
    responses: {
      /** @description Create a credential of a user for server authentication, or delete the credential of a user for server authentication. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["UserCredentialPasswordIpRead"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Create a credential of a user for server authentication, or delete the credential of a user for server authentication. */
  List_all_CredentialPasswordIp_for_User: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
      };
    };
    responses: {
      /** @description Create a credential of a user for server authentication, or delete the credential of a user for server authentication. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["UserCredentialPasswordIpListing"][];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Endpoint to manage CurrencyCloud beneficiaries. */
  List_all_CurrencyCloudBeneficiary_for_User: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
      };
    };
    responses: {
      /** @description Endpoint to manage CurrencyCloud beneficiaries. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["CurrencyCloudBeneficiaryListing"][];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Endpoint to manage CurrencyCloud beneficiaries. */
  CREATE_CurrencyCloudBeneficiary_for_User: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CurrencyCloudBeneficiary"];
      };
    };
    responses: {
      /** @description Endpoint to manage CurrencyCloud beneficiaries. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["CurrencyCloudBeneficiaryCreate"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Endpoint to manage CurrencyCloud beneficiaries. */
  READ_CurrencyCloudBeneficiary_for_User: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        itemId: number;
      };
    };
    responses: {
      /** @description Endpoint to manage CurrencyCloud beneficiaries. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["CurrencyCloudBeneficiaryRead"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Endpoint to list requirements for CurrencyCloud beneficiaries. */
  List_all_CurrencyCloudBeneficiaryRequirement_for_User: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
      };
    };
    responses: {
      /** @description Endpoint to list requirements for CurrencyCloud beneficiaries. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["CurrencyCloudBeneficiaryRequirementListing"][];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Endpoint for managing currency conversions. */
  CREATE_CurrencyCloudPaymentQuote_for_User_MonetaryAccount: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CurrencyCloudPaymentQuote"];
      };
    };
    responses: {
      /** @description Endpoint for managing currency conversions. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["CurrencyCloudPaymentQuoteCreate"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Endpoint for managing currency conversions. */
  List_all_CurrencyConversion_for_User_MonetaryAccount: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
      };
    };
    responses: {
      /** @description Endpoint for managing currency conversions. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["CurrencyConversionListing"][];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Endpoint for managing currency conversions. */
  READ_CurrencyConversion_for_User_MonetaryAccount: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
        itemId: number;
      };
    };
    responses: {
      /** @description Endpoint for managing currency conversions. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["CurrencyConversionRead"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Endpoint to create a quote for currency conversions. */
  CREATE_CurrencyConversionQuote_for_User_MonetaryAccount: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CurrencyConversionQuote"];
      };
    };
    responses: {
      /** @description Endpoint to create a quote for currency conversions. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["CurrencyConversionQuoteCreate"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Endpoint to create a quote for currency conversions. */
  READ_CurrencyConversionQuote_for_User_MonetaryAccount: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
        itemId: number;
      };
    };
    responses: {
      /** @description Endpoint to create a quote for currency conversions. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["CurrencyConversionQuoteRead"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Endpoint to create a quote for currency conversions. */
  UPDATE_CurrencyConversionQuote_for_User_MonetaryAccount: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
        itemId: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CurrencyConversionQuote"];
      };
    };
    responses: {
      /** @description Endpoint to create a quote for currency conversions. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["CurrencyConversionQuoteUpdate"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Used to create new and read existing statement exports. Statement exports can be created in either CSV, MT940 or PDF file format. */
  List_all_CustomerStatement_for_User_MonetaryAccount: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
      };
    };
    responses: {
      /** @description Used to create new and read existing statement exports. Statement exports can be created in either CSV, MT940 or PDF file format. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["ExportStatementListing"][];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Used to create new and read existing statement exports. Statement exports can be created in either CSV, MT940 or PDF file format. */
  CREATE_CustomerStatement_for_User_MonetaryAccount: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ExportStatement"];
      };
    };
    responses: {
      /** @description Used to create new and read existing statement exports. Statement exports can be created in either CSV, MT940 or PDF file format. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["ExportStatementCreate"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Used to create new and read existing statement exports. Statement exports can be created in either CSV, MT940 or PDF file format. */
  READ_CustomerStatement_for_User_MonetaryAccount: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
        itemId: number;
      };
    };
    responses: {
      /** @description Used to create new and read existing statement exports. Statement exports can be created in either CSV, MT940 or PDF file format. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["ExportStatementRead"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Used to create new and read existing statement exports. Statement exports can be created in either CSV, MT940 or PDF file format. */
  DELETE_CustomerStatement_for_User_MonetaryAccount: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
        itemId: number;
      };
    };
    responses: {
      /** @description Used to create new and read existing statement exports. Statement exports can be created in either CSV, MT940 or PDF file format. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["ExportStatementDelete"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description List all the definitions in a payment auto allocate. */
  List_all_Definition_for_User_MonetaryAccount_PaymentAutoAllocate: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
        "payment-auto-allocateID": number;
      };
    };
    responses: {
      /** @description List all the definitions in a payment auto allocate. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["PaymentAutoAllocateDefinitionListing"][];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Get a single Device. A Device is either a DevicePhone or a DeviceServer. */
  READ_Device: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        itemId: number;
      };
    };
    responses: {
      /** @description Used to get a Device or a listing of Devices. Creating a DeviceServer should happen via /device-server */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["DeviceRead"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Get a collection of Devices. A Device is either a DevicePhone or a DeviceServer. */
  List_all_Device: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
    };
    responses: {
      /** @description Used to get a Device or a listing of Devices. Creating a DeviceServer should happen via /device-server */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["DeviceListing"][];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Get a collection of all the DeviceServers you have created. */
  List_all_DeviceServer: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
    };
    responses: {
      /** @description After having created an Installation you can now create a DeviceServer. A DeviceServer is needed to do a login call with session-server. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["DeviceServerListing"][];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Create a new DeviceServer providing the installation token in the header and signing the request with the private part of the key you used to create the installation. The API Key that you are using will be bound to the IP address of the DeviceServer which you have created.<br/><br/>Using a Wildcard API Key gives you the freedom to make API calls even if the IP address has changed after the POST device-server.<br/><br/>Find out more at this link <a href="https:/bunq.com/en/apikey-dynamic-ip" target="_blank">https:/bunq.com/en/apikey-dynamic-ip</a>. */
  CREATE_DeviceServer: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["DeviceServer"];
      };
    };
    responses: {
      /** @description After having created an Installation you can now create a DeviceServer. A DeviceServer is needed to do a login call with session-server. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["DeviceServerCreate"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Get one of your DeviceServers. */
  READ_DeviceServer: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        itemId: number;
      };
    };
    responses: {
      /** @description After having created an Installation you can now create a DeviceServer. A DeviceServer is needed to do a login call with session-server. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["DeviceServerRead"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Get a listing of all DraftPayments from a given MonetaryAccount. */
  List_all_DraftPayment_for_User_MonetaryAccount: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
      };
    };
    responses: {
      /** @description A DraftPayment is like a regular Payment, but it needs to be accepted by the sending party before the actual Payment is done. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["DraftPaymentListing"][];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Create a new DraftPayment. */
  CREATE_DraftPayment_for_User_MonetaryAccount: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["DraftPayment"];
      };
    };
    responses: {
      /** @description A DraftPayment is like a regular Payment, but it needs to be accepted by the sending party before the actual Payment is done. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["DraftPaymentCreate"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Get a specific DraftPayment. */
  READ_DraftPayment_for_User_MonetaryAccount: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
        itemId: number;
      };
    };
    responses: {
      /** @description A DraftPayment is like a regular Payment, but it needs to be accepted by the sending party before the actual Payment is done. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["DraftPaymentRead"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Update a DraftPayment. */
  UPDATE_DraftPayment_for_User_MonetaryAccount: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
        itemId: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["DraftPayment"];
      };
    };
    responses: {
      /** @description A DraftPayment is like a regular Payment, but it needs to be accepted by the sending party before the actual Payment is done. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["DraftPaymentUpdate"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Get a specific event for a given user. */
  READ_Event_for_User: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        itemId: number;
      };
    };
    responses: {
      /** @description Used to view events. Events are automatically created and contain information about everything that happens to your bunq account. In the bunq app events are shown in your 'overview'. Examples of when events are created or modified: payment sent, payment received, request for payment received or connect invite received. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["EventRead"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Get a collection of events for a given user. You can add query the parameters monetary_account_id, status and/or display_user_event to filter the response. When monetary_account_id={id,id} is provided only events that relate to these monetary account ids are returned. When status={AWAITING_REPLY/FINALIZED} is provided the response only contains events with the status AWAITING_REPLY or FINALIZED. When display_user_event={true/false} is set to false user events are excluded from the response, when not provided user events are displayed. User events are events that are not related to a monetary account (for example: connect invites). */
  List_all_Event_for_User: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
      };
    };
    responses: {
      /** @description Used to view events. Events are automatically created and contain information about everything that happens to your bunq account. In the bunq app events are shown in your 'overview'. Examples of when events are created or modified: payment sent, payment received, request for payment received or connect invite received. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["EventListing"][];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description List all the annual overviews for a user. */
  List_all_ExportAnnualOverview_for_User: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
      };
    };
    responses: {
      /** @description Used to create new and read existing annual overviews of all the user's monetary accounts. Once created, annual overviews can be downloaded in PDF format via the 'export-annual-overview/{id}/content' endpoint. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["ExportAnnualOverviewListing"][];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Create a new annual overview for a specific year. An overview can be generated only for a past year. */
  CREATE_ExportAnnualOverview_for_User: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ExportAnnualOverview"];
      };
    };
    responses: {
      /** @description Used to create new and read existing annual overviews of all the user's monetary accounts. Once created, annual overviews can be downloaded in PDF format via the 'export-annual-overview/{id}/content' endpoint. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["ExportAnnualOverviewCreate"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Get an annual overview for a user by its id. */
  READ_ExportAnnualOverview_for_User: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        itemId: number;
      };
    };
    responses: {
      /** @description Used to create new and read existing annual overviews of all the user's monetary accounts. Once created, annual overviews can be downloaded in PDF format via the 'export-annual-overview/{id}/content' endpoint. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["ExportAnnualOverviewRead"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Used to create new and read existing annual overviews of all the user's monetary accounts. Once created, annual overviews can be downloaded in PDF format via the 'export-annual-overview/{id}/content' endpoint. */
  DELETE_ExportAnnualOverview_for_User: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        itemId: number;
      };
    };
    responses: {
      /** @description Used to create new and read existing annual overviews of all the user's monetary accounts. Once created, annual overviews can be downloaded in PDF format via the 'export-annual-overview/{id}/content' endpoint. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["ExportAnnualOverviewDelete"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description List all the RIBs for a monetary account. */
  List_all_ExportRib_for_User_MonetaryAccount: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
      };
    };
    responses: {
      /** @description Used to create new and read existing RIBs of a monetary account */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["ExportRibListing"][];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Create a new RIB. */
  CREATE_ExportRib_for_User_MonetaryAccount: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ExportRib"];
      };
    };
    responses: {
      /** @description Used to create new and read existing RIBs of a monetary account */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["ExportRibCreate"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Get a RIB for a monetary account by its id. */
  READ_ExportRib_for_User_MonetaryAccount: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
        itemId: number;
      };
    };
    responses: {
      /** @description Used to create new and read existing RIBs of a monetary account */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["ExportRibRead"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Used to create new and read existing RIBs of a monetary account */
  DELETE_ExportRib_for_User_MonetaryAccount: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
        itemId: number;
      };
    };
    responses: {
      /** @description Used to create new and read existing RIBs of a monetary account */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["ExportRibDelete"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Used to create new and read existing card statement exports. Statement exports can be created in either CSV or PDF file format. */
  READ_ExportStatementCard_for_User_Card: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        cardID: number;
        itemId: number;
      };
    };
    responses: {
      /** @description Used to create new and read existing card statement exports. Statement exports can be created in either CSV or PDF file format. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["ExportStatementCardRead"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Used to create new and read existing card statement exports. Statement exports can be created in either CSV or PDF file format. */
  List_all_ExportStatementCard_for_User_Card: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        cardID: number;
      };
    };
    responses: {
      /** @description Used to create new and read existing card statement exports. Statement exports can be created in either CSV or PDF file format. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["ExportStatementCardListing"][];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Used to serialize ExportStatementCardCsv */
  List_all_ExportStatementCardCsv_for_User_Card: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        cardID: number;
      };
    };
    responses: {
      /** @description Used to serialize ExportStatementCardCsv */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["ExportStatementCardCsvListing"][];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Used to serialize ExportStatementCardCsv */
  CREATE_ExportStatementCardCsv_for_User_Card: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        cardID: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ExportStatementCardCsv"];
      };
    };
    responses: {
      /** @description Used to serialize ExportStatementCardCsv */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["ExportStatementCardCsvCreate"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Used to serialize ExportStatementCardCsv */
  READ_ExportStatementCardCsv_for_User_Card: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        cardID: number;
        itemId: number;
      };
    };
    responses: {
      /** @description Used to serialize ExportStatementCardCsv */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["ExportStatementCardCsvRead"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Used to serialize ExportStatementCardCsv */
  DELETE_ExportStatementCardCsv_for_User_Card: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        cardID: number;
        itemId: number;
      };
    };
    responses: {
      /** @description Used to serialize ExportStatementCardCsv */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["ExportStatementCardCsvDelete"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Used to serialize ExportStatementCardPdf */
  List_all_ExportStatementCardPdf_for_User_Card: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        cardID: number;
      };
    };
    responses: {
      /** @description Used to serialize ExportStatementCardPdf */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["ExportStatementCardPdfListing"][];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Used to serialize ExportStatementCardPdf */
  CREATE_ExportStatementCardPdf_for_User_Card: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        cardID: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ExportStatementCardPdf"];
      };
    };
    responses: {
      /** @description Used to serialize ExportStatementCardPdf */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["ExportStatementCardPdfCreate"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Used to serialize ExportStatementCardPdf */
  READ_ExportStatementCardPdf_for_User_Card: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        cardID: number;
        itemId: number;
      };
    };
    responses: {
      /** @description Used to serialize ExportStatementCardPdf */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["ExportStatementCardPdfRead"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Used to serialize ExportStatementCardPdf */
  DELETE_ExportStatementCardPdf_for_User_Card: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        cardID: number;
        itemId: number;
      };
    };
    responses: {
      /** @description Used to serialize ExportStatementCardPdf */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["ExportStatementCardPdfDelete"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description view for updating the feature display. */
  READ_FeatureAnnouncement_for_User: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        itemId: number;
      };
    };
    responses: {
      /** @description view for updating the feature display. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["FeatureAnnouncementRead"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Get all generated CVC2 codes for a card. */
  List_all_GeneratedCvc2_for_User_Card: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        cardID: number;
      };
    };
    responses: {
      /** @description Endpoint for generating and retrieving a new CVC2 code. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["CardGeneratedCvc2Listing"][];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Generate a new CVC2 code for a card. */
  CREATE_GeneratedCvc2_for_User_Card: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        cardID: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CardGeneratedCvc2"];
      };
    };
    responses: {
      /** @description Endpoint for generating and retrieving a new CVC2 code. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["CardGeneratedCvc2Create"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Get the details for a specific generated CVC2 code. */
  READ_GeneratedCvc2_for_User_Card: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        cardID: number;
        itemId: number;
      };
    };
    responses: {
      /** @description Endpoint for generating and retrieving a new CVC2 code. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["CardGeneratedCvc2Read"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Endpoint for generating and retrieving a new CVC2 code. */
  UPDATE_GeneratedCvc2_for_User_Card: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        cardID: number;
        itemId: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CardGeneratedCvc2"];
      };
    };
    responses: {
      /** @description Endpoint for generating and retrieving a new CVC2 code. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["CardGeneratedCvc2Update"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description View for requesting iDEAL transactions and polling their status. */
  List_all_IdealMerchantTransaction_for_User_MonetaryAccount: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
      };
    };
    responses: {
      /** @description View for requesting iDEAL transactions and polling their status. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["IdealMerchantTransactionListing"][];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description View for requesting iDEAL transactions and polling their status. */
  CREATE_IdealMerchantTransaction_for_User_MonetaryAccount: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["IdealMerchantTransaction"];
      };
    };
    responses: {
      /** @description View for requesting iDEAL transactions and polling their status. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["IdealMerchantTransactionCreate"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description View for requesting iDEAL transactions and polling their status. */
  READ_IdealMerchantTransaction_for_User_MonetaryAccount: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
        itemId: number;
      };
    };
    responses: {
      /** @description View for requesting iDEAL transactions and polling their status. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["IdealMerchantTransactionRead"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Used to allow users to set insight/budget preferences. */
  List_all_InsightPreferenceDate_for_User: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
      };
    };
    responses: {
      /** @description Used to allow users to set insight/budget preferences. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["InsightPreferenceDateListing"][];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Used to get insights about transactions between given time range. */
  List_all_Insights_for_User: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
      };
    };
    responses: {
      /** @description Used to get insights about transactions between given time range. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["InsightListing"][];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Used to get events based on time and insight category. */
  List_all_InsightsSearch_for_User: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
      };
    };
    responses: {
      /** @description Used to get events based on time and insight category. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["InsightEventListing"][];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description You must have an active session to make this call. This call returns the Id of the the Installation you are using in your session. */
  List_all_Installation: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
    };
    responses: {
      /** @description Installation is used to tell the server about the public key of your key pair. The server uses this key to verify your subsequent calls, which need to be signed with your own private key. Additionally, you can use the token you get from an Installation to authenticate the registration of a new device. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["InstallationListing"][];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /**
   * @description This is the only API call that does not require you to use the "X-Bunq-Client-Authentication" and "X-Bunq-Client-Signature" headers.
   *  You provide the server with the public part of the key pair that you are going to use to create the value of the signature header for all future API calls. The server creates an installation for you. Store the Installation Token and ServerPublicKey from the response. This token is used in the "X-Bunq-Client-Authentication" header for the creation of a DeviceServer and SessionServer.
   */
  CREATE_Installation: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Installation"];
      };
    };
    responses: {
      /** @description Installation is used to tell the server about the public key of your key pair. The server uses this key to verify your subsequent calls, which need to be signed with your own private key. Additionally, you can use the token you get from an Installation to authenticate the registration of a new device. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["InstallationCreate"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description You must have an active session to make this call. This call is used to check whether the Id you provide is the Id of your current installation or not. */
  READ_Installation: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        itemId: number;
      };
    };
    responses: {
      /** @description Installation is used to tell the server about the public key of your key pair. The server uses this key to verify your subsequent calls, which need to be signed with your own private key. Additionally, you can use the token you get from an Installation to authenticate the registration of a new device. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["InstallationRead"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description List all the times a users payment was automatically allocated. */
  List_all_Instance_for_User_MonetaryAccount_PaymentAutoAllocate: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
        "payment-auto-allocateID": number;
      };
    };
    responses: {
      /** @description List all the times a users payment was automatically allocated. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["PaymentAutoAllocateInstanceListing"][];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description List all the times a users payment was automatically allocated. */
  READ_Instance_for_User_MonetaryAccount_PaymentAutoAllocate: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
        "payment-auto-allocateID": number;
        itemId: number;
      };
    };
    responses: {
      /** @description List all the times a users payment was automatically allocated. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["PaymentAutoAllocateInstanceRead"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Used to view a bunq invoice. */
  List_all_Invoice_for_User_MonetaryAccount: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
      };
    };
    responses: {
      /** @description Used to view a bunq invoice. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["InvoiceListing"][];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Used to view a bunq invoice. */
  READ_Invoice_for_User_MonetaryAccount: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
        itemId: number;
      };
    };
    responses: {
      /** @description Used to view a bunq invoice. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["InvoiceRead"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Used to list bunq invoices by user. */
  List_all_Invoice_for_User: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
      };
    };
    responses: {
      /** @description Used to list bunq invoices by user. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["InvoiceByUserListing"][];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Used to list bunq invoices by user. */
  READ_Invoice_for_User: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        itemId: number;
      };
    };
    responses: {
      /** @description Used to list bunq invoices by user. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["InvoiceByUserRead"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Manage the IPs which may be used for a credential of a user for server authentication. */
  READ_Ip_for_User_CredentialPasswordIp: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "credential-password-ipID": number;
        itemId: number;
      };
    };
    responses: {
      /** @description Manage the IPs which may be used for a credential of a user for server authentication. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["PermittedIpRead"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Manage the IPs which may be used for a credential of a user for server authentication. */
  UPDATE_Ip_for_User_CredentialPasswordIp: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "credential-password-ipID": number;
        itemId: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PermittedIp"];
      };
    };
    responses: {
      /** @description Manage the IPs which may be used for a credential of a user for server authentication. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["PermittedIpUpdate"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Manage the IPs which may be used for a credential of a user for server authentication. */
  List_all_Ip_for_User_CredentialPasswordIp: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "credential-password-ipID": number;
      };
    };
    responses: {
      /** @description Manage the IPs which may be used for a credential of a user for server authentication. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["PermittedIpListing"][];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Manage the IPs which may be used for a credential of a user for server authentication. */
  CREATE_Ip_for_User_CredentialPasswordIp: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "credential-password-ipID": number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PermittedIp"];
      };
    };
    responses: {
      /** @description Manage the IPs which may be used for a credential of a user for server authentication. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["PermittedIpCreate"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Endpoint for getting available legal names that can be used by the user. */
  List_all_LegalName_for_User: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
      };
    };
    responses: {
      /** @description Endpoint for getting available legal names that can be used by the user. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["UserLegalNameListing"][];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Get all limits for the authenticated user. */
  List_all_Limit_for_User: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
      };
    };
    responses: {
      /** @description Show the limits for the authenticated user. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["CustomerLimitListing"][];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description MasterCard transaction view. */
  READ_MastercardAction_for_User_MonetaryAccount: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
        itemId: number;
      };
    };
    responses: {
      /** @description MasterCard transaction view. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["MasterCardActionRead"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description MasterCard transaction view. */
  List_all_MastercardAction_for_User_MonetaryAccount: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
      };
    };
    responses: {
      /** @description MasterCard transaction view. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["MasterCardActionListing"][];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Get a specific MonetaryAccount. */
  READ_MonetaryAccount_for_User: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        itemId: number;
      };
    };
    responses: {
      /** @description Used to show the MonetaryAccounts that you can access. Currently the only MonetaryAccount type is MonetaryAccountBank. See also: monetary-account-bank.<br/><br/>Notification filters can be set on a monetary account level to receive callbacks. For more information check the <a href="/api/2/page/callbacks">dedicated callbacks page</a>. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["MonetaryAccountRead"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Get a collection of all your MonetaryAccounts. */
  List_all_MonetaryAccount_for_User: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
      };
    };
    responses: {
      /** @description Used to show the MonetaryAccounts that you can access. Currently the only MonetaryAccount type is MonetaryAccountBank. See also: monetary-account-bank.<br/><br/>Notification filters can be set on a monetary account level to receive callbacks. For more information check the <a href="/api/2/page/callbacks">dedicated callbacks page</a>. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["MonetaryAccountListing"][];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Gets a listing of all MonetaryAccountBanks of a given user. */
  List_all_MonetaryAccountBank_for_User: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
      };
    };
    responses: {
      /** @description With MonetaryAccountBank you can create a new bank account, retrieve information regarding your existing MonetaryAccountBanks and update specific fields of an existing MonetaryAccountBank. Examples of fields that can be updated are the description, the daily limit and the avatar of the account.<br/><br/>Notification filters can be set on a monetary account level to receive callbacks. For more information check the <a href="/api/1/page/callbacks">dedicated callbacks page</a>. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["MonetaryAccountBankListing"][];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Create new MonetaryAccountBank. */
  CREATE_MonetaryAccountBank_for_User: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["MonetaryAccountBank"];
      };
    };
    responses: {
      /** @description With MonetaryAccountBank you can create a new bank account, retrieve information regarding your existing MonetaryAccountBanks and update specific fields of an existing MonetaryAccountBank. Examples of fields that can be updated are the description, the daily limit and the avatar of the account.<br/><br/>Notification filters can be set on a monetary account level to receive callbacks. For more information check the <a href="/api/1/page/callbacks">dedicated callbacks page</a>. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["MonetaryAccountBankCreate"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Get a specific MonetaryAccountBank. */
  READ_MonetaryAccountBank_for_User: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        itemId: number;
      };
    };
    responses: {
      /** @description With MonetaryAccountBank you can create a new bank account, retrieve information regarding your existing MonetaryAccountBanks and update specific fields of an existing MonetaryAccountBank. Examples of fields that can be updated are the description, the daily limit and the avatar of the account.<br/><br/>Notification filters can be set on a monetary account level to receive callbacks. For more information check the <a href="/api/1/page/callbacks">dedicated callbacks page</a>. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["MonetaryAccountBankRead"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Update a specific existing MonetaryAccountBank. */
  UPDATE_MonetaryAccountBank_for_User: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        itemId: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["MonetaryAccountBank"];
      };
    };
    responses: {
      /** @description With MonetaryAccountBank you can create a new bank account, retrieve information regarding your existing MonetaryAccountBanks and update specific fields of an existing MonetaryAccountBank. Examples of fields that can be updated are the description, the daily limit and the avatar of the account.<br/><br/>Notification filters can be set on a monetary account level to receive callbacks. For more information check the <a href="/api/1/page/callbacks">dedicated callbacks page</a>. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["MonetaryAccountBankUpdate"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Get a specific MonetaryAccountCard. */
  READ_MonetaryAccountCard_for_User: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        itemId: number;
      };
    };
    responses: {
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["MonetaryAccountCardRead"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Update a specific existing MonetaryAccountCard. */
  UPDATE_MonetaryAccountCard_for_User: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        itemId: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["MonetaryAccountCard"];
      };
    };
    responses: {
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["MonetaryAccountCardUpdate"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Gets a listing of all MonetaryAccountCard of a given user. */
  List_all_MonetaryAccountCard_for_User: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
      };
    };
    responses: {
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["MonetaryAccountCardListing"][];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Endpoint for managing monetary accounts which are connected to external services. */
  List_all_MonetaryAccountExternal_for_User: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
      };
    };
    responses: {
      /** @description Endpoint for managing monetary accounts which are connected to external services. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["MonetaryAccountExternalListing"][];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Endpoint for managing monetary accounts which are connected to external services. */
  CREATE_MonetaryAccountExternal_for_User: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["MonetaryAccountExternal"];
      };
    };
    responses: {
      /** @description Endpoint for managing monetary accounts which are connected to external services. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["MonetaryAccountExternalCreate"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Endpoint for managing monetary accounts which are connected to external services. */
  READ_MonetaryAccountExternal_for_User: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        itemId: number;
      };
    };
    responses: {
      /** @description Endpoint for managing monetary accounts which are connected to external services. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["MonetaryAccountExternalRead"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Endpoint for managing monetary accounts which are connected to external services. */
  UPDATE_MonetaryAccountExternal_for_User: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        itemId: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["MonetaryAccountExternal"];
      };
    };
    responses: {
      /** @description Endpoint for managing monetary accounts which are connected to external services. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["MonetaryAccountExternalUpdate"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Endpoint for managing monetary account savings which are connected to external services. */
  List_all_MonetaryAccountExternalSavings_for_User: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
      };
    };
    responses: {
      /** @description Endpoint for managing monetary account savings which are connected to external services. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["MonetaryAccountExternalSavingsListing"][];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Endpoint for managing monetary account savings which are connected to external services. */
  CREATE_MonetaryAccountExternalSavings_for_User: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["MonetaryAccountExternalSavings"];
      };
    };
    responses: {
      /** @description Endpoint for managing monetary account savings which are connected to external services. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["MonetaryAccountExternalSavingsCreate"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Endpoint for managing monetary account savings which are connected to external services. */
  READ_MonetaryAccountExternalSavings_for_User: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        itemId: number;
      };
    };
    responses: {
      /** @description Endpoint for managing monetary account savings which are connected to external services. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["MonetaryAccountExternalSavingsRead"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Endpoint for managing monetary account savings which are connected to external services. */
  UPDATE_MonetaryAccountExternalSavings_for_User: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        itemId: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["MonetaryAccountExternalSavings"];
      };
    };
    responses: {
      /** @description Endpoint for managing monetary account savings which are connected to external services. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["MonetaryAccountExternalSavingsUpdate"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description The endpoint for joint monetary accounts. */
  List_all_MonetaryAccountJoint_for_User: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
      };
    };
    responses: {
      /** @description The endpoint for joint monetary accounts. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["MonetaryAccountJointListing"][];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description The endpoint for joint monetary accounts. */
  CREATE_MonetaryAccountJoint_for_User: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["MonetaryAccountJoint"];
      };
    };
    responses: {
      /** @description The endpoint for joint monetary accounts. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["MonetaryAccountJointCreate"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description The endpoint for joint monetary accounts. */
  READ_MonetaryAccountJoint_for_User: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        itemId: number;
      };
    };
    responses: {
      /** @description The endpoint for joint monetary accounts. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["MonetaryAccountJointRead"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description The endpoint for joint monetary accounts. */
  UPDATE_MonetaryAccountJoint_for_User: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        itemId: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["MonetaryAccountJoint"];
      };
    };
    responses: {
      /** @description The endpoint for joint monetary accounts. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["MonetaryAccountJointUpdate"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Gets a listing of all MonetaryAccountSavingss of a given user. */
  List_all_MonetaryAccountSavings_for_User: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
      };
    };
    responses: {
      /** @description With MonetaryAccountSavings you can create a new savings account. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["MonetaryAccountSavingsListing"][];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Create new MonetaryAccountSavings. */
  CREATE_MonetaryAccountSavings_for_User: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["MonetaryAccountSavings"];
      };
    };
    responses: {
      /** @description With MonetaryAccountSavings you can create a new savings account. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["MonetaryAccountSavingsCreate"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Get a specific MonetaryAccountSavings. */
  READ_MonetaryAccountSavings_for_User: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        itemId: number;
      };
    };
    responses: {
      /** @description With MonetaryAccountSavings you can create a new savings account. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["MonetaryAccountSavingsRead"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Update a specific existing MonetaryAccountSavings. */
  UPDATE_MonetaryAccountSavings_for_User: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        itemId: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["MonetaryAccountSavings"];
      };
    };
    responses: {
      /** @description With MonetaryAccountSavings you can create a new savings account. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["MonetaryAccountSavingsUpdate"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Return all the known (trade) names for a specific user company. */
  List_all_Name_for_UserCompany: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        "user-companyID": number;
      };
    };
    responses: {
      /** @description Endpoint for getting all the known (trade) names for a user company. This is needed for updating the user name, as we only accept legal or trade names. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["UserCompanyNameListing"][];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Used to manage attachment notes. */
  List_all_NoteAttachment_for_User_MonetaryAccount_AdyenCardTransaction: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
        "adyen-card-transactionID": number;
      };
    };
    responses: {
      /** @description Used to manage attachment notes. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["NoteAttachmentAdyenCardTransactionListing"][];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Used to manage attachment notes. */
  CREATE_NoteAttachment_for_User_MonetaryAccount_AdyenCardTransaction: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
        "adyen-card-transactionID": number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["NoteAttachmentAdyenCardTransaction"];
      };
    };
    responses: {
      /** @description Used to manage attachment notes. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["NoteAttachmentAdyenCardTransactionCreate"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Used to manage attachment notes. */
  READ_NoteAttachment_for_User_MonetaryAccount_AdyenCardTransaction: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
        "adyen-card-transactionID": number;
        itemId: number;
      };
    };
    responses: {
      /** @description Used to manage attachment notes. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["NoteAttachmentAdyenCardTransactionRead"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Used to manage attachment notes. */
  UPDATE_NoteAttachment_for_User_MonetaryAccount_AdyenCardTransaction: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
        "adyen-card-transactionID": number;
        itemId: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["NoteAttachmentAdyenCardTransaction"];
      };
    };
    responses: {
      /** @description Used to manage attachment notes. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["NoteAttachmentAdyenCardTransactionUpdate"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Used to manage attachment notes. */
  DELETE_NoteAttachment_for_User_MonetaryAccount_AdyenCardTransaction: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
        "adyen-card-transactionID": number;
        itemId: number;
      };
    };
    responses: {
      /** @description Used to manage attachment notes. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["NoteAttachmentAdyenCardTransactionDelete"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Manage the notes for a given user. */
  List_all_NoteAttachment_for_User_MonetaryAccount_SwitchServicePayment: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
        "switch-service-paymentID": number;
      };
    };
    responses: {
      /** @description Used to manage attachment notes. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["NoteAttachmentBankSwitchServiceNetherlandsIncomingPaymentListing"][];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Used to manage attachment notes. */
  CREATE_NoteAttachment_for_User_MonetaryAccount_SwitchServicePayment: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
        "switch-service-paymentID": number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["NoteAttachmentBankSwitchServiceNetherlandsIncomingPayment"];
      };
    };
    responses: {
      /** @description Used to manage attachment notes. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["NoteAttachmentBankSwitchServiceNetherlandsIncomingPaymentCreate"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Used to manage attachment notes. */
  READ_NoteAttachment_for_User_MonetaryAccount_SwitchServicePayment: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
        "switch-service-paymentID": number;
        itemId: number;
      };
    };
    responses: {
      /** @description Used to manage attachment notes. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["NoteAttachmentBankSwitchServiceNetherlandsIncomingPaymentRead"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Used to manage attachment notes. */
  UPDATE_NoteAttachment_for_User_MonetaryAccount_SwitchServicePayment: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
        "switch-service-paymentID": number;
        itemId: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["NoteAttachmentBankSwitchServiceNetherlandsIncomingPayment"];
      };
    };
    responses: {
      /** @description Used to manage attachment notes. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["NoteAttachmentBankSwitchServiceNetherlandsIncomingPaymentUpdate"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Used to manage attachment notes. */
  DELETE_NoteAttachment_for_User_MonetaryAccount_SwitchServicePayment: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
        "switch-service-paymentID": number;
        itemId: number;
      };
    };
    responses: {
      /** @description Used to manage attachment notes. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["NoteAttachmentBankSwitchServiceNetherlandsIncomingPaymentDelete"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Manage the notes for a given user. */
  List_all_NoteAttachment_for_User_MonetaryAccount_BunqmeFundraiserResult: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
        "bunqme-fundraiser-resultID": number;
      };
    };
    responses: {
      /** @description Used to manage attachment notes. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["NoteAttachmentBunqMeFundraiserResultListing"][];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Used to manage attachment notes. */
  CREATE_NoteAttachment_for_User_MonetaryAccount_BunqmeFundraiserResult: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
        "bunqme-fundraiser-resultID": number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["NoteAttachmentBunqMeFundraiserResult"];
      };
    };
    responses: {
      /** @description Used to manage attachment notes. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["NoteAttachmentBunqMeFundraiserResultCreate"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Used to manage attachment notes. */
  READ_NoteAttachment_for_User_MonetaryAccount_BunqmeFundraiserResult: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
        "bunqme-fundraiser-resultID": number;
        itemId: number;
      };
    };
    responses: {
      /** @description Used to manage attachment notes. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["NoteAttachmentBunqMeFundraiserResultRead"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Used to manage attachment notes. */
  UPDATE_NoteAttachment_for_User_MonetaryAccount_BunqmeFundraiserResult: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
        "bunqme-fundraiser-resultID": number;
        itemId: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["NoteAttachmentBunqMeFundraiserResult"];
      };
    };
    responses: {
      /** @description Used to manage attachment notes. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["NoteAttachmentBunqMeFundraiserResultUpdate"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Used to manage attachment notes. */
  DELETE_NoteAttachment_for_User_MonetaryAccount_BunqmeFundraiserResult: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
        "bunqme-fundraiser-resultID": number;
        itemId: number;
      };
    };
    responses: {
      /** @description Used to manage attachment notes. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["NoteAttachmentBunqMeFundraiserResultDelete"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Manage the notes for a given user. */
  List_all_NoteAttachment_for_User_MonetaryAccount_DraftPayment: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
        "draft-paymentID": number;
      };
    };
    responses: {
      /** @description Used to manage attachment notes. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["NoteAttachmentDraftPaymentListing"][];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Used to manage attachment notes. */
  CREATE_NoteAttachment_for_User_MonetaryAccount_DraftPayment: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
        "draft-paymentID": number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["NoteAttachmentDraftPayment"];
      };
    };
    responses: {
      /** @description Used to manage attachment notes. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["NoteAttachmentDraftPaymentCreate"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Used to manage attachment notes. */
  READ_NoteAttachment_for_User_MonetaryAccount_DraftPayment: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
        "draft-paymentID": number;
        itemId: number;
      };
    };
    responses: {
      /** @description Used to manage attachment notes. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["NoteAttachmentDraftPaymentRead"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Used to manage attachment notes. */
  UPDATE_NoteAttachment_for_User_MonetaryAccount_DraftPayment: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
        "draft-paymentID": number;
        itemId: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["NoteAttachmentDraftPayment"];
      };
    };
    responses: {
      /** @description Used to manage attachment notes. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["NoteAttachmentDraftPaymentUpdate"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Used to manage attachment notes. */
  DELETE_NoteAttachment_for_User_MonetaryAccount_DraftPayment: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
        "draft-paymentID": number;
        itemId: number;
      };
    };
    responses: {
      /** @description Used to manage attachment notes. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["NoteAttachmentDraftPaymentDelete"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Manage the notes for a given user. */
  List_all_NoteAttachment_for_User_MonetaryAccount_IdealMerchantTransaction: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
        "ideal-merchant-transactionID": number;
      };
    };
    responses: {
      /** @description Used to manage attachment notes. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["NoteAttachmentIdealMerchantTransactionListing"][];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Used to manage attachment notes. */
  CREATE_NoteAttachment_for_User_MonetaryAccount_IdealMerchantTransaction: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
        "ideal-merchant-transactionID": number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["NoteAttachmentIdealMerchantTransaction"];
      };
    };
    responses: {
      /** @description Used to manage attachment notes. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["NoteAttachmentIdealMerchantTransactionCreate"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Used to manage attachment notes. */
  READ_NoteAttachment_for_User_MonetaryAccount_IdealMerchantTransaction: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
        "ideal-merchant-transactionID": number;
        itemId: number;
      };
    };
    responses: {
      /** @description Used to manage attachment notes. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["NoteAttachmentIdealMerchantTransactionRead"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Used to manage attachment notes. */
  UPDATE_NoteAttachment_for_User_MonetaryAccount_IdealMerchantTransaction: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
        "ideal-merchant-transactionID": number;
        itemId: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["NoteAttachmentIdealMerchantTransaction"];
      };
    };
    responses: {
      /** @description Used to manage attachment notes. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["NoteAttachmentIdealMerchantTransactionUpdate"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Used to manage attachment notes. */
  DELETE_NoteAttachment_for_User_MonetaryAccount_IdealMerchantTransaction: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
        "ideal-merchant-transactionID": number;
        itemId: number;
      };
    };
    responses: {
      /** @description Used to manage attachment notes. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["NoteAttachmentIdealMerchantTransactionDelete"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Manage the notes for a given user. */
  List_all_NoteAttachment_for_User_MonetaryAccount_MastercardAction: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
        "mastercard-actionID": number;
      };
    };
    responses: {
      /** @description Used to manage attachment notes. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["NoteAttachmentMasterCardActionListing"][];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Used to manage attachment notes. */
  CREATE_NoteAttachment_for_User_MonetaryAccount_MastercardAction: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
        "mastercard-actionID": number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["NoteAttachmentMasterCardAction"];
      };
    };
    responses: {
      /** @description Used to manage attachment notes. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["NoteAttachmentMasterCardActionCreate"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Used to manage attachment notes. */
  READ_NoteAttachment_for_User_MonetaryAccount_MastercardAction: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
        "mastercard-actionID": number;
        itemId: number;
      };
    };
    responses: {
      /** @description Used to manage attachment notes. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["NoteAttachmentMasterCardActionRead"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Used to manage attachment notes. */
  UPDATE_NoteAttachment_for_User_MonetaryAccount_MastercardAction: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
        "mastercard-actionID": number;
        itemId: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["NoteAttachmentMasterCardAction"];
      };
    };
    responses: {
      /** @description Used to manage attachment notes. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["NoteAttachmentMasterCardActionUpdate"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Used to manage attachment notes. */
  DELETE_NoteAttachment_for_User_MonetaryAccount_MastercardAction: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
        "mastercard-actionID": number;
        itemId: number;
      };
    };
    responses: {
      /** @description Used to manage attachment notes. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["NoteAttachmentMasterCardActionDelete"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Manage the notes for a given user. */
  List_all_NoteAttachment_for_User_MonetaryAccount_PaymentBatch: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
        "payment-batchID": number;
      };
    };
    responses: {
      /** @description Used to manage attachment notes. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["NoteAttachmentPaymentBatchListing"][];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Used to manage attachment notes. */
  CREATE_NoteAttachment_for_User_MonetaryAccount_PaymentBatch: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
        "payment-batchID": number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["NoteAttachmentPaymentBatch"];
      };
    };
    responses: {
      /** @description Used to manage attachment notes. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["NoteAttachmentPaymentBatchCreate"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Used to manage attachment notes. */
  READ_NoteAttachment_for_User_MonetaryAccount_PaymentBatch: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
        "payment-batchID": number;
        itemId: number;
      };
    };
    responses: {
      /** @description Used to manage attachment notes. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["NoteAttachmentPaymentBatchRead"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Used to manage attachment notes. */
  UPDATE_NoteAttachment_for_User_MonetaryAccount_PaymentBatch: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
        "payment-batchID": number;
        itemId: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["NoteAttachmentPaymentBatch"];
      };
    };
    responses: {
      /** @description Used to manage attachment notes. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["NoteAttachmentPaymentBatchUpdate"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Used to manage attachment notes. */
  DELETE_NoteAttachment_for_User_MonetaryAccount_PaymentBatch: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
        "payment-batchID": number;
        itemId: number;
      };
    };
    responses: {
      /** @description Used to manage attachment notes. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["NoteAttachmentPaymentBatchDelete"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Manage the notes for a given user. */
  List_all_NoteAttachment_for_User_MonetaryAccount_Payment: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
        paymentID: number;
      };
    };
    responses: {
      /** @description Used to manage attachment notes. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["NoteAttachmentPaymentListing"][];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Used to manage attachment notes. */
  CREATE_NoteAttachment_for_User_MonetaryAccount_Payment: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
        paymentID: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["NoteAttachmentPayment"];
      };
    };
    responses: {
      /** @description Used to manage attachment notes. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["NoteAttachmentPaymentCreate"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Used to manage attachment notes. */
  READ_NoteAttachment_for_User_MonetaryAccount_Payment: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
        paymentID: number;
        itemId: number;
      };
    };
    responses: {
      /** @description Used to manage attachment notes. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["NoteAttachmentPaymentRead"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Used to manage attachment notes. */
  UPDATE_NoteAttachment_for_User_MonetaryAccount_Payment: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
        paymentID: number;
        itemId: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["NoteAttachmentPayment"];
      };
    };
    responses: {
      /** @description Used to manage attachment notes. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["NoteAttachmentPaymentUpdate"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Used to manage attachment notes. */
  DELETE_NoteAttachment_for_User_MonetaryAccount_Payment: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
        paymentID: number;
        itemId: number;
      };
    };
    responses: {
      /** @description Used to manage attachment notes. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["NoteAttachmentPaymentDelete"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Manage the notes for a given user. */
  List_all_NoteAttachment_for_User_MonetaryAccount_RequestInquiryBatch: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
        "request-inquiry-batchID": number;
      };
    };
    responses: {
      /** @description Used to manage attachment notes. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["NoteAttachmentRequestInquiryBatchListing"][];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Used to manage attachment notes. */
  CREATE_NoteAttachment_for_User_MonetaryAccount_RequestInquiryBatch: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
        "request-inquiry-batchID": number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["NoteAttachmentRequestInquiryBatch"];
      };
    };
    responses: {
      /** @description Used to manage attachment notes. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["NoteAttachmentRequestInquiryBatchCreate"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Used to manage attachment notes. */
  READ_NoteAttachment_for_User_MonetaryAccount_RequestInquiryBatch: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
        "request-inquiry-batchID": number;
        itemId: number;
      };
    };
    responses: {
      /** @description Used to manage attachment notes. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["NoteAttachmentRequestInquiryBatchRead"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Used to manage attachment notes. */
  UPDATE_NoteAttachment_for_User_MonetaryAccount_RequestInquiryBatch: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
        "request-inquiry-batchID": number;
        itemId: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["NoteAttachmentRequestInquiryBatch"];
      };
    };
    responses: {
      /** @description Used to manage attachment notes. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["NoteAttachmentRequestInquiryBatchUpdate"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Used to manage attachment notes. */
  DELETE_NoteAttachment_for_User_MonetaryAccount_RequestInquiryBatch: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
        "request-inquiry-batchID": number;
        itemId: number;
      };
    };
    responses: {
      /** @description Used to manage attachment notes. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["NoteAttachmentRequestInquiryBatchDelete"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Manage the notes for a given user. */
  List_all_NoteAttachment_for_User_MonetaryAccount_RequestInquiry: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
        "request-inquiryID": number;
      };
    };
    responses: {
      /** @description Used to manage attachment notes. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["NoteAttachmentRequestInquiryListing"][];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Used to manage attachment notes. */
  CREATE_NoteAttachment_for_User_MonetaryAccount_RequestInquiry: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
        "request-inquiryID": number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["NoteAttachmentRequestInquiry"];
      };
    };
    responses: {
      /** @description Used to manage attachment notes. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["NoteAttachmentRequestInquiryCreate"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Used to manage attachment notes. */
  READ_NoteAttachment_for_User_MonetaryAccount_RequestInquiry: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
        "request-inquiryID": number;
        itemId: number;
      };
    };
    responses: {
      /** @description Used to manage attachment notes. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["NoteAttachmentRequestInquiryRead"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Used to manage attachment notes. */
  UPDATE_NoteAttachment_for_User_MonetaryAccount_RequestInquiry: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
        "request-inquiryID": number;
        itemId: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["NoteAttachmentRequestInquiry"];
      };
    };
    responses: {
      /** @description Used to manage attachment notes. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["NoteAttachmentRequestInquiryUpdate"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Used to manage attachment notes. */
  DELETE_NoteAttachment_for_User_MonetaryAccount_RequestInquiry: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
        "request-inquiryID": number;
        itemId: number;
      };
    };
    responses: {
      /** @description Used to manage attachment notes. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["NoteAttachmentRequestInquiryDelete"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Manage the notes for a given user. */
  List_all_NoteAttachment_for_User_MonetaryAccount_RequestResponse: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
        "request-responseID": number;
      };
    };
    responses: {
      /** @description Used to manage attachment notes. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["NoteAttachmentRequestResponseListing"][];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Used to manage attachment notes. */
  CREATE_NoteAttachment_for_User_MonetaryAccount_RequestResponse: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
        "request-responseID": number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["NoteAttachmentRequestResponse"];
      };
    };
    responses: {
      /** @description Used to manage attachment notes. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["NoteAttachmentRequestResponseCreate"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Used to manage attachment notes. */
  READ_NoteAttachment_for_User_MonetaryAccount_RequestResponse: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
        "request-responseID": number;
        itemId: number;
      };
    };
    responses: {
      /** @description Used to manage attachment notes. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["NoteAttachmentRequestResponseRead"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Used to manage attachment notes. */
  UPDATE_NoteAttachment_for_User_MonetaryAccount_RequestResponse: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
        "request-responseID": number;
        itemId: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["NoteAttachmentRequestResponse"];
      };
    };
    responses: {
      /** @description Used to manage attachment notes. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["NoteAttachmentRequestResponseUpdate"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Used to manage attachment notes. */
  DELETE_NoteAttachment_for_User_MonetaryAccount_RequestResponse: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
        "request-responseID": number;
        itemId: number;
      };
    };
    responses: {
      /** @description Used to manage attachment notes. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["NoteAttachmentRequestResponseDelete"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Manage the notes for a given user. */
  List_all_NoteAttachment_for_User_MonetaryAccount_Schedule_ScheduleInstance: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
        scheduleID: number;
        "schedule-instanceID": number;
      };
    };
    responses: {
      /** @description Used to manage attachment notes. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["NoteAttachmentScheduleInstanceListing"][];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Used to manage attachment notes. */
  CREATE_NoteAttachment_for_User_MonetaryAccount_Schedule_ScheduleInstance: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
        scheduleID: number;
        "schedule-instanceID": number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["NoteAttachmentScheduleInstance"];
      };
    };
    responses: {
      /** @description Used to manage attachment notes. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["NoteAttachmentScheduleInstanceCreate"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Used to manage attachment notes. */
  READ_NoteAttachment_for_User_MonetaryAccount_Schedule_ScheduleInstance: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
        scheduleID: number;
        "schedule-instanceID": number;
        itemId: number;
      };
    };
    responses: {
      /** @description Used to manage attachment notes. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["NoteAttachmentScheduleInstanceRead"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Used to manage attachment notes. */
  UPDATE_NoteAttachment_for_User_MonetaryAccount_Schedule_ScheduleInstance: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
        scheduleID: number;
        "schedule-instanceID": number;
        itemId: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["NoteAttachmentScheduleInstance"];
      };
    };
    responses: {
      /** @description Used to manage attachment notes. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["NoteAttachmentScheduleInstanceUpdate"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Used to manage attachment notes. */
  DELETE_NoteAttachment_for_User_MonetaryAccount_Schedule_ScheduleInstance: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
        scheduleID: number;
        "schedule-instanceID": number;
        itemId: number;
      };
    };
    responses: {
      /** @description Used to manage attachment notes. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["NoteAttachmentScheduleInstanceDelete"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Manage the notes for a given user. */
  List_all_NoteAttachment_for_User_MonetaryAccount_SchedulePaymentBatch: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
        "schedule-payment-batchID": number;
      };
    };
    responses: {
      /** @description Used to manage attachment notes. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["NoteAttachmentSchedulePaymentBatchListing"][];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Used to manage attachment notes. */
  CREATE_NoteAttachment_for_User_MonetaryAccount_SchedulePaymentBatch: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
        "schedule-payment-batchID": number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["NoteAttachmentSchedulePaymentBatch"];
      };
    };
    responses: {
      /** @description Used to manage attachment notes. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["NoteAttachmentSchedulePaymentBatchCreate"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Used to manage attachment notes. */
  READ_NoteAttachment_for_User_MonetaryAccount_SchedulePaymentBatch: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
        "schedule-payment-batchID": number;
        itemId: number;
      };
    };
    responses: {
      /** @description Used to manage attachment notes. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["NoteAttachmentSchedulePaymentBatchRead"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Used to manage attachment notes. */
  UPDATE_NoteAttachment_for_User_MonetaryAccount_SchedulePaymentBatch: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
        "schedule-payment-batchID": number;
        itemId: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["NoteAttachmentSchedulePaymentBatch"];
      };
    };
    responses: {
      /** @description Used to manage attachment notes. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["NoteAttachmentSchedulePaymentBatchUpdate"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Used to manage attachment notes. */
  DELETE_NoteAttachment_for_User_MonetaryAccount_SchedulePaymentBatch: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
        "schedule-payment-batchID": number;
        itemId: number;
      };
    };
    responses: {
      /** @description Used to manage attachment notes. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["NoteAttachmentSchedulePaymentBatchDelete"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Manage the notes for a given user. */
  List_all_NoteAttachment_for_User_MonetaryAccount_SchedulePayment: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
        "schedule-paymentID": number;
      };
    };
    responses: {
      /** @description Used to manage attachment notes. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["NoteAttachmentSchedulePaymentListing"][];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Used to manage attachment notes. */
  CREATE_NoteAttachment_for_User_MonetaryAccount_SchedulePayment: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
        "schedule-paymentID": number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["NoteAttachmentSchedulePayment"];
      };
    };
    responses: {
      /** @description Used to manage attachment notes. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["NoteAttachmentSchedulePaymentCreate"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Used to manage attachment notes. */
  READ_NoteAttachment_for_User_MonetaryAccount_SchedulePayment: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
        "schedule-paymentID": number;
        itemId: number;
      };
    };
    responses: {
      /** @description Used to manage attachment notes. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["NoteAttachmentSchedulePaymentRead"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Used to manage attachment notes. */
  UPDATE_NoteAttachment_for_User_MonetaryAccount_SchedulePayment: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
        "schedule-paymentID": number;
        itemId: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["NoteAttachmentSchedulePayment"];
      };
    };
    responses: {
      /** @description Used to manage attachment notes. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["NoteAttachmentSchedulePaymentUpdate"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Used to manage attachment notes. */
  DELETE_NoteAttachment_for_User_MonetaryAccount_SchedulePayment: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
        "schedule-paymentID": number;
        itemId: number;
      };
    };
    responses: {
      /** @description Used to manage attachment notes. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["NoteAttachmentSchedulePaymentDelete"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Manage the notes for a given user. */
  List_all_NoteAttachment_for_User_MonetaryAccount_SofortMerchantTransaction: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
        "sofort-merchant-transactionID": number;
      };
    };
    responses: {
      /** @description Used to manage attachment notes. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["NoteAttachmentSofortMerchantTransactionListing"][];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Used to manage attachment notes. */
  CREATE_NoteAttachment_for_User_MonetaryAccount_SofortMerchantTransaction: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
        "sofort-merchant-transactionID": number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["NoteAttachmentSofortMerchantTransaction"];
      };
    };
    responses: {
      /** @description Used to manage attachment notes. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["NoteAttachmentSofortMerchantTransactionCreate"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Used to manage attachment notes. */
  READ_NoteAttachment_for_User_MonetaryAccount_SofortMerchantTransaction: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
        "sofort-merchant-transactionID": number;
        itemId: number;
      };
    };
    responses: {
      /** @description Used to manage attachment notes. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["NoteAttachmentSofortMerchantTransactionRead"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Used to manage attachment notes. */
  UPDATE_NoteAttachment_for_User_MonetaryAccount_SofortMerchantTransaction: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
        "sofort-merchant-transactionID": number;
        itemId: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["NoteAttachmentSofortMerchantTransaction"];
      };
    };
    responses: {
      /** @description Used to manage attachment notes. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["NoteAttachmentSofortMerchantTransactionUpdate"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Used to manage attachment notes. */
  DELETE_NoteAttachment_for_User_MonetaryAccount_SofortMerchantTransaction: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
        "sofort-merchant-transactionID": number;
        itemId: number;
      };
    };
    responses: {
      /** @description Used to manage attachment notes. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["NoteAttachmentSofortMerchantTransactionDelete"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Manage the notes for a given user. */
  List_all_NoteAttachment_for_User_MonetaryAccount_Whitelist_WhitelistResult: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
        whitelistID: number;
        "whitelist-resultID": number;
      };
    };
    responses: {
      /** @description Used to manage attachment notes. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["NoteAttachmentWhitelistResultListing"][];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Used to manage attachment notes. */
  CREATE_NoteAttachment_for_User_MonetaryAccount_Whitelist_WhitelistResult: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
        whitelistID: number;
        "whitelist-resultID": number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["NoteAttachmentWhitelistResult"];
      };
    };
    responses: {
      /** @description Used to manage attachment notes. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["NoteAttachmentWhitelistResultCreate"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Used to manage attachment notes. */
  READ_NoteAttachment_for_User_MonetaryAccount_Whitelist_WhitelistResult: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
        whitelistID: number;
        "whitelist-resultID": number;
        itemId: number;
      };
    };
    responses: {
      /** @description Used to manage attachment notes. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["NoteAttachmentWhitelistResultRead"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Used to manage attachment notes. */
  UPDATE_NoteAttachment_for_User_MonetaryAccount_Whitelist_WhitelistResult: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
        whitelistID: number;
        "whitelist-resultID": number;
        itemId: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["NoteAttachmentWhitelistResult"];
      };
    };
    responses: {
      /** @description Used to manage attachment notes. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["NoteAttachmentWhitelistResultUpdate"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Used to manage attachment notes. */
  DELETE_NoteAttachment_for_User_MonetaryAccount_Whitelist_WhitelistResult: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
        whitelistID: number;
        "whitelist-resultID": number;
        itemId: number;
      };
    };
    responses: {
      /** @description Used to manage attachment notes. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["NoteAttachmentWhitelistResultDelete"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Used to manage text notes. */
  List_all_NoteText_for_User_MonetaryAccount_AdyenCardTransaction: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
        "adyen-card-transactionID": number;
      };
    };
    responses: {
      /** @description Used to manage text notes. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["NoteTextAdyenCardTransactionListing"][];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Used to manage text notes. */
  CREATE_NoteText_for_User_MonetaryAccount_AdyenCardTransaction: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
        "adyen-card-transactionID": number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["NoteTextAdyenCardTransaction"];
      };
    };
    responses: {
      /** @description Used to manage text notes. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["NoteTextAdyenCardTransactionCreate"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Used to manage text notes. */
  READ_NoteText_for_User_MonetaryAccount_AdyenCardTransaction: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
        "adyen-card-transactionID": number;
        itemId: number;
      };
    };
    responses: {
      /** @description Used to manage text notes. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["NoteTextAdyenCardTransactionRead"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Used to manage text notes. */
  UPDATE_NoteText_for_User_MonetaryAccount_AdyenCardTransaction: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
        "adyen-card-transactionID": number;
        itemId: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["NoteTextAdyenCardTransaction"];
      };
    };
    responses: {
      /** @description Used to manage text notes. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["NoteTextAdyenCardTransactionUpdate"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Used to manage text notes. */
  DELETE_NoteText_for_User_MonetaryAccount_AdyenCardTransaction: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
        "adyen-card-transactionID": number;
        itemId: number;
      };
    };
    responses: {
      /** @description Used to manage text notes. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["NoteTextAdyenCardTransactionDelete"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Manage the notes for a given user. */
  List_all_NoteText_for_User_MonetaryAccount_SwitchServicePayment: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
        "switch-service-paymentID": number;
      };
    };
    responses: {
      /** @description Used to manage text notes. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["NoteTextBankSwitchServiceNetherlandsIncomingPaymentListing"][];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Used to manage text notes. */
  CREATE_NoteText_for_User_MonetaryAccount_SwitchServicePayment: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
        "switch-service-paymentID": number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["NoteTextBankSwitchServiceNetherlandsIncomingPayment"];
      };
    };
    responses: {
      /** @description Used to manage text notes. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["NoteTextBankSwitchServiceNetherlandsIncomingPaymentCreate"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Used to manage text notes. */
  READ_NoteText_for_User_MonetaryAccount_SwitchServicePayment: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
        "switch-service-paymentID": number;
        itemId: number;
      };
    };
    responses: {
      /** @description Used to manage text notes. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["NoteTextBankSwitchServiceNetherlandsIncomingPaymentRead"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Used to manage text notes. */
  UPDATE_NoteText_for_User_MonetaryAccount_SwitchServicePayment: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
        "switch-service-paymentID": number;
        itemId: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["NoteTextBankSwitchServiceNetherlandsIncomingPayment"];
      };
    };
    responses: {
      /** @description Used to manage text notes. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["NoteTextBankSwitchServiceNetherlandsIncomingPaymentUpdate"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Used to manage text notes. */
  DELETE_NoteText_for_User_MonetaryAccount_SwitchServicePayment: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
        "switch-service-paymentID": number;
        itemId: number;
      };
    };
    responses: {
      /** @description Used to manage text notes. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["NoteTextBankSwitchServiceNetherlandsIncomingPaymentDelete"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Manage the notes for a given user. */
  List_all_NoteText_for_User_MonetaryAccount_BunqmeFundraiserResult: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
        "bunqme-fundraiser-resultID": number;
      };
    };
    responses: {
      /** @description Used to manage text notes. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["NoteTextBunqMeFundraiserResultListing"][];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Used to manage text notes. */
  CREATE_NoteText_for_User_MonetaryAccount_BunqmeFundraiserResult: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
        "bunqme-fundraiser-resultID": number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["NoteTextBunqMeFundraiserResult"];
      };
    };
    responses: {
      /** @description Used to manage text notes. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["NoteTextBunqMeFundraiserResultCreate"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Used to manage text notes. */
  READ_NoteText_for_User_MonetaryAccount_BunqmeFundraiserResult: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
        "bunqme-fundraiser-resultID": number;
        itemId: number;
      };
    };
    responses: {
      /** @description Used to manage text notes. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["NoteTextBunqMeFundraiserResultRead"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Used to manage text notes. */
  UPDATE_NoteText_for_User_MonetaryAccount_BunqmeFundraiserResult: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
        "bunqme-fundraiser-resultID": number;
        itemId: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["NoteTextBunqMeFundraiserResult"];
      };
    };
    responses: {
      /** @description Used to manage text notes. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["NoteTextBunqMeFundraiserResultUpdate"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Used to manage text notes. */
  DELETE_NoteText_for_User_MonetaryAccount_BunqmeFundraiserResult: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
        "bunqme-fundraiser-resultID": number;
        itemId: number;
      };
    };
    responses: {
      /** @description Used to manage text notes. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["NoteTextBunqMeFundraiserResultDelete"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Manage the notes for a given user. */
  List_all_NoteText_for_User_MonetaryAccount_DraftPayment: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
        "draft-paymentID": number;
      };
    };
    responses: {
      /** @description Used to manage text notes. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["NoteTextDraftPaymentListing"][];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Used to manage text notes. */
  CREATE_NoteText_for_User_MonetaryAccount_DraftPayment: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
        "draft-paymentID": number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["NoteTextDraftPayment"];
      };
    };
    responses: {
      /** @description Used to manage text notes. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["NoteTextDraftPaymentCreate"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Used to manage text notes. */
  READ_NoteText_for_User_MonetaryAccount_DraftPayment: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
        "draft-paymentID": number;
        itemId: number;
      };
    };
    responses: {
      /** @description Used to manage text notes. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["NoteTextDraftPaymentRead"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Used to manage text notes. */
  UPDATE_NoteText_for_User_MonetaryAccount_DraftPayment: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
        "draft-paymentID": number;
        itemId: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["NoteTextDraftPayment"];
      };
    };
    responses: {
      /** @description Used to manage text notes. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["NoteTextDraftPaymentUpdate"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Used to manage text notes. */
  DELETE_NoteText_for_User_MonetaryAccount_DraftPayment: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
        "draft-paymentID": number;
        itemId: number;
      };
    };
    responses: {
      /** @description Used to manage text notes. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["NoteTextDraftPaymentDelete"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Manage the notes for a given user. */
  List_all_NoteText_for_User_MonetaryAccount_IdealMerchantTransaction: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
        "ideal-merchant-transactionID": number;
      };
    };
    responses: {
      /** @description Used to manage text notes. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["NoteTextIdealMerchantTransactionListing"][];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Used to manage text notes. */
  CREATE_NoteText_for_User_MonetaryAccount_IdealMerchantTransaction: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
        "ideal-merchant-transactionID": number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["NoteTextIdealMerchantTransaction"];
      };
    };
    responses: {
      /** @description Used to manage text notes. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["NoteTextIdealMerchantTransactionCreate"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Used to manage text notes. */
  READ_NoteText_for_User_MonetaryAccount_IdealMerchantTransaction: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
        "ideal-merchant-transactionID": number;
        itemId: number;
      };
    };
    responses: {
      /** @description Used to manage text notes. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["NoteTextIdealMerchantTransactionRead"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Used to manage text notes. */
  UPDATE_NoteText_for_User_MonetaryAccount_IdealMerchantTransaction: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
        "ideal-merchant-transactionID": number;
        itemId: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["NoteTextIdealMerchantTransaction"];
      };
    };
    responses: {
      /** @description Used to manage text notes. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["NoteTextIdealMerchantTransactionUpdate"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Used to manage text notes. */
  DELETE_NoteText_for_User_MonetaryAccount_IdealMerchantTransaction: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
        "ideal-merchant-transactionID": number;
        itemId: number;
      };
    };
    responses: {
      /** @description Used to manage text notes. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["NoteTextIdealMerchantTransactionDelete"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Manage the notes for a given user. */
  List_all_NoteText_for_User_MonetaryAccount_MastercardAction: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
        "mastercard-actionID": number;
      };
    };
    responses: {
      /** @description Used to manage text notes. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["NoteTextMasterCardActionListing"][];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Used to manage text notes. */
  CREATE_NoteText_for_User_MonetaryAccount_MastercardAction: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
        "mastercard-actionID": number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["NoteTextMasterCardAction"];
      };
    };
    responses: {
      /** @description Used to manage text notes. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["NoteTextMasterCardActionCreate"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Used to manage text notes. */
  READ_NoteText_for_User_MonetaryAccount_MastercardAction: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
        "mastercard-actionID": number;
        itemId: number;
      };
    };
    responses: {
      /** @description Used to manage text notes. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["NoteTextMasterCardActionRead"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Used to manage text notes. */
  UPDATE_NoteText_for_User_MonetaryAccount_MastercardAction: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
        "mastercard-actionID": number;
        itemId: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["NoteTextMasterCardAction"];
      };
    };
    responses: {
      /** @description Used to manage text notes. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["NoteTextMasterCardActionUpdate"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Used to manage text notes. */
  DELETE_NoteText_for_User_MonetaryAccount_MastercardAction: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
        "mastercard-actionID": number;
        itemId: number;
      };
    };
    responses: {
      /** @description Used to manage text notes. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["NoteTextMasterCardActionDelete"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Manage the notes for a given user. */
  List_all_NoteText_for_User_MonetaryAccount_PaymentBatch: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
        "payment-batchID": number;
      };
    };
    responses: {
      /** @description Used to manage text notes. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["NoteTextPaymentBatchListing"][];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Used to manage text notes. */
  CREATE_NoteText_for_User_MonetaryAccount_PaymentBatch: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
        "payment-batchID": number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["NoteTextPaymentBatch"];
      };
    };
    responses: {
      /** @description Used to manage text notes. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["NoteTextPaymentBatchCreate"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Used to manage text notes. */
  READ_NoteText_for_User_MonetaryAccount_PaymentBatch: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
        "payment-batchID": number;
        itemId: number;
      };
    };
    responses: {
      /** @description Used to manage text notes. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["NoteTextPaymentBatchRead"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Used to manage text notes. */
  UPDATE_NoteText_for_User_MonetaryAccount_PaymentBatch: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
        "payment-batchID": number;
        itemId: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["NoteTextPaymentBatch"];
      };
    };
    responses: {
      /** @description Used to manage text notes. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["NoteTextPaymentBatchUpdate"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Used to manage text notes. */
  DELETE_NoteText_for_User_MonetaryAccount_PaymentBatch: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
        "payment-batchID": number;
        itemId: number;
      };
    };
    responses: {
      /** @description Used to manage text notes. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["NoteTextPaymentBatchDelete"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Manage the notes for a given user. */
  List_all_NoteText_for_User_MonetaryAccount_Payment: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
        paymentID: number;
      };
    };
    responses: {
      /** @description Used to manage text notes. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["NoteTextPaymentListing"][];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Used to manage text notes. */
  CREATE_NoteText_for_User_MonetaryAccount_Payment: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
        paymentID: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["NoteTextPayment"];
      };
    };
    responses: {
      /** @description Used to manage text notes. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["NoteTextPaymentCreate"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Used to manage text notes. */
  READ_NoteText_for_User_MonetaryAccount_Payment: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
        paymentID: number;
        itemId: number;
      };
    };
    responses: {
      /** @description Used to manage text notes. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["NoteTextPaymentRead"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Used to manage text notes. */
  UPDATE_NoteText_for_User_MonetaryAccount_Payment: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
        paymentID: number;
        itemId: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["NoteTextPayment"];
      };
    };
    responses: {
      /** @description Used to manage text notes. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["NoteTextPaymentUpdate"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Used to manage text notes. */
  DELETE_NoteText_for_User_MonetaryAccount_Payment: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
        paymentID: number;
        itemId: number;
      };
    };
    responses: {
      /** @description Used to manage text notes. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["NoteTextPaymentDelete"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Manage the notes for a given user. */
  List_all_NoteText_for_User_MonetaryAccount_RequestInquiryBatch: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
        "request-inquiry-batchID": number;
      };
    };
    responses: {
      /** @description Used to manage text notes. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["NoteTextRequestInquiryBatchListing"][];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Used to manage text notes. */
  CREATE_NoteText_for_User_MonetaryAccount_RequestInquiryBatch: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
        "request-inquiry-batchID": number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["NoteTextRequestInquiryBatch"];
      };
    };
    responses: {
      /** @description Used to manage text notes. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["NoteTextRequestInquiryBatchCreate"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Used to manage text notes. */
  READ_NoteText_for_User_MonetaryAccount_RequestInquiryBatch: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
        "request-inquiry-batchID": number;
        itemId: number;
      };
    };
    responses: {
      /** @description Used to manage text notes. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["NoteTextRequestInquiryBatchRead"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Used to manage text notes. */
  UPDATE_NoteText_for_User_MonetaryAccount_RequestInquiryBatch: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
        "request-inquiry-batchID": number;
        itemId: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["NoteTextRequestInquiryBatch"];
      };
    };
    responses: {
      /** @description Used to manage text notes. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["NoteTextRequestInquiryBatchUpdate"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Used to manage text notes. */
  DELETE_NoteText_for_User_MonetaryAccount_RequestInquiryBatch: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
        "request-inquiry-batchID": number;
        itemId: number;
      };
    };
    responses: {
      /** @description Used to manage text notes. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["NoteTextRequestInquiryBatchDelete"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Manage the notes for a given user. */
  List_all_NoteText_for_User_MonetaryAccount_RequestInquiry: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
        "request-inquiryID": number;
      };
    };
    responses: {
      /** @description Used to manage text notes. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["NoteTextRequestInquiryListing"][];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Used to manage text notes. */
  CREATE_NoteText_for_User_MonetaryAccount_RequestInquiry: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
        "request-inquiryID": number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["NoteTextRequestInquiry"];
      };
    };
    responses: {
      /** @description Used to manage text notes. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["NoteTextRequestInquiryCreate"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Used to manage text notes. */
  READ_NoteText_for_User_MonetaryAccount_RequestInquiry: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
        "request-inquiryID": number;
        itemId: number;
      };
    };
    responses: {
      /** @description Used to manage text notes. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["NoteTextRequestInquiryRead"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Used to manage text notes. */
  UPDATE_NoteText_for_User_MonetaryAccount_RequestInquiry: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
        "request-inquiryID": number;
        itemId: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["NoteTextRequestInquiry"];
      };
    };
    responses: {
      /** @description Used to manage text notes. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["NoteTextRequestInquiryUpdate"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Used to manage text notes. */
  DELETE_NoteText_for_User_MonetaryAccount_RequestInquiry: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
        "request-inquiryID": number;
        itemId: number;
      };
    };
    responses: {
      /** @description Used to manage text notes. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["NoteTextRequestInquiryDelete"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Manage the notes for a given user. */
  List_all_NoteText_for_User_MonetaryAccount_RequestResponse: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
        "request-responseID": number;
      };
    };
    responses: {
      /** @description Used to manage text notes. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["NoteTextRequestResponseListing"][];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Used to manage text notes. */
  CREATE_NoteText_for_User_MonetaryAccount_RequestResponse: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
        "request-responseID": number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["NoteTextRequestResponse"];
      };
    };
    responses: {
      /** @description Used to manage text notes. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["NoteTextRequestResponseCreate"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Used to manage text notes. */
  READ_NoteText_for_User_MonetaryAccount_RequestResponse: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
        "request-responseID": number;
        itemId: number;
      };
    };
    responses: {
      /** @description Used to manage text notes. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["NoteTextRequestResponseRead"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Used to manage text notes. */
  UPDATE_NoteText_for_User_MonetaryAccount_RequestResponse: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
        "request-responseID": number;
        itemId: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["NoteTextRequestResponse"];
      };
    };
    responses: {
      /** @description Used to manage text notes. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["NoteTextRequestResponseUpdate"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Used to manage text notes. */
  DELETE_NoteText_for_User_MonetaryAccount_RequestResponse: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
        "request-responseID": number;
        itemId: number;
      };
    };
    responses: {
      /** @description Used to manage text notes. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["NoteTextRequestResponseDelete"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Manage the notes for a given user. */
  List_all_NoteText_for_User_MonetaryAccount_Schedule_ScheduleInstance: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
        scheduleID: number;
        "schedule-instanceID": number;
      };
    };
    responses: {
      /** @description Used to manage text notes. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["NoteTextScheduleInstanceListing"][];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Used to manage text notes. */
  CREATE_NoteText_for_User_MonetaryAccount_Schedule_ScheduleInstance: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
        scheduleID: number;
        "schedule-instanceID": number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["NoteTextScheduleInstance"];
      };
    };
    responses: {
      /** @description Used to manage text notes. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["NoteTextScheduleInstanceCreate"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Used to manage text notes. */
  READ_NoteText_for_User_MonetaryAccount_Schedule_ScheduleInstance: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
        scheduleID: number;
        "schedule-instanceID": number;
        itemId: number;
      };
    };
    responses: {
      /** @description Used to manage text notes. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["NoteTextScheduleInstanceRead"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Used to manage text notes. */
  UPDATE_NoteText_for_User_MonetaryAccount_Schedule_ScheduleInstance: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
        scheduleID: number;
        "schedule-instanceID": number;
        itemId: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["NoteTextScheduleInstance"];
      };
    };
    responses: {
      /** @description Used to manage text notes. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["NoteTextScheduleInstanceUpdate"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Used to manage text notes. */
  DELETE_NoteText_for_User_MonetaryAccount_Schedule_ScheduleInstance: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
        scheduleID: number;
        "schedule-instanceID": number;
        itemId: number;
      };
    };
    responses: {
      /** @description Used to manage text notes. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["NoteTextScheduleInstanceDelete"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Manage the notes for a given user. */
  List_all_NoteText_for_User_MonetaryAccount_SchedulePaymentBatch: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
        "schedule-payment-batchID": number;
      };
    };
    responses: {
      /** @description Used to manage text notes. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["NoteTextSchedulePaymentBatchListing"][];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Used to manage text notes. */
  CREATE_NoteText_for_User_MonetaryAccount_SchedulePaymentBatch: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
        "schedule-payment-batchID": number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["NoteTextSchedulePaymentBatch"];
      };
    };
    responses: {
      /** @description Used to manage text notes. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["NoteTextSchedulePaymentBatchCreate"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Used to manage text notes. */
  READ_NoteText_for_User_MonetaryAccount_SchedulePaymentBatch: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
        "schedule-payment-batchID": number;
        itemId: number;
      };
    };
    responses: {
      /** @description Used to manage text notes. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["NoteTextSchedulePaymentBatchRead"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Used to manage text notes. */
  UPDATE_NoteText_for_User_MonetaryAccount_SchedulePaymentBatch: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
        "schedule-payment-batchID": number;
        itemId: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["NoteTextSchedulePaymentBatch"];
      };
    };
    responses: {
      /** @description Used to manage text notes. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["NoteTextSchedulePaymentBatchUpdate"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Used to manage text notes. */
  DELETE_NoteText_for_User_MonetaryAccount_SchedulePaymentBatch: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
        "schedule-payment-batchID": number;
        itemId: number;
      };
    };
    responses: {
      /** @description Used to manage text notes. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["NoteTextSchedulePaymentBatchDelete"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Manage the notes for a given user. */
  List_all_NoteText_for_User_MonetaryAccount_SchedulePayment: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
        "schedule-paymentID": number;
      };
    };
    responses: {
      /** @description Used to manage text notes. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["NoteTextSchedulePaymentListing"][];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Used to manage text notes. */
  CREATE_NoteText_for_User_MonetaryAccount_SchedulePayment: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
        "schedule-paymentID": number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["NoteTextSchedulePayment"];
      };
    };
    responses: {
      /** @description Used to manage text notes. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["NoteTextSchedulePaymentCreate"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Used to manage text notes. */
  READ_NoteText_for_User_MonetaryAccount_SchedulePayment: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
        "schedule-paymentID": number;
        itemId: number;
      };
    };
    responses: {
      /** @description Used to manage text notes. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["NoteTextSchedulePaymentRead"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Used to manage text notes. */
  UPDATE_NoteText_for_User_MonetaryAccount_SchedulePayment: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
        "schedule-paymentID": number;
        itemId: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["NoteTextSchedulePayment"];
      };
    };
    responses: {
      /** @description Used to manage text notes. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["NoteTextSchedulePaymentUpdate"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Used to manage text notes. */
  DELETE_NoteText_for_User_MonetaryAccount_SchedulePayment: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
        "schedule-paymentID": number;
        itemId: number;
      };
    };
    responses: {
      /** @description Used to manage text notes. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["NoteTextSchedulePaymentDelete"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Manage the notes for a given user. */
  List_all_NoteText_for_User_MonetaryAccount_SofortMerchantTransaction: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
        "sofort-merchant-transactionID": number;
      };
    };
    responses: {
      /** @description Used to manage text notes. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["NoteTextSofortMerchantTransactionListing"][];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Used to manage text notes. */
  CREATE_NoteText_for_User_MonetaryAccount_SofortMerchantTransaction: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
        "sofort-merchant-transactionID": number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["NoteTextSofortMerchantTransaction"];
      };
    };
    responses: {
      /** @description Used to manage text notes. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["NoteTextSofortMerchantTransactionCreate"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Used to manage text notes. */
  READ_NoteText_for_User_MonetaryAccount_SofortMerchantTransaction: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
        "sofort-merchant-transactionID": number;
        itemId: number;
      };
    };
    responses: {
      /** @description Used to manage text notes. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["NoteTextSofortMerchantTransactionRead"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Used to manage text notes. */
  UPDATE_NoteText_for_User_MonetaryAccount_SofortMerchantTransaction: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
        "sofort-merchant-transactionID": number;
        itemId: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["NoteTextSofortMerchantTransaction"];
      };
    };
    responses: {
      /** @description Used to manage text notes. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["NoteTextSofortMerchantTransactionUpdate"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Used to manage text notes. */
  DELETE_NoteText_for_User_MonetaryAccount_SofortMerchantTransaction: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
        "sofort-merchant-transactionID": number;
        itemId: number;
      };
    };
    responses: {
      /** @description Used to manage text notes. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["NoteTextSofortMerchantTransactionDelete"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Manage the notes for a given user. */
  List_all_NoteText_for_User_MonetaryAccount_Whitelist_WhitelistResult: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
        whitelistID: number;
        "whitelist-resultID": number;
      };
    };
    responses: {
      /** @description Used to manage text notes. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["NoteTextWhitelistResultListing"][];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Used to manage text notes. */
  CREATE_NoteText_for_User_MonetaryAccount_Whitelist_WhitelistResult: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
        whitelistID: number;
        "whitelist-resultID": number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["NoteTextWhitelistResult"];
      };
    };
    responses: {
      /** @description Used to manage text notes. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["NoteTextWhitelistResultCreate"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Used to manage text notes. */
  READ_NoteText_for_User_MonetaryAccount_Whitelist_WhitelistResult: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
        whitelistID: number;
        "whitelist-resultID": number;
        itemId: number;
      };
    };
    responses: {
      /** @description Used to manage text notes. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["NoteTextWhitelistResultRead"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Used to manage text notes. */
  UPDATE_NoteText_for_User_MonetaryAccount_Whitelist_WhitelistResult: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
        whitelistID: number;
        "whitelist-resultID": number;
        itemId: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["NoteTextWhitelistResult"];
      };
    };
    responses: {
      /** @description Used to manage text notes. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["NoteTextWhitelistResultUpdate"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Used to manage text notes. */
  DELETE_NoteText_for_User_MonetaryAccount_Whitelist_WhitelistResult: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
        whitelistID: number;
        "whitelist-resultID": number;
        itemId: number;
      };
    };
    responses: {
      /** @description Used to manage text notes. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["NoteTextWhitelistResultDelete"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Manage the email notification filters for a user. */
  List_all_NotificationFilterEmail_for_User: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
      };
    };
    responses: {
      /** @description Manage the email notification filters for a user. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["NotificationFilterEmailListing"][];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Manage the email notification filters for a user. */
  CREATE_NotificationFilterEmail_for_User: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["NotificationFilterEmail"];
      };
    };
    responses: {
      /** @description Manage the email notification filters for a user. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["NotificationFilterEmailCreate"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Manage the url notification filters for a user. */
  List_all_NotificationFilterFailure_for_User: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
      };
    };
    responses: {
      /** @description Manage the url notification filters for a user. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["NotificationFilterFailureListing"][];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Manage the url notification filters for a user. */
  CREATE_NotificationFilterFailure_for_User: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["NotificationFilterFailure"];
      };
    };
    responses: {
      /** @description Manage the url notification filters for a user. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["NotificationFilterFailureCreate"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Manage the push notification filters for a user. */
  List_all_NotificationFilterPush_for_User: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
      };
    };
    responses: {
      /** @description Manage the push notification filters for a user. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["NotificationFilterPushListing"][];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Manage the push notification filters for a user. */
  CREATE_NotificationFilterPush_for_User: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["NotificationFilterPush"];
      };
    };
    responses: {
      /** @description Manage the push notification filters for a user. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["NotificationFilterPushCreate"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Manage the url notification filters for a user. */
  List_all_NotificationFilterUrl_for_User: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
      };
    };
    responses: {
      /** @description Manage the url notification filters for a user. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["NotificationFilterUrlListing"][];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Manage the url notification filters for a user. */
  CREATE_NotificationFilterUrl_for_User: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["NotificationFilterUrl"];
      };
    };
    responses: {
      /** @description Manage the url notification filters for a user. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["NotificationFilterUrlCreate"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Manage the url notification filters for a user. */
  List_all_NotificationFilterUrl_for_User_MonetaryAccount: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
      };
    };
    responses: {
      /** @description Manage the url notification filters for a user. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["NotificationFilterUrlMonetaryAccountListing"][];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Manage the url notification filters for a user. */
  CREATE_NotificationFilterUrl_for_User_MonetaryAccount: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["NotificationFilterUrlMonetaryAccount"];
      };
    };
    responses: {
      /** @description Manage the url notification filters for a user. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["NotificationFilterUrlMonetaryAccountCreate"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Used for managing OAuth Clients. */
  READ_OauthClient_for_User: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        itemId: number;
      };
    };
    responses: {
      /** @description Used for managing OAuth Clients. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["OauthClientRead"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Used for managing OAuth Clients. */
  UPDATE_OauthClient_for_User: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        itemId: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["OauthClient"];
      };
    };
    responses: {
      /** @description Used for managing OAuth Clients. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["OauthClientUpdate"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Used for managing OAuth Clients. */
  List_all_OauthClient_for_User: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
      };
    };
    responses: {
      /** @description Used for managing OAuth Clients. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["OauthClientListing"][];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Used for managing OAuth Clients. */
  CREATE_OauthClient_for_User: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["OauthClient"];
      };
    };
    responses: {
      /** @description Used for managing OAuth Clients. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["OauthClientCreate"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Get a listing of all Payments performed on a given MonetaryAccount (incoming and outgoing). */
  List_all_Payment_for_User_MonetaryAccount: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
      };
    };
    responses: {
      /** @description Using Payment, you can send payments to bunq and non-bunq users from your bunq MonetaryAccounts. This can be done using bunq Aliases or IBAN Aliases. When transferring money to other bunq MonetaryAccounts you can also refer to Attachments. These will be received by the counter-party as part of the Payment. You can also retrieve a single Payment or all executed Payments of a specific monetary account. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["PaymentListing"][];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Create a new Payment. */
  CREATE_Payment_for_User_MonetaryAccount: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Payment"];
      };
    };
    responses: {
      /** @description Using Payment, you can send payments to bunq and non-bunq users from your bunq MonetaryAccounts. This can be done using bunq Aliases or IBAN Aliases. When transferring money to other bunq MonetaryAccounts you can also refer to Attachments. These will be received by the counter-party as part of the Payment. You can also retrieve a single Payment or all executed Payments of a specific monetary account. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["PaymentCreate"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Get a specific previous Payment. */
  READ_Payment_for_User_MonetaryAccount: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
        itemId: number;
      };
    };
    responses: {
      /** @description Using Payment, you can send payments to bunq and non-bunq users from your bunq MonetaryAccounts. This can be done using bunq Aliases or IBAN Aliases. When transferring money to other bunq MonetaryAccounts you can also refer to Attachments. These will be received by the counter-party as part of the Payment. You can also retrieve a single Payment or all executed Payments of a specific monetary account. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["PaymentRead"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description MasterCard transaction view. */
  List_all_Payment_for_User_MonetaryAccount_MastercardAction: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
        "mastercard-actionID": number;
      };
    };
    responses: {
      /** @description MasterCard transaction view. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["MasterCardPaymentListing"][];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Manage a users automatic payment auto allocated settings. */
  List_all_PaymentAutoAllocate_for_User_MonetaryAccount: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
      };
    };
    responses: {
      /** @description Manage a users automatic payment auto allocated settings. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["PaymentAutoAllocateListing"][];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Manage a users automatic payment auto allocated settings. */
  CREATE_PaymentAutoAllocate_for_User_MonetaryAccount: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PaymentAutoAllocate"];
      };
    };
    responses: {
      /** @description Manage a users automatic payment auto allocated settings. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["PaymentAutoAllocateCreate"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Manage a users automatic payment auto allocated settings. */
  READ_PaymentAutoAllocate_for_User_MonetaryAccount: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
        itemId: number;
      };
    };
    responses: {
      /** @description Manage a users automatic payment auto allocated settings. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["PaymentAutoAllocateRead"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Manage a users automatic payment auto allocated settings. */
  UPDATE_PaymentAutoAllocate_for_User_MonetaryAccount: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
        itemId: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PaymentAutoAllocate"];
      };
    };
    responses: {
      /** @description Manage a users automatic payment auto allocated settings. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["PaymentAutoAllocateUpdate"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Manage a users automatic payment auto allocated settings. */
  DELETE_PaymentAutoAllocate_for_User_MonetaryAccount: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
        itemId: number;
      };
    };
    responses: {
      /** @description Manage a users automatic payment auto allocated settings. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["PaymentAutoAllocateDelete"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description List a users automatic payment auto allocated settings. */
  List_all_PaymentAutoAllocate_for_User: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
      };
    };
    responses: {
      /** @description List a users automatic payment auto allocated settings. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["PaymentAutoAllocateUserListing"][];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Return all the payment batches for a monetary account. */
  List_all_PaymentBatch_for_User_MonetaryAccount: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
      };
    };
    responses: {
      /** @description Create a payment batch, or show the payment batches of a monetary account. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["PaymentBatchListing"][];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Create a payment batch by sending an array of single payment objects, that will become part of the batch. */
  CREATE_PaymentBatch_for_User_MonetaryAccount: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PaymentBatch"];
      };
    };
    responses: {
      /** @description Create a payment batch, or show the payment batches of a monetary account. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["PaymentBatchCreate"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Return the details of a specific payment batch. */
  READ_PaymentBatch_for_User_MonetaryAccount: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
        itemId: number;
      };
    };
    responses: {
      /** @description Create a payment batch, or show the payment batches of a monetary account. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["PaymentBatchRead"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Revoke a bunq.to payment batch. The status of all the payments will be set to REVOKED. */
  UPDATE_PaymentBatch_for_User_MonetaryAccount: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
        itemId: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PaymentBatch"];
      };
    };
    responses: {
      /** @description Create a payment batch, or show the payment batches of a monetary account. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["PaymentBatchUpdate"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Register a Payment Service Provider and provide credentials */
  READ_PaymentServiceProviderCredential: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        itemId: number;
      };
    };
    responses: {
      /** @description Register a Payment Service Provider and provide credentials */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["PaymentServiceProviderCredentialRead"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Register a Payment Service Provider and provide credentials */
  CREATE_PaymentServiceProviderCredential: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PaymentServiceProviderCredential"];
      };
    };
    responses: {
      /** @description Register a Payment Service Provider and provide credentials */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["PaymentServiceProviderCredentialCreate"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Manage the PaymentServiceProviderDraftPayment's for a PISP. */
  List_all_PaymentServiceProviderDraftPayment_for_User: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
      };
    };
    responses: {
      /** @description Manage the PaymentServiceProviderDraftPayment's for a PISP. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["PaymentServiceProviderDraftPaymentListing"][];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Manage the PaymentServiceProviderDraftPayment's for a PISP. */
  CREATE_PaymentServiceProviderDraftPayment_for_User: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PaymentServiceProviderDraftPayment"];
      };
    };
    responses: {
      /** @description Manage the PaymentServiceProviderDraftPayment's for a PISP. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["PaymentServiceProviderDraftPaymentCreate"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Manage the PaymentServiceProviderDraftPayment's for a PISP. */
  READ_PaymentServiceProviderDraftPayment_for_User: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        itemId: number;
      };
    };
    responses: {
      /** @description Manage the PaymentServiceProviderDraftPayment's for a PISP. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["PaymentServiceProviderDraftPaymentRead"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Manage the PaymentServiceProviderDraftPayment's for a PISP. */
  UPDATE_PaymentServiceProviderDraftPayment_for_User: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        itemId: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PaymentServiceProviderDraftPayment"];
      };
    };
    responses: {
      /** @description Manage the PaymentServiceProviderDraftPayment's for a PISP. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["PaymentServiceProviderDraftPaymentUpdate"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description The endpoint for payment service provider issuer transactions */
  List_all_PaymentServiceProviderIssuerTransaction_for_User: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
      };
    };
    responses: {
      /** @description The endpoint for payment service provider issuer transactions */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["PaymentServiceProviderIssuerTransactionListing"][];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description The endpoint for payment service provider issuer transactions */
  CREATE_PaymentServiceProviderIssuerTransaction_for_User: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PaymentServiceProviderIssuerTransaction"];
      };
    };
    responses: {
      /** @description The endpoint for payment service provider issuer transactions */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["PaymentServiceProviderIssuerTransactionCreate"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description The endpoint for payment service provider issuer transactions */
  READ_PaymentServiceProviderIssuerTransaction_for_User: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        itemId: number;
      };
    };
    responses: {
      /** @description The endpoint for payment service provider issuer transactions */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["PaymentServiceProviderIssuerTransactionRead"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description The endpoint for payment service provider issuer transactions */
  UPDATE_PaymentServiceProviderIssuerTransaction_for_User: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        itemId: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PaymentServiceProviderIssuerTransaction"];
      };
    };
    responses: {
      /** @description The endpoint for payment service provider issuer transactions */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["PaymentServiceProviderIssuerTransactionUpdate"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Get a PDF export of an invoice. */
  List_all_PdfContent_for_User_Invoice: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        invoiceID: number;
      };
    };
    responses: {
      /** @description Get a PDF export of an invoice. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["InvoiceExportPdfContentListing"][];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Used to upload a CSV export from Splitwise, and create a new Registry from it. */
  CREATE_RegistryImportSplitwiseCsv: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["RegistryImportSplitwiseCsv"];
      };
    };
    responses: {
      /** @description Used to upload a CSV export from Splitwise, and create a new Registry from it. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["RegistryImportSplitwiseCsvCreate"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Get a listing of all Slice group settlements. */
  List_all_RegistrySettlement_for_User_Registry: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        registryID: number;
      };
    };
    responses: {
      /** @description Used to settle a Slice group. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["RegistrySettlementListing"][];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Create a new Slice group settlement. */
  CREATE_RegistrySettlement_for_User_Registry: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        registryID: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["RegistrySettlement"];
      };
    };
    responses: {
      /** @description Used to settle a Slice group. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["RegistrySettlementCreate"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Get a specific Slice group settlement. */
  READ_RegistrySettlement_for_User_Registry: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        registryID: number;
        itemId: number;
      };
    };
    responses: {
      /** @description Used to settle a Slice group. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["RegistrySettlementRead"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Request a card replacement. */
  CREATE_Replace_for_User_Card: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        cardID: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CardReplace"];
      };
    };
    responses: {
      /** @description It is possible to order a card replacement with the bunq API.<br/><br/>You can order up to one free card replacement per year. Additional replacement requests will be billed.<br/><br/>The card replacement will have the same expiry date and the same pricing as the old card, but it will have a new card number. You can change the description and optional the PIN through the card replacement endpoint. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["CardReplaceCreate"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Get all payment requests for a user's monetary account. bunqme_share_url is always null if the counterparty is a bunq user. */
  List_all_RequestInquiry_for_User_MonetaryAccount: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
      };
    };
    responses: {
      /** @description RequestInquiry, aka 'RFP' (Request for Payment), is one of the innovative features that bunq offers. To request payment from another bunq account a new Request Inquiry is created. As with payments you can add attachments to a RFP. Requests for Payment are the foundation for a number of consumer features like 'Split the bill' and 'Request forwarding'. We invite you to invent your own based on the bunq api! */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["RequestInquiryListing"][];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Create a new payment request. */
  CREATE_RequestInquiry_for_User_MonetaryAccount: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["RequestInquiry"];
      };
    };
    responses: {
      /** @description RequestInquiry, aka 'RFP' (Request for Payment), is one of the innovative features that bunq offers. To request payment from another bunq account a new Request Inquiry is created. As with payments you can add attachments to a RFP. Requests for Payment are the foundation for a number of consumer features like 'Split the bill' and 'Request forwarding'. We invite you to invent your own based on the bunq api! */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["RequestInquiryCreate"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Get the details of a specific payment request, including its status. bunqme_share_url is always null if the counterparty is a bunq user. */
  READ_RequestInquiry_for_User_MonetaryAccount: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
        itemId: number;
      };
    };
    responses: {
      /** @description RequestInquiry, aka 'RFP' (Request for Payment), is one of the innovative features that bunq offers. To request payment from another bunq account a new Request Inquiry is created. As with payments you can add attachments to a RFP. Requests for Payment are the foundation for a number of consumer features like 'Split the bill' and 'Request forwarding'. We invite you to invent your own based on the bunq api! */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["RequestInquiryRead"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Revoke a request for payment, by updating the status to REVOKED. */
  UPDATE_RequestInquiry_for_User_MonetaryAccount: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
        itemId: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["RequestInquiry"];
      };
    };
    responses: {
      /** @description RequestInquiry, aka 'RFP' (Request for Payment), is one of the innovative features that bunq offers. To request payment from another bunq account a new Request Inquiry is created. As with payments you can add attachments to a RFP. Requests for Payment are the foundation for a number of consumer features like 'Split the bill' and 'Request forwarding'. We invite you to invent your own based on the bunq api! */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["RequestInquiryUpdate"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Return all the request batches for a monetary account. */
  List_all_RequestInquiryBatch_for_User_MonetaryAccount: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
      };
    };
    responses: {
      /** @description Create a batch of requests for payment, or show the request batches of a monetary account. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["RequestInquiryBatchListing"][];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Create a request batch by sending an array of single request objects, that will become part of the batch. */
  CREATE_RequestInquiryBatch_for_User_MonetaryAccount: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["RequestInquiryBatch"];
      };
    };
    responses: {
      /** @description Create a batch of requests for payment, or show the request batches of a monetary account. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["RequestInquiryBatchCreate"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Return the details of a specific request batch. */
  READ_RequestInquiryBatch_for_User_MonetaryAccount: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
        itemId: number;
      };
    };
    responses: {
      /** @description Create a batch of requests for payment, or show the request batches of a monetary account. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["RequestInquiryBatchRead"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Revoke a request batch. The status of all the requests will be set to REVOKED. */
  UPDATE_RequestInquiryBatch_for_User_MonetaryAccount: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
        itemId: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["RequestInquiryBatch"];
      };
    };
    responses: {
      /** @description Create a batch of requests for payment, or show the request batches of a monetary account. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["RequestInquiryBatchUpdate"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Get the details for a specific existing RequestResponse. */
  READ_RequestResponse_for_User_MonetaryAccount: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
        itemId: number;
      };
    };
    responses: {
      /** @description A RequestResponse is what a user on the other side of a RequestInquiry gets when he is sent one. So a RequestInquiry is the initiator and visible for the user that sent it and that wants to receive the money. A RequestResponse is what the other side sees, i.e. the user that pays the money to accept the request. The content is almost identical. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["RequestResponseRead"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Update the status to accept or reject the RequestResponse. */
  UPDATE_RequestResponse_for_User_MonetaryAccount: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
        itemId: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["RequestResponse"];
      };
    };
    responses: {
      /** @description A RequestResponse is what a user on the other side of a RequestInquiry gets when he is sent one. So a RequestInquiry is the initiator and visible for the user that sent it and that wants to receive the money. A RequestResponse is what the other side sees, i.e. the user that pays the money to accept the request. The content is almost identical. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["RequestResponseUpdate"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Get all RequestResponses for a MonetaryAccount. */
  List_all_RequestResponse_for_User_MonetaryAccount: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
      };
    };
    responses: {
      /** @description A RequestResponse is what a user on the other side of a RequestInquiry gets when he is sent one. So a RequestInquiry is the initiator and visible for the user that sent it and that wants to receive the money. A RequestResponse is what the other side sees, i.e. the user that pays the money to accept the request. The content is almost identical. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["RequestResponseListing"][];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Used to create a sandbox userCompany. */
  CREATE_SandboxUserCompany: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SandboxUserCompany"];
      };
    };
    responses: {
      /** @description Used to create a sandbox userCompany. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["SandboxUserCompanyCreate"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Used to create a sandbox userPerson. */
  CREATE_SandboxUserPerson: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SandboxUserPerson"];
      };
    };
    responses: {
      /** @description Used to create a sandbox userPerson. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["SandboxUserPersonCreate"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Get a specific schedule definition for a given monetary account. */
  READ_Schedule_for_User_MonetaryAccount: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
        itemId: number;
      };
    };
    responses: {
      /** @description view for reading the scheduled definitions. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["ScheduleRead"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Get a collection of scheduled definition for a given monetary account. You can add the parameter type to filter the response. When type={SCHEDULE_DEFINITION_PAYMENT,SCHEDULE_DEFINITION_PAYMENT_BATCH} is provided only schedule definition object that relate to these definitions are returned. */
  List_all_Schedule_for_User_MonetaryAccount: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
      };
    };
    responses: {
      /** @description view for reading the scheduled definitions. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["ScheduleListing"][];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Get a collection of scheduled definition for all accessible monetary accounts of the user. You can add the parameter type to filter the response. When type={SCHEDULE_DEFINITION_PAYMENT,SCHEDULE_DEFINITION_PAYMENT_BATCH} is provided only schedule definition object that relate to these definitions are returned. */
  List_all_Schedule_for_User: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
      };
    };
    responses: {
      /** @description view for reading the scheduled definitions. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["ScheduleUserListing"][];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description view for reading, updating and listing the scheduled instance. */
  READ_ScheduleInstance_for_User_MonetaryAccount_Schedule: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
        scheduleID: number;
        itemId: number;
      };
    };
    responses: {
      /** @description view for reading, updating and listing the scheduled instance. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["ScheduleInstanceRead"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description view for reading, updating and listing the scheduled instance. */
  UPDATE_ScheduleInstance_for_User_MonetaryAccount_Schedule: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
        scheduleID: number;
        itemId: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ScheduleInstance"];
      };
    };
    responses: {
      /** @description view for reading, updating and listing the scheduled instance. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["ScheduleInstanceUpdate"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description view for reading, updating and listing the scheduled instance. */
  List_all_ScheduleInstance_for_User_MonetaryAccount_Schedule: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
        scheduleID: number;
      };
    };
    responses: {
      /** @description view for reading, updating and listing the scheduled instance. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["ScheduleInstanceListing"][];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Endpoint for schedule payments. */
  List_all_SchedulePayment_for_User_MonetaryAccount: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
      };
    };
    responses: {
      /** @description Endpoint for schedule payments. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["SchedulePaymentListing"][];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Endpoint for schedule payments. */
  CREATE_SchedulePayment_for_User_MonetaryAccount: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SchedulePayment"];
      };
    };
    responses: {
      /** @description Endpoint for schedule payments. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["SchedulePaymentCreate"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Endpoint for schedule payments. */
  READ_SchedulePayment_for_User_MonetaryAccount: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
        itemId: number;
      };
    };
    responses: {
      /** @description Endpoint for schedule payments. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["SchedulePaymentRead"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Endpoint for schedule payments. */
  UPDATE_SchedulePayment_for_User_MonetaryAccount: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
        itemId: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SchedulePayment"];
      };
    };
    responses: {
      /** @description Endpoint for schedule payments. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["SchedulePaymentUpdate"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Endpoint for schedule payments. */
  DELETE_SchedulePayment_for_User_MonetaryAccount: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
        itemId: number;
      };
    };
    responses: {
      /** @description Endpoint for schedule payments. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["SchedulePaymentDelete"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Endpoint for schedule payment batches. */
  READ_SchedulePaymentBatch_for_User_MonetaryAccount: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
        itemId: number;
      };
    };
    responses: {
      /** @description Endpoint for schedule payment batches. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["SchedulePaymentBatchRead"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Endpoint for schedule payment batches. */
  UPDATE_SchedulePaymentBatch_for_User_MonetaryAccount: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
        itemId: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SchedulePaymentBatch"];
      };
    };
    responses: {
      /** @description Endpoint for schedule payment batches. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["SchedulePaymentBatchUpdate"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Endpoint for schedule payment batches. */
  DELETE_SchedulePaymentBatch_for_User_MonetaryAccount: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
        itemId: number;
      };
    };
    responses: {
      /** @description Endpoint for schedule payment batches. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["SchedulePaymentBatchDelete"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Endpoint for schedule payment batches. */
  CREATE_SchedulePaymentBatch_for_User_MonetaryAccount: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SchedulePaymentBatch"];
      };
    };
    responses: {
      /** @description Endpoint for schedule payment batches. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["SchedulePaymentBatchCreate"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description An endpoint that will always throw an error. */
  CREATE_ServerError: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ServerError"];
      };
    };
    responses: {
      /** @description An endpoint that will always throw an error. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["ServerErrorCreate"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Show the ServerPublicKey for this Installation. */
  List_all_ServerPublicKey_for_Installation: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        installationID: number;
      };
    };
    responses: {
      /** @description Using /installation/_/server-public-key you can request the ServerPublicKey again. This is done by referring to the id of the Installation. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["InstallationServerPublicKeyListing"][];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Deletes the current session. */
  DELETE_Session: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        itemId: number;
      };
    };
    responses: {
      /** @description Endpoint for operations over the current session. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["SessionDelete"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Create a new session for a DeviceServer. Provide the Installation token in the "X-Bunq-Client-Authentication" header. And don't forget to create the "X-Bunq-Client-Signature" header. The response contains a Session token that should be used for as the "X-Bunq-Client-Authentication" header for all future API calls. The ip address making this call needs to match the ip address bound to your API key. */
  CREATE_SessionServer: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SessionServer"];
      };
    };
    responses: {
      /** @description Once you have created an Installation and a DeviceServer with that Installation, then you are ready to start a session! A session expires after the same amount of time you have set for Auto Logout in your user account. By default this is 1 week. If a request is made 30 seconds before a session expires, it will be extended from that moment by your auto logout time, but never by more than 5 minutes. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["SessionServerCreate"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description [DEPRECATED - use /share-invite-monetary-account-response] Get a list with all the share inquiries for a monetary account, only if the requesting user has permission to change the details of the various ones. */
  List_all_ShareInviteMonetaryAccountInquiry_for_User_MonetaryAccount: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
      };
    };
    responses: {
      /** @description [DEPRECATED - use /share-invite-monetary-account-response] Used to share a monetary account with another bunq user, as in the 'Connect' feature in the bunq app. Allow the creation of share inquiries that, in the same way as request inquiries, can be revoked by the user creating them or accepted/rejected by the other party. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["ShareInviteMonetaryAccountInquiryListing"][];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description [DEPRECATED - use /share-invite-monetary-account-response] Create a new share inquiry for a monetary account, specifying the permission the other bunq user will have on it. */
  CREATE_ShareInviteMonetaryAccountInquiry_for_User_MonetaryAccount: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ShareInviteMonetaryAccountInquiry"];
      };
    };
    responses: {
      /** @description [DEPRECATED - use /share-invite-monetary-account-response] Used to share a monetary account with another bunq user, as in the 'Connect' feature in the bunq app. Allow the creation of share inquiries that, in the same way as request inquiries, can be revoked by the user creating them or accepted/rejected by the other party. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["ShareInviteMonetaryAccountInquiryCreate"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description [DEPRECATED - use /share-invite-monetary-account-response] Get the details of a specific share inquiry. */
  READ_ShareInviteMonetaryAccountInquiry_for_User_MonetaryAccount: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
        itemId: number;
      };
    };
    responses: {
      /** @description [DEPRECATED - use /share-invite-monetary-account-response] Used to share a monetary account with another bunq user, as in the 'Connect' feature in the bunq app. Allow the creation of share inquiries that, in the same way as request inquiries, can be revoked by the user creating them or accepted/rejected by the other party. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["ShareInviteMonetaryAccountInquiryRead"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description [DEPRECATED - use /share-invite-monetary-account-response] Update the details of a share. This includes updating status (revoking or cancelling it), granted permission and validity period of this share. */
  UPDATE_ShareInviteMonetaryAccountInquiry_for_User_MonetaryAccount: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
        itemId: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ShareInviteMonetaryAccountInquiry"];
      };
    };
    responses: {
      /** @description [DEPRECATED - use /share-invite-monetary-account-response] Used to share a monetary account with another bunq user, as in the 'Connect' feature in the bunq app. Allow the creation of share inquiries that, in the same way as request inquiries, can be revoked by the user creating them or accepted/rejected by the other party. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["ShareInviteMonetaryAccountInquiryUpdate"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Return the details of a specific share a user was invited to. */
  READ_ShareInviteMonetaryAccountResponse_for_User: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        itemId: number;
      };
    };
    responses: {
      /** @description Used to view or respond to shares a user was invited to. See 'share-invite-bank-inquiry' for more information about the inquiring endpoint. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["ShareInviteMonetaryAccountResponseRead"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Accept or reject a share a user was invited to. */
  UPDATE_ShareInviteMonetaryAccountResponse_for_User: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        itemId: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ShareInviteMonetaryAccountResponse"];
      };
    };
    responses: {
      /** @description Used to view or respond to shares a user was invited to. See 'share-invite-bank-inquiry' for more information about the inquiring endpoint. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["ShareInviteMonetaryAccountResponseUpdate"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Return all the shares a user was invited to. */
  List_all_ShareInviteMonetaryAccountResponse_for_User: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
      };
    };
    responses: {
      /** @description Used to view or respond to shares a user was invited to. See 'share-invite-bank-inquiry' for more information about the inquiring endpoint. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["ShareInviteMonetaryAccountResponseListing"][];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description View for requesting Sofort transactions and polling their status. */
  READ_SofortMerchantTransaction_for_User_MonetaryAccount: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
        itemId: number;
      };
    };
    responses: {
      /** @description View for requesting Sofort transactions and polling their status. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["SofortMerchantTransactionRead"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description View for requesting Sofort transactions and polling their status. */
  List_all_SofortMerchantTransaction_for_User_MonetaryAccount: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
      };
    };
    responses: {
      /** @description View for requesting Sofort transactions and polling their status. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["SofortMerchantTransactionListing"][];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Used to create a statement export of a single payment. */
  CREATE_Statement_for_User_MonetaryAccount_Event: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
        eventID: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ExportStatementPayment"];
      };
    };
    responses: {
      /** @description Used to create a statement export of a single payment. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["ExportStatementPaymentCreate"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Used to create a statement export of a single payment. */
  READ_Statement_for_User_MonetaryAccount_Event: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
        eventID: number;
        itemId: number;
      };
    };
    responses: {
      /** @description Used to create a statement export of a single payment. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["ExportStatementPaymentRead"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description An incoming payment made towards an account of an external bank and redirected to a bunq account via switch service. */
  READ_SwitchServicePayment_for_User_MonetaryAccount: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
        itemId: number;
      };
    };
    responses: {
      /** @description An incoming payment made towards an account of an external bank and redirected to a bunq account via switch service. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["BankSwitchServiceNetherlandsIncomingPaymentRead"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Create a request from an ideal transaction. */
  CREATE_TokenQrRequestIdeal_for_User: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TokenQrRequestIdeal"];
      };
    };
    responses: {
      /** @description Using this call you create a request for payment from an external token provided with an ideal transaction. Make sure your iDEAL payments are compliant with the iDEAL standards, by following the following manual: https:/www.bunq.com/terms-idealstandards. It's very important to keep these points in mind when you are using the endpoint to make iDEAL payments from your application. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["TokenQrRequestIdealCreate"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Create a request from an SOFORT transaction. */
  CREATE_TokenQrRequestSofort_for_User: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TokenQrRequestSofort"];
      };
    };
    responses: {
      /** @description Using this call you can create a SOFORT Request assigned to your User by providing the Token of the request. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["TokenQrRequestSofortCreate"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Used to get a list of supported currencies for Transferwise. */
  List_all_TransferwiseCurrency_for_User: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
      };
    };
    responses: {
      /** @description Used to get a list of supported currencies for Transferwise. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["TransferwiseCurrencyListing"][];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Used to get quotes from Transferwise. These can be used to initiate payments. */
  CREATE_TransferwiseQuote_for_User: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TransferwiseQuote"];
      };
    };
    responses: {
      /** @description Used to get quotes from Transferwise. These can be used to initiate payments. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["TransferwiseQuoteCreate"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Used to get quotes from Transferwise. These can be used to initiate payments. */
  READ_TransferwiseQuote_for_User: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        itemId: number;
      };
    };
    responses: {
      /** @description Used to get quotes from Transferwise. These can be used to initiate payments. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["TransferwiseQuoteRead"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Used to get temporary quotes from Transferwise. These cannot be used to initiate payments */
  CREATE_TransferwiseQuoteTemporary_for_User: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TransferwiseQuoteTemporary"];
      };
    };
    responses: {
      /** @description Used to get temporary quotes from Transferwise. These cannot be used to initiate payments */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["TransferwiseQuoteTemporaryCreate"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Used to get temporary quotes from Transferwise. These cannot be used to initiate payments */
  READ_TransferwiseQuoteTemporary_for_User: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        itemId: number;
      };
    };
    responses: {
      /** @description Used to get temporary quotes from Transferwise. These cannot be used to initiate payments */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["TransferwiseQuoteTemporaryRead"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Used to manage recipient accounts with Transferwise. */
  List_all_TransferwiseRecipient_for_User_TransferwiseQuote: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "transferwise-quoteID": number;
      };
    };
    responses: {
      /** @description Used to manage recipient accounts with Transferwise. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["TransferwiseAccountQuoteListing"][];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Used to manage recipient accounts with Transferwise. */
  CREATE_TransferwiseRecipient_for_User_TransferwiseQuote: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "transferwise-quoteID": number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TransferwiseAccountQuote"];
      };
    };
    responses: {
      /** @description Used to manage recipient accounts with Transferwise. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["TransferwiseAccountQuoteCreate"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Used to manage recipient accounts with Transferwise. */
  READ_TransferwiseRecipient_for_User_TransferwiseQuote: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "transferwise-quoteID": number;
        itemId: number;
      };
    };
    responses: {
      /** @description Used to manage recipient accounts with Transferwise. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["TransferwiseAccountQuoteRead"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Used to manage recipient accounts with Transferwise. */
  DELETE_TransferwiseRecipient_for_User_TransferwiseQuote: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "transferwise-quoteID": number;
        itemId: number;
      };
    };
    responses: {
      /** @description Used to manage recipient accounts with Transferwise. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["TransferwiseAccountQuoteDelete"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Used to determine the recipient account requirements for Transferwise transfers. */
  List_all_TransferwiseRecipientRequirement_for_User_TransferwiseQuote: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "transferwise-quoteID": number;
      };
    };
    responses: {
      /** @description Used to determine the recipient account requirements for Transferwise transfers. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["TransferwiseAccountRequirementListing"][];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Used to determine the recipient account requirements for Transferwise transfers. */
  CREATE_TransferwiseRecipientRequirement_for_User_TransferwiseQuote: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "transferwise-quoteID": number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TransferwiseAccountRequirement"];
      };
    };
    responses: {
      /** @description Used to determine the recipient account requirements for Transferwise transfers. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["TransferwiseAccountRequirementCreate"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Used to create Transferwise payments. */
  List_all_TransferwiseTransfer_for_User_TransferwiseQuote: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "transferwise-quoteID": number;
      };
    };
    responses: {
      /** @description Used to create Transferwise payments. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["TransferwiseTransferListing"][];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Used to create Transferwise payments. */
  CREATE_TransferwiseTransfer_for_User_TransferwiseQuote: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "transferwise-quoteID": number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TransferwiseTransfer"];
      };
    };
    responses: {
      /** @description Used to create Transferwise payments. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["TransferwiseTransferCreate"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Used to create Transferwise payments. */
  READ_TransferwiseTransfer_for_User_TransferwiseQuote: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "transferwise-quoteID": number;
        itemId: number;
      };
    };
    responses: {
      /** @description Used to create Transferwise payments. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["TransferwiseTransferRead"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Used to determine the account requirements for Transferwise transfers. */
  CREATE_TransferwiseTransferRequirement_for_User_TransferwiseQuote: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "transferwise-quoteID": number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TransferwiseTransferRequirement"];
      };
    };
    responses: {
      /** @description Used to determine the account requirements for Transferwise transfers. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["TransferwiseTransferRequirementCreate"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Used to manage Transferwise users. */
  List_all_TransferwiseUser_for_User: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
      };
    };
    responses: {
      /** @description Used to manage Transferwise users. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["TransferwiseUserListing"][];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Used to manage Transferwise users. */
  CREATE_TransferwiseUser_for_User: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TransferwiseUser"];
      };
    };
    responses: {
      /** @description Used to manage Transferwise users. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["TransferwiseUserCreate"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description See how many trees this user has planted. */
  List_all_TreeProgress_for_User: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
      };
    };
    responses: {
      /** @description See how many trees this user has planted. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["TreeProgressListing"][];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Get a specific user. */
  READ_User: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        itemId: number;
      };
    };
    responses: {
      /** @description Using this call you can retrieve information of the user you are logged in as. This includes your user id, which is referred to in endpoints. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["UserRead"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Get a collection of all available users. */
  List_all_User: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
    };
    responses: {
      /** @description Using this call you can retrieve information of the user you are logged in as. This includes your user id, which is referred to in endpoints. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["UserListing"][];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Get a specific company. */
  READ_UserCompany: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        itemId: number;
      };
    };
    responses: {
      /** @description With UserCompany you can retrieve information regarding the authenticated UserCompany and update specific fields.<br/><br/>Notification filters can be set on a UserCompany level to receive callbacks. For more information check the <a href="/api/1/page/callbacks">dedicated callbacks page</a>. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["UserCompanyRead"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Modify a specific company's data. */
  UPDATE_UserCompany: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        itemId: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UserCompany"];
      };
    };
    responses: {
      /** @description With UserCompany you can retrieve information regarding the authenticated UserCompany and update specific fields.<br/><br/>Notification filters can be set on a UserCompany level to receive callbacks. For more information check the <a href="/api/1/page/callbacks">dedicated callbacks page</a>. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["UserCompanyUpdate"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Used to view UserPaymentServiceProvider for session creation. */
  READ_UserPaymentServiceProvider: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        itemId: number;
      };
    };
    responses: {
      /** @description Used to view UserPaymentServiceProvider for session creation. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["UserPaymentServiceProviderRead"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Get a specific person. */
  READ_UserPerson: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        itemId: number;
      };
    };
    responses: {
      /** @description With UserPerson you can retrieve information regarding the authenticated UserPerson and update specific fields.<br/><br/>Notification filters can be set on a UserPerson level to receive callbacks. For more information check the <a href="/api/1/page/callbacks">dedicated callbacks page</a>. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["UserPersonRead"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Modify a specific person object's data. */
  UPDATE_UserPerson: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        itemId: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UserPerson"];
      };
    };
    responses: {
      /** @description With UserPerson you can retrieve information regarding the authenticated UserPerson and update specific fields.<br/><br/>Notification filters can be set on a UserPerson level to receive callbacks. For more information check the <a href="/api/1/page/callbacks">dedicated callbacks page</a>. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["UserPersonUpdate"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Get a specific recurring SDD whitelist entry. */
  READ_WhitelistSdd_for_User: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        itemId: number;
      };
    };
    responses: {
      /** @description Depreciated route, replaced with whitelist-sdd-recurring */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["WhitelistSddRead"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Get a listing of all recurring SDD whitelist entries for a target monetary account. */
  List_all_WhitelistSdd_for_User: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
      };
    };
    responses: {
      /** @description Depreciated route, replaced with whitelist-sdd-recurring */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["WhitelistSddListing"][];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Get a specific SDD whitelist entry. */
  READ_WhitelistSdd_for_User_MonetaryAccount: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
        itemId: number;
      };
    };
    responses: {
      /** @description Whitelist an SDD so that when one comes in, it is automatically accepted. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["WhitelistSddMonetaryAccountPayingRead"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Get a listing of all SDD whitelist entries for a target monetary account. */
  List_all_WhitelistSdd_for_User_MonetaryAccount: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        "monetary-accountID": number;
      };
    };
    responses: {
      /** @description Whitelist an SDD so that when one comes in, it is automatically accepted. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["WhitelistSddMonetaryAccountPayingListing"][];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Get a specific one off SDD whitelist entry. */
  READ_WhitelistSddOneOff_for_User: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        itemId: number;
      };
    };
    responses: {
      /** @description Whitelist an one off SDD so that when another one off SDD from the creditor comes in, it is automatically accepted. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["WhitelistSddOneOffRead"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Whitelist an one off SDD so that when another one off SDD from the creditor comes in, it is automatically accepted. */
  UPDATE_WhitelistSddOneOff_for_User: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        itemId: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["WhitelistSddOneOff"];
      };
    };
    responses: {
      /** @description Whitelist an one off SDD so that when another one off SDD from the creditor comes in, it is automatically accepted. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["WhitelistSddOneOffUpdate"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Whitelist an one off SDD so that when another one off SDD from the creditor comes in, it is automatically accepted. */
  DELETE_WhitelistSddOneOff_for_User: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        itemId: number;
      };
    };
    responses: {
      /** @description Whitelist an one off SDD so that when another one off SDD from the creditor comes in, it is automatically accepted. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["WhitelistSddOneOffDelete"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Get a listing of all one off SDD whitelist entries for a target monetary account. */
  List_all_WhitelistSddOneOff_for_User: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
      };
    };
    responses: {
      /** @description Whitelist an one off SDD so that when another one off SDD from the creditor comes in, it is automatically accepted. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["WhitelistSddOneOffListing"][];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Create a new one off SDD whitelist entry. */
  CREATE_WhitelistSddOneOff_for_User: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["WhitelistSddOneOff"];
      };
    };
    responses: {
      /** @description Whitelist an one off SDD so that when another one off SDD from the creditor comes in, it is automatically accepted. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["WhitelistSddOneOffCreate"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Get a specific recurring SDD whitelist entry. */
  READ_WhitelistSddRecurring_for_User: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        itemId: number;
      };
    };
    responses: {
      /** @description Whitelist a recurring SDD so that when another recurrence comes in, it is automatically accepted. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["WhitelistSddRecurringRead"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Whitelist a recurring SDD so that when another recurrence comes in, it is automatically accepted. */
  UPDATE_WhitelistSddRecurring_for_User: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        itemId: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["WhitelistSddRecurring"];
      };
    };
    responses: {
      /** @description Whitelist a recurring SDD so that when another recurrence comes in, it is automatically accepted. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["WhitelistSddRecurringUpdate"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Whitelist a recurring SDD so that when another recurrence comes in, it is automatically accepted. */
  DELETE_WhitelistSddRecurring_for_User: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
        itemId: number;
      };
    };
    responses: {
      /** @description Whitelist a recurring SDD so that when another recurrence comes in, it is automatically accepted. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["WhitelistSddRecurringDelete"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Get a listing of all recurring SDD whitelist entries for a target monetary account. */
  List_all_WhitelistSddRecurring_for_User: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
      };
    };
    responses: {
      /** @description Whitelist a recurring SDD so that when another recurrence comes in, it is automatically accepted. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["WhitelistSddRecurringListing"][];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
  /** @description Create a new recurring SDD whitelist entry. */
  CREATE_WhitelistSddRecurring_for_User: {
    parameters: {
      header: {
        "Cache-Control"?: components["parameters"]["Cache-Control"];
        "User-Agent": components["parameters"]["User-Agent"];
        "X-Bunq-Language"?: components["parameters"]["X-Bunq-Language"];
        "X-Bunq-Region"?: components["parameters"]["X-Bunq-Region"];
        "X-Bunq-Client-Request-Id"?: components["parameters"]["X-Bunq-Client-Request-Id"];
        "X-Bunq-Geolocation"?: components["parameters"]["X-Bunq-Geolocation"];
        "X-Bunq-Client-Authentication": components["parameters"]["X-Bunq-Client-Authentication"];
      };
      path: {
        userID: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["WhitelistSddRecurring"];
      };
    };
    responses: {
      /** @description Whitelist a recurring SDD so that when another recurrence comes in, it is automatically accepted. */
      200: {
        headers: {
          "X-Bunq-Client-Response-Id": components["headers"]["X-Bunq-Client-Response-Id"];
          "X-Bunq-Client-Request-Id": components["headers"]["X-Bunq-Client-Request-Id"];
          "X-Bunq-Server-Signature": components["headers"]["X-Bunq-Server-Signature"];
        };
        content: {
          "application/json": components["schemas"]["WhitelistSddRecurringCreate"];
        };
      };
      400: components["responses"]["GenericError"];
    };
  };
}
